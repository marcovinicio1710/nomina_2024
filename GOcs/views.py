# Create your views here.
from django.shortcuts import render , redirect
from django.utils.datastructures import MultiValueDictKeyError
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.contrib.auth import login, logout
from operator import itemgetter
from django.conf import settings
from django.shortcuts import get_object_or_404
from django.shortcuts import get_list_or_404
from math import ceil
from datetime import datetime
from GOcs.models import Archivos_Colaboradores, Departamento_Empresa,Seguimiento_Actividad,  UserProfile, SIPE_Mensual, Archivos, Planificacion, Info_Empresa , Liquidaciones,Liquidaciones_Clientes
from GOcs.models import Cerrar_Planilla,  Acreedores_quincena, Info_Clientes , Archivo_TXT, Colaboradores , Dias_Feriados , Hoja_tiempo , Permisos , Acreedores , Ajuste_Planilla , Generar_Horario_Aministrativo , Panilla_por_periodo_quincenal, Panilla_por_periodo_quincenal_clientes
from django.core.exceptions import ObjectDoesNotExist
from django.core.files.storage import FileSystemStorage
from django.db.models import Sum , F , FloatField , Q
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Pt, RGBColor , Inches
from docx.table import Table
from django.db.models.functions import Abs
import os
import pendulum
import calendar
from openpyxl import load_workbook , Workbook
from openpyxl.styles import PatternFill, Border, Side, Alignment, Protection, Font ,Color
from openpyxl.styles import colors
from openpyxl.worksheet import dimensions
import unicodedata
import math
from dateutil.relativedelta import relativedelta
import json
import datetime
from django.core.files import File
from django.utils.text import slugify
from django.core.files.storage import default_storage
from io import BytesIO
import pandas as pd
from django.db import IntegrityError
import random
import requests
import string
import traceback

'''


3_ crear excel de acreedores
4_crear importancion de vacaciones y 
5__crear importacion de acreedores

'''

#django.core.files.uploadedfile.UploadedFile

from datetime import datetime, timedelta

def fun_guardar_datos_en_acreedores_cuotas_liquidacion_empresa(id_col,Quater,fecha_pago, dinero_disponible , Tipo_Operacion):
    lista_acree=Acreedores.objects.filter(Colaborador__pk=id_col, Tipo_acreeditor='Empresa',Estado_Permiso='Aprobado',Dia_inicio_cobro__lte=fecha_pago,Dia_fin_cobro__gte=fecha_pago)
    
    for acredores_obj in lista_acree:
        Monto_mensual=acredores_obj.Monto_mensual
        cuotas_restante=acredores_obj.cuotas_restante
        dinero_pagado=acredores_obj.dinero_pagado
        dinero_total=acredores_obj.Monto_total
        dif_monto_deuda=dinero_total - dinero_pagado
        if dif_monto_deuda>=dinero_disponible and dinero_disponible>0:
             monto_a_pagar=dinero_disponible
        elif dif_monto_deuda < dinero_disponible and  dinero_disponible>0:
            dinero_disponible-=dif_monto_deuda
            monto_a_pagar = dif_monto_deuda 

        try:
             created = Acreedores_quincena.objects.get(Acreedores_id=acredores_obj.pk ,  Periodo_Cobro=Quater , Tipo_Operacion=Tipo_Operacion)

             if created.Monto_periodo!=monto_a_pagar:
                created.Monto_periodo=monto_a_pagar
                created.Total_monto_abonado=dinero_pagado+monto_a_pagar
                created.save()

        except:
            #actualizar
            created = Acreedores_quincena.objects.create(Acreedores_id=acredores_obj.pk,
                                                          Dia_Inicio_cobro=fecha_pago,
                                                          Periodo_Cobro=Quater,
                                                          Monto_periodo=monto_a_pagar,
                                                          Nro_Cuota=cuotas_restante+1,
                                                          Total_monto_abonado=dinero_pagado+monto_a_pagar,
                                                          Tipo_Operacion=Tipo_Operacion)

def fun_guardar_datos_en_acreedores_cuotas_liquidacion_hipotecario(id_col,Quater,fecha_pago, dinero_disponible , Tipo_Operacion):
    
    lista_acree=Acreedores.objects.filter(Colaborador__pk=id_col,Estado_Permiso='Aprobado',Dia_inicio_cobro__lte=fecha_pago,Dia_fin_cobro__gte=fecha_pago).exclude(Tipo_acreeditor='Empresa')
    
    for acredores_obj in lista_acree:
        Monto_mensual=acredores_obj.Monto_mensual
        cuotas_restante=acredores_obj.cuotas_restante
        dinero_pagado=acredores_obj.dinero_pagado
        dinero_total=acredores_obj.Monto_total
        dif_monto_deuda=dinero_total - dinero_pagado
        if dif_monto_deuda>=dinero_disponible and dinero_disponible>0:
             monto_a_pagar=dinero_disponible
        elif dif_monto_deuda < dinero_disponible and  dinero_disponible>0:
            dinero_disponible-=dif_monto_deuda
            monto_a_pagar = dif_monto_deuda 

        try:
             created = Acreedores_quincena.objects.get(Acreedores_id=acredores_obj.pk ,  Periodo_Cobro=Quater , Tipo_Operacion=Tipo_Operacion)

             if created.Monto_periodo!=monto_a_pagar:
                created.Monto_periodo=monto_a_pagar
                created.Total_monto_abonado=dinero_pagado+monto_a_pagar
                created.save()

        except:
            #actualizar
            created = Acreedores_quincena.objects.create(Acreedores_id=acredores_obj.pk,
                                                          Dia_Inicio_cobro=fecha_pago,
                                                          Periodo_Cobro=Quater,
                                                          Monto_periodo=monto_a_pagar,
                                                          Nro_Cuota=cuotas_restante+1,
                                                          Total_monto_abonado=dinero_pagado+monto_a_pagar,
                                                          Tipo_Operacion=Tipo_Operacion)


def fun_guardar_datos_en_acreedores_cuotas(id_col,Quater,fecha_pago, salario):
    lista_acree=Acreedores.objects.filter(Colaborador__pk=id_col, Estado_Permiso='Aprobado',Dia_inicio_cobro__lte=fecha_pago,Dia_fin_cobro__gte=fecha_pago)
    for acredores_obj in lista_acree:
        Monto_mensual=acredores_obj.Monto_mensual
        cuotas_restante=acredores_obj.cuotas_restante
        dinero_pagado=acredores_obj.dinero_pagado
        try:
            created = Acreedores_quincena.objects.get(Acreedores_id=acredores_obj.pk ,  Periodo_Cobro=Quater , Tipo_Operacion ='Planilla')
            if created.Monto_periodo!=Monto_mensual:
                created.Monto_periodo=Monto_mensual
                created.Total_monto_abonado=dinero_pagado+Monto_mensual
                created.save()
        except:
            #actualizar
            created = Acreedores_quincena.objects.create(Acreedores_id=acredores_obj.pk,
                                                          Dia_Inicio_cobro=fecha_pago,
                                                          Periodo_Cobro=Quater,
                                                          Monto_periodo=Monto_mensual,
                                                          Nro_Cuota=cuotas_restante+1,
                                                          Total_monto_abonado=dinero_pagado+Monto_mensual,
                                                          Tipo_Operacion ='Planilla')

            #acredores_obj.cuotas_restante=cuotas_restante+1
            #acredores_obj.dinero_pagado=dinero_pagado+Monto_mensual



            #acredores_obj.save()


def generar_Q_actual(fecha_string):
    dia_str = fecha_string # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
       
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        

    return codigo_planilla

def descargar_imagen(url):
    response = requests.get(url)
    if response.status_code == 200:
        return BytesIO(response.content)
    else:
        return None
    
def fun_filtrar_modelo_para_supervisor(id_Supervisor):
    empleados_reportados = Colaboradores.objects.filter(Supervisor__pk=id_Supervisor, Status='Activo')
    empleados_reportados_yo_incluido = Colaboradores.objects.filter(pk=id_Supervisor) | empleados_reportados
    return empleados_reportados_yo_incluido


def generar_clave():
    caracteres = string.ascii_letters + string.digits
    clave = ''.join(random.choice(caracteres) for _ in range(8))
    return clave

def formatear_numero(numero):
    partes = str(round((numero),2)).split('.')
    partes[0] = '{0:,}'.format(int(partes[0])).replace(',', '.')
    return ','.join(partes)

def fun_sumatorio_en_modelo_IMPORTACION_SIPE( inicio_fecha,fin_fecha,var_modelo):
    valor=0
    lista_planilla_global=SIPE_Mensual.objects.filter( fecha_sipe__gte = inicio_fecha , fecha_sipe__lte = fin_fecha )
    if len(lista_planilla_global) !=0:  
            suma_total_salario_bruto=0
            total_salario=0
            suma_total_salario_bruto = lista_planilla_global.filter( fecha_sipe__gte = inicio_fecha , fecha_sipe__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
            # Acceder al valor de la suma total 
            total_salario = suma_total_salario_bruto['total_salario_bruto']
            valor+=(round(total_salario,2))
            
            

    return valor


def fun_fecha_sipe(mes, year):
    if mes == 'Enero':
        mes_num=1

    elif mes=='Febrero':
        mes_num=2
    
    elif mes=='Marzo':
        mes_num=3
    
    elif mes=='Abril':
        mes_num=4
    
    elif mes=='Mayo':
        mes_num=5
    
    elif mes=='Junio':
        mes_num=6
    
    elif mes=='Julio':
        mes_num=7
    
    elif mes=='Agosto':
        mes_num=8

    elif mes=='Septiembre':
        mes_num=9

    elif mes=='Octubre':
        mes_num=10

    elif mes=='Noviembre':
        mes_num=11

    elif mes=='Diciembre':
        mes_num=12

    fecha_actual=datetime(int(year), mes_num,1)


    return fecha_actual.date()


def fun_guardar_datos_en_SIPE_Mensuales(datos_hoja):

    lista_final=[]
    if datos_hoja is not None:

                
                num=0
                razon_social=datos_hoja[1][2]
                cedula_jurida=datos_hoja[1][9]
                mes=datos_hoja[5][2]
                lista_mes=mes.split()
                year=lista_mes[1]
                mes=lista_mes[0].capitalize()
                nro_seguro=''
                tipo_docu=''
                nro_ident=''
                apellido=''
                nombre=''
                sexo=''
                sueldo_bruto=0
                salario_ajustado=0
                vacaciones=0
                XIII=0
                SS=0
                SE=0
                ISLR=0
                DTM=0
                RP=0
               
                fecha_novedad_entrada='sin Fecha'
                fecha_novedad_salida='sin Fecha'
                fecha_novedad_otras_lic='sin Fecha'
                fecha_novedad_vacaciones='sin Fecha'
                
                for i in range(len(datos_hoja)):
                        lista_fila=datos_hoja[i]
                       
                       
                        if i+1 == len(datos_hoja):
                                if round(sueldo_bruto + vacaciones,2)  ==  salario_ajustado:
                                        lista=[razon_social,cedula_jurida,year,mes,nombre,apellido,sexo,tipo_docu,nro_ident,
                                      nro_seguro,sueldo_bruto, vacaciones,salario_ajustado,'Son Iguales',XIII,
                                      SS,SE,DTM,ISLR,RP,fecha_novedad_entrada,fecha_novedad_salida,fecha_novedad_otras_lic,fecha_novedad_vacaciones]
                                        
                                else:
                                        
                                        lista=[razon_social,cedula_jurida,year,mes,nombre,apellido,sexo,tipo_docu,nro_ident,
                                      nro_seguro,sueldo_bruto, vacaciones,salario_ajustado,'No Son Iguales',XIII,
                                      SS,SE,DTM,ISLR,RP,fecha_novedad_entrada,fecha_novedad_salida,fecha_novedad_otras_lic,fecha_novedad_vacaciones]
                                        
                                if nombre!='':
                                        lista_final.append(lista)
                                nro_seguro=''
                                tipo_docu=''
                                nro_ident=''
                                apellido=''
                                nombre=''
                                sexo=''
                                sueldo_bruto=0
                                salario_ajustado=0
                                vacaciones=0
                                XIII=0
                                SS=0
                                SE=0
                                ISLR=0
                                DTM=0
                                RP=0
                        
                                fecha_novedad_entrada='sin Fecha'
                                fecha_novedad_salida='sin Fecha'
                                fecha_novedad_otras_lic='sin Fecha'
                                fecha_novedad_vacaciones='sin Fecha'
                                break


                        if lista_fila[1]=='Seguro Social' and  lista_fila[3]=='Apellido':
                              nro_seguro=datos_hoja[i+1][1]
                              nro_ident=datos_hoja[i+1][2]
                              tipo_docu=lista_fila[2]
                              apellido=datos_hoja[i+1][3]
                              nombre=datos_hoja[i+1][5]
                              sexo=datos_hoja[i+1][10]
                              if sexo=='':
                                     sexo=datos_hoja[i+1][-1]
                                     
                        #if apellido=='ZU¿IGA':
                                ##print(lista_fila)
                                #input()

                        if lista_fila[1]=='Sueldo':
                                sueldo_bruto=float(lista_fila[3].replace(',',''))
                        
                        if lista_fila[1]=='Salario Ajustado':
                                salario_ajustado=float(lista_fila[3].replace(',',''))

                        if lista_fila[1]=='Vacaciones':
                                test_vacas=lista_fila[3]
                                test_vacas=test_vacas.replace('.','')
                                test_vacas=test_vacas.replace(',','')
                                if test_vacas.isnumeric():
                                       
                                        vacaciones=float(lista_fila[3].replace(',',''))
                                else:
                                    fecha_novedad_vacaciones  = lista_fila[3]+' al '+lista_fila[7]
                        
                        if lista_fila[1]=='Décimo tercer mes':
                                XIII=float(lista_fila[3].replace(',',''))
                        
                        if lista_fila[1]=='Seguro Social' and  lista_fila[3]!='Apellido':
                               SS=float(lista_fila[3].replace(',',''))
                        
                        if lista_fila[1]=='Seguro Educativo':
                                SE=float(lista_fila[3].replace(',',''))

                        if lista_fila[1]=='DTM':
                                DTM=float(lista_fila[3].replace(',',''))
                        
                        if lista_fila[1]=='Impuesto Sobre la Renta':
                                ISLR=float(lista_fila[3].replace(',',''))

                        if lista_fila[1]=='Riesgos Profesionales':
                                RP=float(lista_fila[3].replace(',',''))
                        if lista_fila[1]=='Aviso Salida':
                                fecha_novedad_salida=lista_fila[-4]
                                if fecha_novedad_salida=='':
                                       fecha_novedad_salida=lista_fila[7]
                                       
                        
                        if lista_fila[1]=='Aviso Entrada':
                                fecha_novedad_entrada=lista_fila[3]

                        if lista_fila[1]=='Otras Licencias':
                                fecha_novedad_otras_lic=lista_fila[3]+' al '+lista_fila[7]

                                      
                      
                        if datos_hoja[i+1][1]=='Seguro Social' and  datos_hoja[i+1][3]=='Apellido':

                                if round(sueldo_bruto + vacaciones,2)  ==  salario_ajustado:
                                        lista=[razon_social,cedula_jurida,year,mes,nombre,apellido,sexo,tipo_docu,nro_ident,
                                      nro_seguro,sueldo_bruto, vacaciones,salario_ajustado,'Son Iguales',XIII,
                                      SS,SE,DTM,ISLR,RP,fecha_novedad_entrada,fecha_novedad_salida,fecha_novedad_otras_lic,fecha_novedad_vacaciones]
                                        
                                else:
                                        
                                        lista=[razon_social,cedula_jurida,year,mes,nombre,apellido,sexo,tipo_docu,nro_ident,
                                      nro_seguro,sueldo_bruto, vacaciones,salario_ajustado,'No Son Iguales',XIII,
                                      SS,SE,DTM,ISLR,RP,fecha_novedad_entrada,fecha_novedad_salida,fecha_novedad_otras_lic,fecha_novedad_vacaciones]
                                       
                                if nombre!='':
                                        lista_final.append(lista)
                                nro_seguro=''
                                tipo_docu=''
                                nro_ident=''
                                apellido=''
                                nombre=''
                                sexo=''
                                sueldo_bruto=0
                                salario_ajustado=0
                                vacaciones=0
                                XIII=0
                                SS=0
                                SE=0
                                ISLR=0
                                DTM=0
                                RP=0
                        
                                fecha_novedad_entrada='sin Fecha'
                                fecha_novedad_salida='sin Fecha'
                                fecha_novedad_otras_lic='sin Fecha'
                                fecha_novedad_vacaciones='sin Fecha'
    
    porc_ss=12.75/22
    porc_se=1.5/2.75
    porc_ss_xiii=10.75/18
    

    fecha_sipe=fun_fecha_sipe( lista_final[0][3], int(lista_final[0][2]))
    total_sueldo_general=0
    total_xiii_general=0
    total_col=0

    for i in lista_final:
       
        empresa=i[0]
        ced_jur=i[1]
        year=int(i[2])
        mes=i[3]
        
        nombre=i[4]
        apellido=i[5]
        sexo=i[6]
        tipo_docu=i[7]
        nro_identificacion=i[8]
        seguro_social=i[9]
        
        total_sueldo=i[10]
        total_vacaciones=i[11]
        total_xxi=i[14]
        total_sueldo_ajustado=i[12]
        
        total_ss=i[15]
        SS_Patron=total_ss*porc_ss
        total_se=i[16]
        SE_Patron=total_se*porc_ss
        total_dtm=i[17]
        DTM_SS_Patro=total_dtm*porc_ss_xiii
        total_islr=i[18]
        total_rp=i[19]
        fecha_entrada=i[20]
        fecha_salida=i[21]

        notifi_vacaciones=i[23]

        Total_Gasto_Patron=total_sueldo+total_vacaciones+total_xxi+SS_Patron+SE_Patron+DTM_SS_Patro+total_rp
        total_pago_Sipe=total_ss+total_se+total_dtm+total_islr+total_rp

        total_sueldo_general+=total_sueldo_ajustado
        total_xiii_general+=total_xxi
        total_col+=1
        

        try:
            created= SIPE_Mensual.objects.get(ced_jur=ced_jur,nro_identificacion=nro_identificacion , mes=mes , year=year)
            created.empresa=empresa
            created.ced_jur=ced_jur
            created.year=year
            created.mes=mes
            created.fecha_sipe=fecha_sipe
            created.nombre=nombre
            created.apellido=apellido
            created.sexo=sexo
            created.tipo_docu=tipo_docu
            created.nro_identificacion=nro_identificacion
            created.seguro_social=seguro_social
        
            created.total_sueldo=total_sueldo
            created.total_vacaciones=total_vacaciones
            created.total_xxi=total_xxi
            created.total_sueldo_ajustado=total_sueldo_ajustado
        
            created.total_ss=total_ss
            created.SS_Patron=SS_Patron
            created.total_se=total_se
            created.SE_Patron=SE_Patron
            created.total_dtm=total_dtm
            created.DTM_SS_Patro=DTM_SS_Patro
            created.total_islr=total_islr
            created.total_rp=total_rp
            created.Total_Gasto_Patron=Total_Gasto_Patron
            created.fecha_entrada=fecha_entrada
            created.fecha_salida=fecha_salida
            created.notifi_vacaciones=notifi_vacaciones
            created.total_pago_Sipe=total_pago_Sipe
            created.save()
        except:
             created= SIPE_Mensual.objects.create(empresa=empresa
            ,ced_jur=ced_jur
            ,year=year
            ,mes=mes
            ,fecha_sipe=fecha_sipe
            ,nombre=nombre
            ,apellido=apellido
            ,sexo=sexo
            ,tipo_docu=tipo_docu
            ,nro_identificacion=nro_identificacion
            ,seguro_social=seguro_social
        
            ,total_sueldo=total_sueldo
            ,total_vacaciones=total_vacaciones
            ,total_xxi=total_xxi
            ,total_sueldo_ajustado=total_sueldo_ajustado
        
            ,total_ss=total_ss
            ,SS_Patron=SS_Patron
            ,total_se=total_se
            ,SE_Patron=SE_Patron
            ,total_dtm=total_dtm
            ,DTM_SS_Patro=DTM_SS_Patro
            ,total_islr=total_islr
            ,total_rp=total_rp
            ,Total_Gasto_Patron=Total_Gasto_Patron
            ,fecha_entrada=fecha_entrada
            ,fecha_salida=fecha_salida
            ,notifi_vacaciones=notifi_vacaciones
            ,total_pago_Sipe=total_pago_Sipe
                 

             )


    return [round(total_sueldo_general,2), round(total_xiii_general,2),total_col , mes, year]
                        
          


def fun_fecha_retrocediendo_anos(fecha_actual, yearss):
    fecha_estudio = fecha_actual - relativedelta(years=yearss)
    return fecha_estudio


def calculo_planilla_dia_Ruta(num_hr_acumuladas_en_semana, id_col , hr_jornada_semanal, fecha_iterador, fecha_final_corte , lista_vacas_trabj_final, lista_descanso , lista_feriados , lista_incap_trabj_final , lista_lic_p_trabj_final,lista_incap_trabj_caja_paga_final):
    if True:
            num_hr_extras_acumuladas_en_semana_=0
            dias_trabj_fer_con_descanso=0

            min_dias_trabj_fer_con_descanso=0
            min_dias_traba_feriados=0

            dias_trabaja_descanso=0
            min_dias_trabaja_descanso=0

            min_dias_trabajados_normales=0
            dias_trabajados=0

            min_ausencia_ruta=0
            min_hr_ordinaria_ruta=0
            min_hr_extra_diurna_ruta =0

            dias_traba_feriados=0
            dia_ausencia=0
            
            lista_cliente_periodo=[]

            vacaciones=0

            dia_descanso=0
            dias_trabajados_compl=0
            incapacidad=0
            licenc_paga=0
            incapacidad_caja=0

            iter_inicio=True

            while iter_inicio:
                        
                        saber_dia=fecha_iterador.weekday()
                        if saber_dia==0:
                            num_hr_extras_acumuladas_en_semana_=0
                            num_hr_acumuladas_en_semana=0

                        lista_si_trabajo_ese_dia= Hoja_tiempo.objects.filter(Dia_entrada=fecha_iterador, Colaborador__pk=id_col)
                        if len(lista_si_trabajo_ese_dia)>0:
                            Min_totales_Trabajado_Dia=0
                            for intraday in lista_si_trabajo_ese_dia:
                                Min_totales_Trabajado_Dia+=intraday.Minutos_Trabajads
                                trabj_feriad=intraday.laboro_dia_feriado
                                trabj_descanso=intraday.Laboro_dia_domingo_descanso
                                lista_cliente_periodo.append([intraday.Empresa.pk,intraday.Minutos_Trabajads])


                            bool_trabajo=True
                        else:
                            bool_trabajo=False


                        if bool_trabajo:
                    

                            if trabj_feriad and trabj_descanso:
                                dias_trabj_fer_con_descanso+=1
                                min_dias_trabj_fer_con_descanso+=Min_totales_Trabajado_Dia


                            elif trabj_feriad:
                                dias_traba_feriados+=1
                                min_dias_traba_feriados+=Min_totales_Trabajado_Dia

                                

                            elif trabj_descanso:
                                
                                
                                    dias_trabaja_descanso+=1
                                    min_dias_trabaja_descanso+=Min_totales_Trabajado_Dia
                                
                                
                            else:  
                                dias_trabajados+=1

                                min_dias_trabajados_normales+=Min_totales_Trabajado_Dia

                                num_hr_acumuladas_en_semana+=Min_totales_Trabajado_Dia
                                
                                
                                
                        elif fecha_iterador in  lista_vacas_trabj_final:
                            vacaciones+=1
                        
                        elif saber_dia in lista_descanso  :
                            dia_descanso+=1
                        
                            
                        elif fecha_iterador in lista_feriados :
                        
                            dias_trabajados_compl+=1   
                        
                        elif fecha_iterador in  lista_incap_trabj_final:
                            incapacidad+=1
                        
                        elif fecha_iterador in lista_incap_trabj_caja_paga_final:
                            incapacidad_caja+=1

                        elif fecha_iterador in  lista_lic_p_trabj_final:
                            licenc_paga+=1

                        
                        
                        else:
                            
                            dia_ausencia+=0
                        


                        if saber_dia==6 and num_hr_acumuladas_en_semana  <  hr_jornada_semanal*60:

                            min_ausencia_ruta += hr_jornada_semanal*60 - num_hr_acumuladas_en_semana
                        
                        elif saber_dia==6 and num_hr_acumuladas_en_semana  >  hr_jornada_semanal*60:

                            if num_hr_acumuladas_en_semana > 48*60:
                                min_hr_extra_diurna_ruta+= num_hr_acumuladas_en_semana - 48*60
                                min_hr_ordinaria_ruta += num_hr_acumuladas_en_semana - hr_jornada_semanal*60 - min_hr_extra_diurna_ruta

                            else:

                                min_hr_ordinaria_ruta += num_hr_acumuladas_en_semana - hr_jornada_semanal*60 
                            
                        

                        if fecha_iterador==fecha_final_corte.date():
                            iter_inicio=False
                        
                        else:
                            fecha_iterador+=timedelta(days=1)

            lista=[dias_trabj_fer_con_descanso,

            min_dias_trabj_fer_con_descanso,
            min_dias_traba_feriados,

            dias_trabaja_descanso,
            min_dias_trabaja_descanso,

            min_dias_trabajados_normales,
            dias_trabajados,

            min_ausencia_ruta,
            min_hr_ordinaria_ruta,
            min_hr_extra_diurna_ruta ,

            dias_traba_feriados,
            dia_ausencia ,
            lista_cliente_periodo,
            vacaciones,
            
            incapacidad,
            licenc_paga,
            incapacidad_caja



            ]

            return lista
    
  

def fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Lunes,hora_entrada_Lunes,hora_salida_Lunes,almuerzo_aplica_Lunes,inicio_Almuerzo_Lunes,Dia_Siguiente_Lunes):

    hora = datetime.strptime(hora_entrada_Lunes, '%H:%M').time()


    # Combinar la fecha y la hora en un objeto datetime.datetime
    fecha_incial = datetime.combine(lista_dia_entrada, hora)
    

    if almuerzo_aplica_Lunes:
        hr_Lunes+=1
        hr=(int(hr_Lunes//1))
        minu=round((hr_Lunes%1)*60,0)
        minu=int(minu)
        delta_tiempo = timedelta(hours=hr, minutes=minu)

        # Sumar el timedelta al datetime
    else:

        hr=(int(hr_Lunes//1))
        minu=round((hr_Lunes%1)*60,0)
        minu=int(minu)
        delta_tiempo = timedelta(hours=hr, minutes=minu)

    if Dia_Siguiente_Lunes:
        un_dia = datetime.timedelta(days=1)

        # Sumar un día al datetime.date
        fecha_final = lista_dia_entrada + un_dia

    else:
        fecha_final=lista_dia_entrada

    fecha_salida_sumada_hr= fecha_incial + delta_tiempo

    hora_salida = datetime.strptime(hora_salida_Lunes, '%H:%M').time()

    # Combinar la fecha y la hora en un objeto datetime.datetime

    fecha_dadado_usuario = datetime.combine(fecha_final, hora_salida)
   
    if fecha_dadado_usuario==fecha_salida_sumada_hr:
        bool_regresar=True
    else:
        bool_regresar=False
    
    return bool_regresar

def str_diferencia_fechas(fecha_inicio,fecha_fin):
    diferencia = relativedelta(fecha_fin, fecha_inicio)

    # Extraer años, meses y días de la diferencia
    anios = diferencia.years
    meses = diferencia.months
    dias = diferencia.days

    string= str(anios)+' años '+str(meses)+' meses '+str(dias)+' dias'
    return string

def str_sacar_edad(fecha_inicio,fecha_fin):
    diferencia = relativedelta(fecha_fin, fecha_inicio)

    # Extraer años, meses y días de la diferencia
    anios = diferencia.years
    meses = diferencia.months
    dias = diferencia.days

    string= str(anios)+' años '
    return string

def fun_saber_datos_depende_dia_para_hoja_tiempo( planificacion_obj , saber_dia ): #lista con la ultima de planificacion, dia de la semana
    Cliente= Info_Clientes.objects.get(pk=planificacion_obj.Cliente.pk) 

    if saber_dia==0:#lunes
        hora_entrada_contrato= planificacion_obj.Entrada_Lunes
        hora_salida_contrato = planificacion_obj.Salida_Lunes
        jornada_diaria = planificacion_obj.Hr_Laboradas_Lunes
        Almuerzo=planificacion_obj.Almuerzo_bool_Lunes
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Lunes
        dia_descanso=planificacion_obj.Dia_Descanso_bool_Lunes
        if dia_descanso==True:
            dia_descanso=0
        else:
            dia_descanso=7

        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Lunes # 'Npcturna' ya sabes a donde va

    elif saber_dia==1:#Martes
        hora_entrada_contrato= planificacion_obj.Entrada_Martes
        hora_salida_contrato = planificacion_obj.Salida_Martes
        jornada_diaria = planificacion_obj.Hr_Laboradas_Martes
        Almuerzo=planificacion_obj.Almuerzo_bool_Martes
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Martes
        dia_descanso=planificacion_obj.Dia_Descanso_bool_Martes
        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Martes # 'Npcturna' ya sabes a donde va
        if dia_descanso==True:
            dia_descanso=1
        else:
            dia_descanso=7


    elif saber_dia==2:#Miercoles
        hora_entrada_contrato= planificacion_obj.Entrada_Miercoles
        hora_salida_contrato = planificacion_obj.Salida_Miercoles
        jornada_diaria = planificacion_obj.Hr_Laboradas_Miercoles
        Almuerzo=planificacion_obj.Almuerzo_bool_Miercoles
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Miercoles
        dia_descanso=planificacion_obj.Dia_Descanso_bool_Miercoles
        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Miercoles # 'Npcturna' ya sabes a donde va
        if dia_descanso==True:
            dia_descanso=2
        else:
            dia_descanso=7


    elif saber_dia==3:#Jueves
        hora_entrada_contrato= planificacion_obj.Entrada_Jueves
        hora_salida_contrato = planificacion_obj.Salida_Jueves
        jornada_diaria = planificacion_obj.Hr_Laboradas_Jueves
        Almuerzo=planificacion_obj.Almuerzo_bool_Jueves
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Jueves
        dia_descanso=planificacion_obj.Dia_Descanso_bool_Jueves
        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Jueves # 'Npcturna' ya sabes a donde va
        if dia_descanso==True:
            dia_descanso=3
        else:
            dia_descanso=7


    elif saber_dia==4:#Viernes
        hora_entrada_contrato= planificacion_obj.Entrada_Viernes
        hora_salida_contrato = planificacion_obj.Salida_Viernes
        jornada_diaria = planificacion_obj.Hr_Laboradas_Viernes
        Almuerzo=planificacion_obj.Almuerzo_bool_Viernes
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Viernes
        dia_descanso=planificacion_obj.Dia_Descanso_bool_Viernes
        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Viernes # 'Npcturna' ya sabes a donde va
        if dia_descanso==True:
            dia_descanso=4
        else:
            dia_descanso=7


    elif saber_dia==5:#Sabado
        hora_entrada_contrato= planificacion_obj.Entrada_Sabado
        hora_salida_contrato = planificacion_obj.Salida_Sabado
        jornada_diaria = planificacion_obj.Hr_Laboradas_Sabado
        Almuerzo=planificacion_obj.Almuerzo_bool_Sabado
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Sabado
        dia_descanso=planificacion_obj.Dia_Descanso_bool_Sabado
        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Sabado # 'Npcturna' ya sabes a donde va
        if dia_descanso==True:
            dia_descanso=5
        else:
            dia_descanso=7


    elif saber_dia==6:#Doming
        hora_entrada_contrato= planificacion_obj.Entrada_Domingo
        hora_salida_contrato = planificacion_obj.Salida_Domingo
        jornada_diaria = planificacion_obj.Hr_Laboradas_Domingo
        Almuerzo=planificacion_obj.Almuerzo_bool_Domingo
        hora_de_inicio_almuerzo=planificacion_obj.Inicio_Hora_Almuerzo_Domingo
        dia_descanso=True
        tipo_de_jornada=planificacion_obj.Jornada_Nocturna_bool_Domingo # 'Npcturna' ya sabes a donde va
        if dia_descanso==True:
            dia_descanso=6
        else:
            dia_descanso=7

    if tipo_de_jornada==True:
        tipo_de_jornada='Nocturna'
    else:
        tipo_de_jornada='Diurna'

    lista_return= [Cliente,hora_entrada_contrato,hora_salida_contrato,jornada_diaria, Almuerzo,hora_de_inicio_almuerzo, dia_descanso, tipo_de_jornada]

    return lista_return

def fun_convertir_string_date_a_fecha(fecha_string):
    lista_string=fecha_string.split('-')
    fecha=datetime(int(lista_string[0]) ,  int(lista_string[1]),  int(lista_string[2]))

    return fecha.date()

def fun_convertir_string_date_a_fecha_liquidaciones(fecha_string):
    lista_string=fecha_string.split('-')
    fecha=datetime(int(lista_string[2]) ,  int(lista_string[1]),  int(lista_string[0]))

    return fecha.date()

def fun_fecha_bonita(fecha):
       
        
        dia=str(fecha.day)+'-'
        year=str(fecha.year)
        mes=fecha.month
        if len(dia)==2:
            dia='0'+dia
        if mes==1:
            name_mes='Ene-'
        elif mes==2:
            name_mes='Feb-'
        elif mes==3:
            name_mes='Mar-'
        elif mes==4:
            name_mes='Abr-'
        elif mes==5:
            name_mes='May-'
        
        elif mes==6:
            name_mes='Jun-'
        
        elif mes==7:
            name_mes='Jul-'
        
        elif mes==8:
            name_mes='Ago-'
        
        elif mes==9:
            name_mes='Sep-'
        
        elif mes==10:
            name_mes='Oct-'
        
        elif mes==11:
            name_mes='Nov-'

        elif mes==12:
            name_mes='Dic-'

        string=dia+name_mes+year

        return string

def fun_fecha_bonita_contrato(fecha):
       
        
        dia=str(fecha.day)
        year=str(fecha.year)
        mes=fecha.month
        if len(dia)==1:
            dia='0'+dia
        if mes==1:
            name_mes=' de Enero '
        elif mes==2:
            name_mes=' de Febrero '
        elif mes==3:
            name_mes=' de Marzo '
        elif mes==4:
            name_mes=' de Abril '
        elif mes==5:
            name_mes=' de Mayo '
        
        elif mes==6:
            name_mes=' de Junio '
        
        elif mes==7:
            name_mes=' de Julio '
        
        elif mes==8:
            name_mes=' de Agosto '
        
        elif mes==9:
            name_mes='de Septiembre '
        
        elif mes==10:
            name_mes=' de Octubre '
        
        elif mes==11:
            name_mes=' de Noviembre '

        elif mes==12:
            name_mes=  ' de Diciembre '

        string=dia+name_mes+year

        return string
          

def fun_lista_datos_grafica_3(ultimo_col,u_Quincena, dia_actual,):
    lista_Col_Activos=Colaboradores.objects.filter(Status='Activo')
    lista_Dpto=[]
    if len(lista_Col_Activos)==0:
        Col_Activos=0
        Dpto_Activos=0
    else:
        Col_Activos=len(lista_Col_Activos)
        for col_obj in lista_Col_Activos:
            dptto=col_obj.Departamento
            if dptto not in lista_Dpto:
                lista_Dpto.append(dptto)
        Dpto_Activos=len(lista_Dpto)

    lista_Clientes=Info_Clientes.objects.filter(status='Activo')
    if len(lista_Clientes)==0:
        cliente_Activos=0
    else:
        cliente_Activos=len(lista_Clientes)
    
    #cuanto dias para proximo corte
    dia=dia_actual.day
    month=dia_actual.month
    year=dia_actual.year

    if dia <=10:
        dia_corte=10
        
    elif dia >=26:
        dia_corte=10
        if month==12:
            month=1
            year=year+1
        else:
            month+=1
    else:
        dia_corte=25

    fechar_corte=datetime(year, month, dia_corte)
   
    diferencia=fechar_corte.date()- dia_actual.date()
    dias_para_corte=diferencia.days

    lista_return=[Col_Activos,cliente_Activos,Dpto_Activos,u_Quincena,ultimo_col,dias_para_corte]

    return lista_return

def fun_lista_ultimo_meses_personalizados(dia_actual, meses):
    dia=dia_actual.day
    mes=dia_actual.month
    year=dia_actual.year

    if dia<16:
        fecha_estudio = dia_actual.date() - relativedelta(months=1)
    else:
        fecha_estudio= dia_actual.date()
    
    lista_fechas=[]
    lista_head_fechas=[]
    for i in range(meses):
        

        fecha_empezar = fecha_estudio - relativedelta(months=i)
       
        year=fecha_empezar.year
        mes=fecha_empezar.month
        if mes==1:
            name_mes='Ene-'
        elif mes==2:
            name_mes='Feb-'
        elif mes==3:
            name_mes='Mar-'
        elif mes==4:
            name_mes='Abr-'
        elif mes==5:
            name_mes='May-'
        
        elif mes==6:
            name_mes='Jun-'
        
        elif mes==7:
            name_mes='Jul-'
        
        elif mes==8:
            name_mes='Ago-'
        
        elif mes==9:
            name_mes='Sep-'
        
        elif mes==10:
            name_mes='Oct-'
        
        elif mes==11:
            name_mes='Nov-'

        elif mes==12:
            name_mes='Dic-'

        lista_head_fechas.append(name_mes+str(year))
        dia_inicial=1
        ultimo_dia = calendar.monthrange(year, mes)[1]

        fecha_inicial=datetime(year, mes,dia_inicial )
        fecha_final=datetime(year , mes, ultimo_dia)

        fecha_inicial=fecha_inicial.date()
        fecha_final=fecha_final.date()

        lista_fechas.append([fecha_inicial,fecha_final])
    
    lista_fechas=lista_fechas[::-1]
    lista_head_fechas=lista_head_fechas[::-1]

    return [lista_fechas,lista_head_fechas]
        
def fun_lista_mes_sueldo(lista_fechas_estudio,var_modelo):
    lista=[]
   
    lista_Colab=[]
    for planilla in lista_fechas_estudio :
        inicio_fecha=planilla[0]
        fin_fecha=planilla[1]
        lista_planilla_global=Panilla_por_periodo_quincenal.objects.filter( Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )
        if len(lista_planilla_global) !=0:  
            suma_total_salario_bruto=0
            total_salario=0
            lista_Colab.append(len(lista_planilla_global))
            suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter( Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
            # Acceder al valor de la suma total 
            total_salario = suma_total_salario_bruto['total_salario_bruto']
            lista.append(round(total_salario,2))
            
           
        
        else:
            lista.append(0)
            

    return lista


def fun_lista_mes_sueldo_clientes(lista_fechas_estudio,var_modelo , meses):
    

    # primero todos los clientes names
    lista_planilla_global=Panilla_por_periodo_quincenal_clientes.objects.all()
    lista_cliente=[]

    for cliente_obj in lista_planilla_global:
        id_cliente=cliente_obj.Cliente.pk
        if id_cliente not in lista_cliente:
                lista_cliente.append(id_cliente)
    num_chart=1
    datasets =[]
    lista_chart=[]
    lista_sueldo=[]

    #crear el Global 
    for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal_clientes.objects.filter(  Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )
            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal_clientes.objects.filter( Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)

    max_value  = max(lista_sueldo)

    if max_value>1000:
        max_value=max_value/1000
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*1000
    
    elif max_value>100:
        max_value=max_value/100
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*100
    
    else:
        max_value=max_value/10
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*10


    nombre_cliente='Todas las Cuentas'
    datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
    
    datasets.append(datos_bar_2)
    lista_chart.append([num_chart,nombre_cliente])

    for id_cliente in lista_cliente:
        num_chart+=1
        lista_sueldo=[]
        
        for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal_clientes.objects.filter( Cliente__pk=id_cliente ,Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )

            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal_clientes.objects.filter( Cliente__pk=id_cliente, Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)
            
        obj_nombre_cliente=Info_Clientes.objects.get(pk=id_cliente)
        nombre_cliente=obj_nombre_cliente.nombre_empresa
        datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
        datasets.append(datos_bar_2)
        lista_chart.append([num_chart,nombre_cliente])
        

    regresar=[datasets,lista_chart,max_value]
    
    return regresar

def fun_lista_mes_sueldo_clientes_especifico(lista_fechas_estudio,var_modelo , meses , clientesss):
    

    # primero todos los clientes names
    lista_planilla_global=Panilla_por_periodo_quincenal_clientes.objects.filter(Cliente__pk=int(clientesss))
    lista_cliente=[]

    for cliente_obj in lista_planilla_global:
        id_cliente=cliente_obj.Cliente.pk
        if id_cliente not in lista_cliente:
                lista_cliente.append(id_cliente)
    num_chart=1
    datasets =[]
    lista_chart=[]
    lista_sueldo=[]

    #crear el Global 
    for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal_clientes.objects.filter(  Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )
            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal_clientes.objects.filter( Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)

    max_value  = max(lista_sueldo)

    if max_value>1000:
        max_value=max_value/1000
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*1000
    
    elif max_value>100:
        max_value=max_value/100
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*100
    
    else:
        max_value=max_value/10
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*10

    nombre_cliente='Todas las Cuentas'
    datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
    
    datasets.append(datos_bar_2)
    lista_chart.append([num_chart,nombre_cliente])

    for id_cliente in lista_cliente:
        num_chart+=1
        lista_sueldo=[]
        
        for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal_clientes.objects.filter( Cliente__pk=id_cliente ,Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )

            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal_clientes.objects.filter( Cliente__pk=id_cliente, Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)
            
        obj_nombre_cliente=Info_Clientes.objects.get(pk=id_cliente)
        nombre_cliente=obj_nombre_cliente.nombre_empresa
        datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
        datasets.append(datos_bar_2)
        lista_chart.append([num_chart,nombre_cliente])
        

    regresar=[datasets,lista_chart,max_value]
    
    return regresar

def fun_lista_mes_sueldo_colaboradores(lista_fechas_estudio,var_modelo , meses):
    

    # primero todos los clientes names
    lista_planilla_global=Panilla_por_periodo_quincenal.objects.all()
    lista_cliente=[]

    for cliente_obj in lista_planilla_global:
        id_cliente=cliente_obj.Colaborador.pk
        if id_cliente not in lista_cliente:
                lista_cliente.append(id_cliente)
    num_chart=1
    datasets =[]
    lista_chart=[]
    lista_sueldo=[]

    #crear el Global 
    for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal.objects.filter(  Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )
            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter( Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)

    max_value  = max(lista_sueldo)

    if max_value>1000:
        max_value=max_value/1000
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*1000
    
    elif max_value>100:
        max_value=max_value/100
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*100
    
    else:
        max_value=max_value/10
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*10

    nombre_cliente='Todas las Cuentas'
    datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
    
    datasets.append(datos_bar_2)
    lista_chart.append([num_chart,nombre_cliente])

    for id_cliente in lista_cliente:
        num_chart+=1
        lista_sueldo=[]
        
        for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal.objects.filter( Colaborador__pk=id_cliente ,Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )

            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter( Colaborador__pk=id_cliente, Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)
            
        obj_nombre_cliente=Colaboradores.objects.get(pk=id_cliente)
        nombre_cliente=obj_nombre_cliente.Colaborador_nombre+' '+obj_nombre_cliente.Colaborador_apellido
        datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
        datasets.append(datos_bar_2)
        lista_chart.append([num_chart,nombre_cliente])
        

    regresar=[datasets,lista_chart,max_value]
    
    return regresar

def fun_lista_mes_sueldo_colaboradores_especifico(lista_fechas_estudio,var_modelo , meses , clientesss):
    

    # primero todos los clientes names
    lista_planilla_global=Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=int(clientesss))
    lista_cliente=[]

    for cliente_obj in lista_planilla_global:
        id_cliente=cliente_obj.Colaborador.pk
        if id_cliente not in lista_cliente:
                lista_cliente.append(id_cliente)
    num_chart=1
    datasets =[]
    lista_chart=[]
    lista_sueldo=[]

    #crear el Global 
    for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal.objects.filter(  Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )
            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter( Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)

    max_value  = max(lista_sueldo)

    if max_value>1000:
        max_value=max_value/1000
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*1000
    
    elif max_value>100:
        max_value=max_value/100
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*100
    
    else:
        max_value=max_value/10
        numero_redondeado = math.ceil(max_value)
        max_value=numero_redondeado*10

    nombre_cliente='Todas las Cuentas'
    datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
    
    datasets.append(datos_bar_2)
    lista_chart.append([num_chart,nombre_cliente])

    for id_cliente in lista_cliente:
        num_chart+=1
        lista_sueldo=[]
        
        for planilla in lista_fechas_estudio :
            inicio_fecha=planilla[0]
            fin_fecha=planilla[1]
            lista_planilla_cliente=Panilla_por_periodo_quincenal.objects.filter( Colaborador__pk=id_cliente ,Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha )

            if len(lista_planilla_cliente) !=0:
                suma_total_salario_bruto=0
                total_salario=0
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter( Colaborador__pk=id_cliente, Fecha_pago_quincena__gte = inicio_fecha , Fecha_pago_quincena__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
                # Acceder al valor de la suma total 
                total_salario = suma_total_salario_bruto['total_salario_bruto']
                lista_sueldo.append(round(total_salario,2))
                
            else:
                lista_sueldo.append(0)
            
        obj_nombre_cliente=Colaboradores.objects.get(pk=id_cliente)
        nombre_cliente=obj_nombre_cliente.Colaborador_nombre+' '+obj_nombre_cliente.Colaborador_apellido
        datos_bar_2 = {
                    'label': 'Comparativa '+nombre_cliente+' Ultimos '+meses   ,
                    
                    'data': lista_sueldo
                         }
        datasets.append(datos_bar_2)
        lista_chart.append([num_chart,nombre_cliente])
        

    regresar=[datasets,lista_chart,max_value]
    
    return regresar



def fun_lista_mes_liquidaciones(lista_fechas_estudio,var_modelo):
    lista=[]
   
    lista_Colab=[]
    for planilla in lista_fechas_estudio :
        inicio_fecha=planilla[0]
        fin_fecha=planilla[1]
        lista_planilla_global=Liquidaciones.objects.filter( Fecha_pago_liquidacion__gte = inicio_fecha , Fecha_pago_liquidacion__lte = fin_fecha )
        if len(lista_planilla_global) !=0:  
            suma_total_salario_bruto=0
            total_salario=0
            lista_Colab.append(len(lista_planilla_global))
            suma_total_salario_bruto = Liquidaciones.objects.filter( Fecha_pago_liquidacion__gte = inicio_fecha , Fecha_pago_liquidacion__lte = fin_fecha ).aggregate(total_salario_bruto=Sum(var_modelo))
            # Acceder al valor de la suma total 
            total_salario = suma_total_salario_bruto['total_salario_bruto']
            lista.append(round(total_salario,2))
            
           
        
        else:
            lista.append(0)
            

    return lista


def fun_subir_quater(QQ1):
    lista_Q= QQ1.split('-')
    Q1=lista_Q[0]
    M1=lista_Q[1]
    Y1=lista_Q[2]

    if Q1=='Q1':
        Q1='Q2'
        QQQ=Q1+'-'+M1+'-'+Y1   
    else:
        Q1='Q1'
        mes=int(M1)
        year=int(Y1)
        
        if mes==12:
            M1='1'
            year+=1
            Y1=str(year)
        else:
            mes+=1
            M1=str(mes)
            Y1=str(year)
        
        QQQ=Q1+'-'+M1+'-'+Y1  
    
    return QQQ

def fun_lista_quaters(Q1,M1,Y1,Q2,M2,Y2):
    lista=[]
    if Q1==Q2 and M1==M2 and Y1==Y2:
        Q=Q1+'-'+M1+'-'+Y1
        lista.append(Q)
    else:
        QQ1=Q1+'-'+M1+'-'+Y1
        QQ2=Q2+'-'+M2+'-'+Y2
        
        while True:

            lista.append(QQ1)
            if QQ1==QQ2:
                break
            else:
                QQ1=fun_subir_quater(QQ1)
    
    return lista    

def lista_ultimos_Q(planilla,Nro):
    lista=[]
    lista_planilla=planilla.split('-')
    Q=lista_planilla[0]
    M=int(lista_planilla[1])
    Y=int(lista_planilla[2])
    Nro-=1
    lista.append(planilla)
    for i in range(Nro):
        
        if Q=='Q2':
            Q='Q1'
            M=M
            Y=Y
        else:
            Q='Q2'
            if M==1:
                M=12
                Y=Y-1
            else:
                M=M-1
                Y=Y
        
        planilla=Q+'-'+str(M)+'-'+str(Y)
        
        lista.append(planilla)
    lista = lista[::-1]
    
    return lista

def lista_los_ultimos_quater(planilla,Nro):
    lista=[]
    lista_planilla=planilla.split('-')
    Q=lista_planilla[0]
    M=int(lista_planilla[1])
    Y=int(lista_planilla[2])
    
    
    for i in range(Nro):
        
        if Q=='Q2':
            Q='Q1'
            M=M
            Y=Y
        else:
            Q='Q2'
            if M==1:
                M=12
                Y=Y-1
            else:
                M=M-1
                Y=Y
        
        planilla=Q+'-'+str(M)+'-'+str(Y)
        
        lista.append(planilla)
    lista = lista[::-1]
    
    return lista

def fun_maximos_porcentaje(ultima, penultima):
    if ultima==penultima:
        icono='igual'
        porcentaje= '0%'
    elif ultima > penultima:
        icono='mas'
        if penultima>0:
            porcentaje=100*ultima/penultima
        else: 
           porcentaje=100 
        porcentaje=porcentaje-100
        porcentaje='+ '+str(round(porcentaje,2))+'%'
    else:
        icono='menos'
        if penultima>0:
            porcentaje=100*ultima/penultima
        else: 
           porcentaje=100 
        porcentaje=porcentaje-100
        porcentaje='- '+str(round(porcentaje,2))+'%'
    
    return [icono,porcentaje,round(ultima,2)]

def fun_maximos_porcentaje_sueldos(ultima, penultima):
    if ultima==penultima:
        icono='igual'
        porcentaje= '0%'
    elif ultima > penultima:
        icono='mas'
        if penultima>0:
            porcentaje=100*ultima/penultima
        else: 
           porcentaje=100 
        porcentaje=porcentaje-100
        porcentaje='+ '+str(round(porcentaje,2))+'%'
    else:
        icono='menos'
        if penultima>0:
            porcentaje=100*ultima/penultima
        else: 
           porcentaje=100 
        porcentaje=porcentaje-100
        porcentaje='- '+str(round(porcentaje,2))+'%'
    
    return [icono,porcentaje,round(ultima/1000,2)]



def lista_sueldo_netos_y_lista_colaborador( lista_Q)    :
    lista_totales=[]
    lista_Colab=[]
    for planilla in lista_Q :
        lista_planilla_global=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla)
        if len(lista_planilla_global) !=0:  
            lista_Colab.append(len(lista_planilla_global))
            suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Total_general_sueldo'))
            # Acceder al valor de la suma total 
            total_salario = suma_total_salario_bruto['total_salario_bruto']
            lista_totales.append(round(total_salario,2))
           
        
        else:
            lista_totales.append(0)
            lista_Colab.append(0)

    return [lista_Colab,lista_totales]


def diferencia_fechas(fecha_inicio, fecha_fin):
    # Calcular la diferencia entre las fechas
    diferencia = relativedelta(fecha_fin, fecha_inicio)

    # Extraer años, meses y días de la diferencia
    anios = diferencia.years
    meses = diferencia.months
    dias = diferencia.days

    return anios, meses, dias

def fun_promedio_todo_su_pago(id_col, mes_actual , Year_actual, Fecha_ingreso):
    #saber la ultima mesualidad y priimera fecha pago
    
    #ultimo_dia = calendar.monthrange(Year_actual, mes_actual)[1]
    
    mes_ingreso=Fecha_ingreso.month
    year_ingreso=Fecha_ingreso.year
    fecha_ingreso=datetime(year_ingreso, mes_ingreso, 1)
    fecha_ingreso=fecha_ingreso.date()
    
    lista_sipe_import=[]
    lista_de_sueldo=[]
    sueldo_5_years=0
    total_decimo=0
    month_sum=0
    meses=1

    col_obj=Colaboradores.objects.get(pk=id_col)
  
    while True:
        
        
        meses+=1
        estudio_fecha_inicial=fecha_ingreso + relativedelta(months=month_sum)
        ultimo_dia = calendar.monthrange(estudio_fecha_inicial.year, estudio_fecha_inicial.month)[1]
        fecha_corte_pago =  datetime(estudio_fecha_inicial.year, estudio_fecha_inicial.month, ultimo_dia)
        lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col , Fecha_pago_quincena__gte=estudio_fecha_inicial, Fecha_pago_quincena__lte=fecha_corte_pago.date())
        
        sueldo_base=0
        xiii=0
        for quincenas in lista_planilla1:
            sueldo_bruto=quincenas.Pago_quincena_despues_descuento + quincenas.Pago_Vacaciones
            sueldo_base+=sueldo_bruto

            xiii+=quincenas.Pago_XIII_periodo_Bruto

        lista_de_sueldo.append([estudio_fecha_inicial.year,str(estudio_fecha_inicial.year)+'-'+str( estudio_fecha_inicial.month),sueldo_base,xiii])
        sueldo_5_years+=sueldo_base
        total_decimo+=xiii
        month_sum+=1

        if mes_actual==estudio_fecha_inicial.month and Year_actual == estudio_fecha_inicial.year:
            break

    lista_import= SIPE_Mensual.objects.filter(nro_identificacion=col_obj.Nro_Identificacion)
    if len(lista_import)>0:
        for mens in lista_import:
            meses+=1
            sueldo=mens.total_sueldo
            vacaciones=mens.total_vacaciones
            xiii=mens.total_xxi
            mes=mens.mes
            year=mens.year
            sueldo_5_years+=sueldo+vacaciones
            lista_sipe_import.append([year,mes,sueldo,vacaciones,xiii])


    
    promedio_sueldo_5_years= sueldo_5_years / meses

    lista_return=[sueldo_5_years,total_decimo,promedio_sueldo_5_years, lista_de_sueldo, lista_sipe_import]
    return  lista_return
        #ya tenemos cortes de ese mes


def fun_promedio_5_years(id_col, mes_actual , Year_actual):

    obj_col=Colaboradores.objects.get(pk=id_col)
    fecha_ingreso=obj_col.Fecha_Ingreso
    dia_1_ingreso=datetime(fecha_ingreso.year, fecha_ingreso.month, 1)

    #saber la ultima mesualidad y priimera fecha pago
    
    #ultimo_dia = calendar.monthrange(Year_actual, mes_actual)[1]
    
    primer_dia =  datetime(Year_actual, mes_actual, 1)
    fecha_final=primer_dia.date()
    fecha_inicial = fecha_final - relativedelta(years=5)
    sueldo_5_years=0
    lista_de_sueldo=[]
    for month_sum in range(61):
        estudio_fecha_inicial=fecha_inicial + relativedelta(months=month_sum)
        ultimo_dia = calendar.monthrange(estudio_fecha_inicial.year, estudio_fecha_inicial.month)[1]
        fecha_corte_pago =  datetime(estudio_fecha_inicial.year, estudio_fecha_inicial.month, ultimo_dia)
        sueldo_base=0
        lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col , Fecha_pago_quincena__gte=estudio_fecha_inicial, Fecha_pago_quincena__lte=fecha_corte_pago.date())
        if len(lista_planilla1)>0:
        
            for quincenas in lista_planilla1:
                sueldo_bruto=quincenas.Pago_quincena_despues_descuento + quincenas.Pago_Vacaciones
                sueldo_base+=sueldo_bruto

            lista_de_sueldo.append([estudio_fecha_inicial.year,str(estudio_fecha_inicial.year)+'-'+str( estudio_fecha_inicial.month),sueldo_base])
            sueldo_5_years+=sueldo_base
        else:
            
            lista_SIPE_Importaciones= SIPE_Mensual.objects.filter(nro_identificacion= obj_col.Nro_Identificacion, fecha_sipe__gte=estudio_fecha_inicial, fecha_sipe__lte=fecha_corte_pago.date())
            if len(lista_SIPE_Importaciones)>0:
                
                for mens in lista_SIPE_Importaciones:
                      sueldo_bruto=mens.total_sueldo + mens.total_vacaciones
                      sueldo_base+=sueldo_bruto

                lista_de_sueldo.append([estudio_fecha_inicial.year,str(estudio_fecha_inicial.year)+'-'+str( estudio_fecha_inicial.month),sueldo_base])
                sueldo_5_years+=sueldo_base
         
    
    sueldo_5_years/=60

    lista_return=[sueldo_5_years,lista_de_sueldo]
    return  lista_return
        #ya tenemos cortes de ese mes


def fun_promedio_6_meses(id_col, mes_actual , Year_actual):
    #saber la ultima mesualidad y priimera fecha pago
    
    #ultimo_dia = calendar.monthrange(Year_actual, mes_actual)[1]
    obj_col=Colaboradores.objects.get(pk=id_col)
    fecha_ingreso=obj_col.Fecha_Ingreso
    dia_1_ingreso=datetime(fecha_ingreso.year, fecha_ingreso.month, 1)

    primer_dia =  datetime(Year_actual, mes_actual, 1)
    fecha_final=primer_dia.date()
    fecha_inicial = fecha_final - relativedelta(months=5)
    sueldo_5_years=0
    meses=0
    lista_de_sueldo=[]
    for month_sum in range(6):
        estudio_fecha_inicial=fecha_inicial + relativedelta(months=month_sum)
        ultimo_dia = calendar.monthrange(estudio_fecha_inicial.year, estudio_fecha_inicial.month)[1]
        fecha_corte_pago =  datetime(estudio_fecha_inicial.year, estudio_fecha_inicial.month, ultimo_dia)
        lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col , Fecha_pago_quincena__gte=estudio_fecha_inicial, Fecha_pago_quincena__lte=fecha_corte_pago.date())
        
        sueldo_base=0
        
        if len(lista_planilla1)>0:
            meses+=1
            for quincenas in lista_planilla1:
                sueldo_bruto=quincenas.Pago_quincena_despues_descuento + quincenas.Pago_Vacaciones
                sueldo_base+=sueldo_bruto
                

            
            lista_de_sueldo.append([estudio_fecha_inicial.year,str(estudio_fecha_inicial.year)+'-'+str( estudio_fecha_inicial.month),sueldo_base])
            sueldo_5_years+=sueldo_base

        else:
            lista_SIPE_Importaciones= SIPE_Mensual.objects.filter(nro_identificacion= obj_col.Nro_Identificacion, fecha_sipe__gte=dia_1_ingreso.date(), fecha_sipe__lte=fecha_corte_pago.date())
            if len(lista_SIPE_Importaciones)>0:
                meses+=1
                for mens in lista_SIPE_Importaciones:
                      sueldo_bruto=mens.total_sueldo + mens.total_vacaciones
                      sueldo_base+=sueldo_bruto

                lista_de_sueldo.append([dia_1_ingreso.year,str(dia_1_ingreso.year)+'-'+str( dia_1_ingreso.month),sueldo_base])
                sueldo_5_years+=sueldo_base

                

    
    sueldo_5_years/=meses

    lista_return=[sueldo_5_years,lista_de_sueldo]
    return  lista_return
        #ya tenemos cortes de ese mes



   
    
    
  
    if len(lista_planilla1)==120:
        sueldo_base/=120
    else:
        sueldo_base/=len(lista_planilla1)
        
    return sueldo_base

def fun_sueldo_de_por_vida(id_col, fecha_final_pago):
    #saber la ultima mesualidad y priimera fecha pago
    
    #ultimo_dia = calendar.monthrange(Year_actual, mes_actual)[1]
    
    ultimo_dia = calendar.monthrange(fecha_final_pago.year, fecha_final_pago.month)[1]
    fecha_pago =  datetime(fecha_final_pago.year, fecha_final_pago.month, ultimo_dia)
    lista_sueldos=Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col, Fecha_pago_quincena__lte=fecha_pago.date())
    sueldo_bruto=0
    sueldo_vacas=0
    for planilla in lista_sueldos:
        sueldo_bruto+=planilla.Pago_quincena_despues_descuento
        sueldo_vacas+=planilla.Pago_Vacaciones
    
    total=sueldo_bruto+sueldo_vacas

    if True: #sueldo por importancion
                col_obj=Colaboradores.objects.get(pk=id_col)
                lista_sipe_import=SIPE_Mensual.objects.filter(nro_identificacion=col_obj.Nro_Identificacion)
                if len(lista_sipe_import)>0:
                    for mens in lista_sipe_import:
                         total += mens.total_sueldo  +  mens.total_vacaciones

    return  total
      


def quitar_acentos(texto):
    """
    Convierte caracteres latinos con tilde o 'ñ' en caracteres normales del alfabeto estadounidense.
    
    Parámetros:
        texto (str): El texto que se desea modificar.
    
    Retorna:
        str: El texto modificado sin caracteres con tilde o 'ñ'.
    """
    return ''.join((c for c in unicodedata.normalize('NFD', texto) if unicodedata.category(c) != 'Mn'))

def fun_planilla_completa_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=14
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = A
            ws.column_dimensions['N'].width = A
            ws.column_dimensions['O'].width = 28
            ws.column_dimensions['P'].width = 15
            ws.column_dimensions['Q'].width = 13
            ws.column_dimensions['R'].width = 13
            ws.column_dimensions['S'].width = 13
            ws.column_dimensions['T'].width = 13
            ws.column_dimensions['U'].width = 25
            ws.column_dimensions['V'].width = A
            ws.column_dimensions['W'].width = A
            ws.column_dimensions['X'].width = 13
            ws.column_dimensions['Y'].width = 17
            ws.column_dimensions['Z'].width = 25
            ws.column_dimensions['AA'].width = 14
            ws.column_dimensions['AB'].width = A
            ws.column_dimensions['AC'].width =A
            ws.column_dimensions['AD'].width = A
            ws.column_dimensions['AE'].width = 13
            ws.column_dimensions['AF'].width = 19
            ws.column_dimensions['AG'].width = 21
            ws.column_dimensions['AH'].width = 13
            ws.column_dimensions['AI'].width = 13
            ws.column_dimensions['AJ'].width = 23
            ws.column_dimensions['AK'].width = 9
            ws.column_dimensions['AL'].width = 13
            ws.column_dimensions['AM'].width = A
            ws.column_dimensions['AN'].width = 13
            ws.column_dimensions['AO'].width = A
            ws.column_dimensions['AP'].width = A
            ws.column_dimensions['AQ'].width = A
            ws.column_dimensions['AR'].width = 13
            ws.column_dimensions['AS'].width = 13
            ws.column_dimensions['AT'].width = A
            ws.column_dimensions['AV'].width = A
            ws.column_dimensions['AW'].width = A
            ws.column_dimensions['AX'].width = 20
            ws.column_dimensions['AY'].width = 20

            LISTA_COLUMNA=['D','Q','Y','Z','AF','AJ','AY']
            LISTA_MENUS=['U','AX',]
            LISTA_RESTANTES= ['A', 'B', 'C', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',  'R', 'S', 'T',  'V', 'W', 'X',  
         'AA', 'AB', 'AC', 'AD', 'AE',  'AG', 'AH', 'AI' , 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW' ]

            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_MENUS:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_liquidacion_completa_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=17
    B=20
    C=25
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = 27
            ws.column_dimensions['I'].width = B
            ws.column_dimensions['J'].width = B
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = A
            ws.column_dimensions['N'].width = A
            ws.column_dimensions['O'].width = A
            ws.column_dimensions['P'].width = A
            ws.column_dimensions['Q'].width = A
            ws.column_dimensions['R'].width = A
            ws.column_dimensions['S'].width = A
            ws.column_dimensions['T'].width = A
            ws.column_dimensions['U'].width = A
            ws.column_dimensions['V'].width = A
            ws.column_dimensions['W'].width = A
            ws.column_dimensions['X'].width = A
            ws.column_dimensions['Y'].width = A
            ws.column_dimensions['Z'].width = A
            ws.column_dimensions['AA'].width = A
            ws.column_dimensions['AB'].width = A
            ws.column_dimensions['AC'].width = C
            ws.column_dimensions['AD'].width = C
            ws.column_dimensions['AE'].width = A
            ws.column_dimensions['AF'].width = A
            ws.column_dimensions['AG'].width = A
            ws.column_dimensions['AH'].width = C
            ws.column_dimensions['AI'].width = C
            

            LISTA_COLUMNA=['K','W','AD','AI']
            LISTA_MENUS=['AC','AH',]
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',  'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',  'X',
'Y', 'Z', 'AA',  'AB',  'AE', 'AF', 'AG',   ]

            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_MENUS:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_planilla_completa_cosmetic_colaborador(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=14
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = A
            ws.column_dimensions['N'].width = A
            ws.column_dimensions['O'].width = 28
            ws.column_dimensions['P'].width = 15
            ws.column_dimensions['Q'].width = 13
            ws.column_dimensions['R'].width = 13
            ws.column_dimensions['S'].width = 13
            ws.column_dimensions['T'].width = 13
            ws.column_dimensions['U'].width = 25
            ws.column_dimensions['V'].width = A
            ws.column_dimensions['W'].width = A
            ws.column_dimensions['X'].width = 13
            ws.column_dimensions['Y'].width = 17
            ws.column_dimensions['Z'].width = 25
            ws.column_dimensions['AA'].width = 14
            ws.column_dimensions['AB'].width = A
            ws.column_dimensions['AC'].width =A
            ws.column_dimensions['AD'].width = A
            ws.column_dimensions['AE'].width = 13
            ws.column_dimensions['AF'].width = 19
            ws.column_dimensions['AG'].width = 21
            ws.column_dimensions['AH'].width = 13
            ws.column_dimensions['AI'].width = 13
            ws.column_dimensions['AJ'].width = 23
            ws.column_dimensions['AK'].width = 9
            ws.column_dimensions['AL'].width = 13
            ws.column_dimensions['AM'].width = A
            ws.column_dimensions['AN'].width = 13
            ws.column_dimensions['AO'].width = A
            ws.column_dimensions['AP'].width = A
            ws.column_dimensions['AQ'].width = A
            ws.column_dimensions['AR'].width = 13
            ws.column_dimensions['AS'].width = 13
            ws.column_dimensions['AT'].width = A
            ws.column_dimensions['AV'].width = A
            ws.column_dimensions['AW'].width = A
            ws.column_dimensions['AX'].width = 20
            ws.column_dimensions['AY'].width = 20

            LISTA_COLUMNA=['D','Q','Y',]
            LISTA_MENUS=['U','K','L']
            LISTA_RESTANTES= ['A', 'B', 'C', 'E', 'F', 'G', 'H', 'I', 'J', 'M', 'N', 'O', 'P',  'R', 'S', 'T',  'V', 'W', 'X'  ]

            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_MENUS:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_planilla_completa_cosmetic_vacaciones(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = A
            ws.column_dimensions['N'].width = A
            

            LISTA_COLUMNA=['F','K','N']
            LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E',  'G', 'H', 'I',  'L', 'M' ]

            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_MENUS:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_planilla_completa_cosmetic_XIII(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            
            

            LISTA_COLUMNA=['D','G', 'I']
            LISTA_MENUS=['E','F']
            LISTA_RESTANTES= ['A', 'B', 'C',  'H' ]

            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_MENUS:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_planilla_completa_cosmetic_Bonos(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            
            
            

            
            LISTA_RESTANTES= ['A', 'B', 'C',  'D' ]

            thin = Side(border_style="thin", color="000000")# borde fino
            

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            #ws.freeze_panes = 'D1'
    
    return wb

def fun_planilla_completa_cosmetic_Patronales(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=27
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = M
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = M
            ws.column_dimensions['N'].width = A
            ws.column_dimensions['O'].width = A
            ws.column_dimensions['P'].width = A
            ws.column_dimensions['Q'].width = M
            ws.column_dimensions['R'].width = A
            ws.column_dimensions['S'].width = A
            ws.column_dimensions['T'].width = A
            ws.column_dimensions['U'].width = M
            ws.column_dimensions['V'].width = A
            ws.column_dimensions['W'].width = A
            ws.column_dimensions['X'].width = M
            ws.column_dimensions['Y'].width = A
            ws.column_dimensions['Z'].width = M
            

            LISTA_COLUMNA=['J','M','Q','U','X','Z']
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',  'K', 'L',  'N', 'O', 'P',  'R', 'S', 'T',  'V', 'W',  'Y', ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_planilla_completa_cosmetic_Patronales_1(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=27
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = M
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = M
            ws.column_dimensions['N'].width = M
            ws.column_dimensions['O'].width = M
            ws.column_dimensions['P'].width = A
            ws.column_dimensions['Q'].width = A
            ws.column_dimensions['R'].width = M
            ws.column_dimensions['S'].width = M
            ws.column_dimensions['T'].width = M
            
            

            LISTA_COLUMNA=['J','M','N','Q','R', 'S', 'T']
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',  'K', 'L',  'P', 'O'   ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            ws.freeze_panes = 'D1'
    
    return wb


def fun_novedades_ingresos_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=25
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width =12
            ws.column_dimensions['C'].width = A
            ws.column_dimensions['D'].width = A
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = M
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = M
         
            

            LISTA_COLUMNA=['H', 'I',]
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G',  'J', 'K', 'L' ,'M'  ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            if True: #columna B
                colC = ws['B']#ACTION
                for c in colC:
                   
                    if c.value=='Activo':
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True)
                        c.fill=PatternFill("solid", fgColor="00CCFFCC") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                   
            
            ws.freeze_panes = 'E1'
    
    return wb

def fun_reporte_por_acreedores_individuales(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=18
    B=27
    if True: 
            ws.column_dimensions['A'].width = 15
            ws.column_dimensions['B'].width = 15
            ws.column_dimensions['C'].width = B
            ws.column_dimensions['D'].width = B
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = B
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = A
            
            

            LISTA_COLUMNA=['I',]
            LISTA_MENUS=['L',]
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'F','E',  'G', 'H',  'J','K',  'M' ]

            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_MENUS:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            #ws.freeze_panes = 'D1'
    
    return wb



def fun_novedades_egreso_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=30
    C=16
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width =25
            ws.column_dimensions['C'].width = A
            ws.column_dimensions['D'].width = A
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = C
            ws.column_dimensions['M'].width = C
            ws.column_dimensions['N'].width = C
            ws.column_dimensions['P'].width = M
         
            

            LISTA_COLUMNA=['J','L','O','P',]
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G','H', 'I',  'K' ,'M','N', ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
                   
            
            ws.freeze_panes = 'E1'
    
    return wb

def fun_reporte_acreedor_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=30
    C=16
    if True: 
            ws.column_dimensions['A'].width = 45
            ws.column_dimensions['B'].width =15
            ws.column_dimensions['C'].width = A
            ws.column_dimensions['D'].width = A
            ws.column_dimensions['E'].width = A
           
         
            

            LISTA_COLUMNA=['C']
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B',  'D', 'E',  ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
                   
            
            #ws.freeze_panes = 'E1'
    
    return wb

def fun_novedades_ausencia_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=30
    C=16
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = A
            ws.column_dimensions['C'].width = A
            ws.column_dimensions['D'].width = A
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = A
            ws.column_dimensions['M'].width = A
            
         
            

            LISTA_COLUMNA=['L','M']
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G','H', 'I', 'J', 'K'  ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
                   
            
            ws.freeze_panes = 'D1'
    
    return wb

def fun_novedades_permiso_cosmetic(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=30
    C=16
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = A
            ws.column_dimensions['C'].width = A
            ws.column_dimensions['D'].width = A
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = A
            ws.column_dimensions['K'].width = A
            ws.column_dimensions['L'].width = 50
            
            
         
            

            LISTA_COLUMNA=['H','I',]
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'D', 'E', 'F', 'G',  'J', 'K' ,'L' ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
                   
            
            ws.freeze_panes = 'D1'
    
    return wb


def fun_planilla_completa_cosmetic_SIPEvsAP(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=27
    if True: 
            ws.column_dimensions['A'].width = 30
            ws.column_dimensions['B'].width = 30
            
            

            LISTA_COLUMNA=['A',]
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['B' ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                   
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    
            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    
                    
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            
    
    return wb

def fun_planilla_completa_cosmetic_Provisiones(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    A=20
    M=30
    if True: 
            ws.column_dimensions['A'].width = 4
            ws.column_dimensions['B'].width = 30
            ws.column_dimensions['C'].width = 13
            ws.column_dimensions['D'].width = 25
            ws.column_dimensions['E'].width = A
            ws.column_dimensions['F'].width = A
            ws.column_dimensions['G'].width = A
            ws.column_dimensions['H'].width = A
            ws.column_dimensions['I'].width = A
            ws.column_dimensions['J'].width = M
            
            

            LISTA_COLUMNA=['D', 'E','J']
            #LISTA_MENUS=['J']
            LISTA_RESTANTES= ['A', 'B', 'C', 'F', 'G', 'H', 'I',  ]





            thin = Side(border_style="thin", color="000000")# borde fino
            for columna in LISTA_COLUMNA:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        c.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            for columna in LISTA_RESTANTES:
                num_linea=0
                colC = ws[columna]#ACTION
                for c in colC:
                    num_linea+=1
                    if num_linea==1:
                        
                        # bold letra y cambiar fondo y color
                        #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                        c.font=Font(bold=True,color='00FFFFFF')
                        c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
                        c.alignment=Alignment(horizontal='center',vertical='center',wrap_text=True)#,shrink_to_fit=True,indent=5,justifyLastLine=False)
                    else:
                        #c.font=Font(bold=True)
                        c.alignment = Alignment(horizontal='center', vertical='center')
                        #c.fill=PatternFill("solid", fgColor="00FF8080") # por celda cambiar el fondo
            
                        c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

            
            
    
    return wb



def estetica_comprobantes_pago(wb,nombre_hoja):
    ws = wb[nombre_hoja]
     
    if True: #stettica.
                double = Side(border_style="double", color="000000") #borde grueso
                thick = Side(border_style="thick", color="000000")  # borde grueso
                thin = Side(border_style="thin", color="000000")# borde fino
                colC = ws['J']#ACTION
                num_row=0
                for c in colC:
                    
                    num_row+=1
                    if type(c.value)==str:
                        
                        if (c.value)=='Planilla Quincenal' :
                            ws.row_dimensions[num_row].height = 50
                            
                            c.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                            c.alignment = Alignment(horizontal='center', vertical='center')
                            ws.merge_cells('J'+str(num_row)+':M'+str(num_row))
                            #
                            celda=ws['C'+str(num_row)]
                            celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                            celda.alignment = Alignment( vertical='center')

                           

                colC = ws['F']#ACTION
                num_row=0
                for c in colC:
                    
                    num_row+=1
                    if type(c.value)==str:
                        
                        if (c.value).find('COMPROBANTE DE PAGO')!=-1 :

                            
                            c.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                            c.alignment = Alignment(horizontal='center', vertical='center')
                            ws.merge_cells('F'+str(num_row)+':I'+str(num_row))
                            #
                            ws.merge_cells('F'+str(num_row+1)+':I'+str(num_row+1))
                            celda=ws['F'+str(num_row+1)]
                            celda.alignment = Alignment(horizontal='center', vertical='center')
                            ws.merge_cells('F'+str(num_row+2)+':I'+str(num_row+2))
                            celda=ws['F'+str(num_row+2)]
                            celda.alignment = Alignment(horizontal='center', vertical='center')
                            ws.merge_cells('F'+str(num_row+4)+':I'+str(num_row+4))
                            celda=ws['F'+str(num_row+4)]
                            celda.alignment = Alignment(horizontal='center', vertical='center')
                            celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                               
                colC = ws['C']#ACTION
                num_row=0
                for c in colC:
                    
                    num_row+=1
                    if type(c.value)==str:
                        
                        if (c.value)=='EMPLEADO:' :

                            
                            c.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                           
                            celda=ws['I'+str(num_row)]
                            celda.font=Font(bold=True) 
                            #
                            celda=ws['C'+str(num_row+1)]
                            celda.font=Font(bold=True) 
                            #
                            celda=ws['C'+str(num_row+2)]
                            celda.font=Font(bold=True) 
                            #
                            celda=ws['I'+str(num_row+2)]
                            celda.font=Font(bold=True) 

                        elif (c.value)=='<<CONCEPTO>>' :

                            
                            c.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                           
                            celda=ws['F'+str(num_row)]
                            celda.font=Font(bold=True) 
                            #
                            celda=ws['G'+str(num_row)]
                            celda.font=Font(bold=True) 
                            #
                            celda=ws['I'+str(num_row)]
                            celda.font=Font(bold=True) 
                            #
                            celda=ws['I'+str(num_row)]
                            celda.font=Font(bold=True) 
                            # CENTRAR NUMERO
                            for i in range(1,14):
                                celda=ws['F'+str(num_row+i)]
                                celda.alignment = Alignment(horizontal='center', vertical='center')
                            #
                            for i in range(1,7):
                                celda=ws['M'+str(num_row+i)]
                                celda.alignment = Alignment(horizontal='center', vertical='center')
                            #
                            for i in range(10,12):
                                celda=ws['G'+str(num_row+i)]
                                celda.alignment = Alignment(horizontal='center', vertical='center')
                            # cREAR BORDES
                            
                            #BORDES MAYORES
                            selected_range = ws[('C'+str(num_row)+':G'+str(num_row))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(top=thick)
                            #BORDES INFERIORES
                            selected_range = ws[('C'+str(num_row+11)+':G'+str(num_row+11))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(bottom=thick)
                            #IZQUIERDA  
                            selected_range = ws[('C'+str(num_row)+':C'+str(num_row+11))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(left=thick)
                            #derecha     
                            selected_range = ws[('G'+str(num_row)+':G'+str(num_row+11))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(right=thick)

                            #BRODES ESQUINEROS
                            #ESQUINAS 1
                            celda=ws['C'+str(num_row)]
                            celda.border = Border(top=thick, left=thick)
                            #
                            celda=ws['G'+str(num_row)]
                            celda.border = Border(top=thick, right=thick)

                            celda=ws['C'+str(num_row+11)]
                            celda.border = Border(bottom=thick, left=thick)
                            #
                            celda=ws['G'+str(num_row+11)]
                            celda.border = Border(bottom=thick, right=thick)
                            

                            ## CUADRO DESCUENTOS
                            selected_range = ws[('I'+str(num_row)+':M'+str(num_row))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(top=thick)
                            
                            selected_range = ws[('I'+str(num_row+11)+':M'+str(num_row+11))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(bottom=thick)
                            
                            #IZQUIERDA  
                            selected_range = ws[('I'+str(num_row)+':I'+str(num_row+11))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(left=thick)
                            #derecha     
                            selected_range = ws[('M'+str(num_row)+':M'+str(num_row+11))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(right=thick)
                            
                            #ESQUINAS 1
                            celda=ws['I'+str(num_row)]
                            celda.border = Border(top=thick, left=thick)
                            #
                            celda=ws['M'+str(num_row)]
                            celda.border = Border(top=thick, right=thick)

                            celda=ws['I'+str(num_row+11)]
                            celda.border = Border(bottom=thick, left=thick)
                            #
                            celda=ws['M'+str(num_row+11)]
                            celda.border = Border(bottom=thick, right=thick)
                           
                            

                        elif (c.value)=='TOTAL INGRESOS:' :

                            
                            c.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                           
                            celda=ws['I'+str(num_row)]
                            celda.font=Font(bold=True) 
                            #

                colC = ws['I']#ACTION
                num_row=0
                for c in colC:
                    
                    num_row+=1
                    if type(c.value)==str:
                        
                        if (c.value)=='NETO A PAGAR:' :
                            ws.row_dimensions[num_row].height = 45
                            
                            celda=ws['L'+str(num_row)]
                            STRING_NUEVO=c.value+'  '+celda.value

                            celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR

                            
                           
                            celda=ws['C'+str(num_row)]
                            celda.value=STRING_NUEVO
                            celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                            celda.alignment = Alignment(horizontal='center', vertical='center')
                            celda.border = Border(top=thick, left=thick, right=thick, bottom=thick)
                            ws.merge_cells('C'+str(num_row)+':M'+str(num_row))
                            #
                            
                colC = ws['J']#ACTION
                num_row=0
                for c in colC:
                    
                    num_row+=1
                    if type(c.value)==str:
                        
                        if (c.value)=='Planilla Quincenal' :
                            

                            #CREAR BORDES Principales
                            #BORDES MAYORES
                            selected_range = ws[('B'+str(num_row)+':N'+str(num_row))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(top=thick)
                            #BORDES INFERIORES
                            selected_range = ws[('B'+str(num_row+27)+':N'+str(num_row+27))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(bottom=thick)
                            #IZQUIERDA  
                            selected_range = ws[('B'+str(num_row)+':B'+str(num_row+27))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(left=thick)
                            #derecha     
                            selected_range = ws[('N'+str(num_row)+':N'+str(num_row+27))]
                            for row in selected_range:
                                for cell in row:
                                
                                    cell.border = Border(right=thick)

                            #BRODES ESQUINEROS
                            #ESQUINAS 1
                            celda=ws['B'+str(num_row)]
                            celda.border = Border(top=thick, left=thick)
                            #
                            celda=ws['N'+str(num_row)]
                            celda.border = Border(top=thick, right=thick)

                            celda=ws['B'+str(num_row+27)]
                            celda.border = Border(bottom=thick, left=thick)
                            #
                            celda=ws['N'+str(num_row+27)]
                            celda.border = Border(bottom=thick, right=thick)
            
                                
                


                ws.column_dimensions['A'].width = 1
                ws.column_dimensions['B'].width = 1.5
                ws.column_dimensions['C'].width = 16
                ws.column_dimensions['D'].width = 8
                ws.column_dimensions['E'].width = 7
                ws.column_dimensions['F'].width = 17
                ws.column_dimensions['G'].width = 19
                ws.column_dimensions['H'].width = 1.5
                ws.column_dimensions['I'].width = 20
                ws.column_dimensions['J'].width = 5
                ws.column_dimensions['K'].width = 4
                ws.column_dimensions['L'].width = 5
                ws.column_dimensions['M'].width = 8
                ws.column_dimensions['N'].width = 1.5
            
    return wb


def estetica_comprobantes_liquidacion(wb,nombre_hoja):
    ws = wb[nombre_hoja]
     
    if True: #stettica.
                double = Side(border_style="double", color="000000") #borde grueso
                thick = Side(border_style="thick", color="000000")  # borde grueso
                thin = Side(border_style="thin", color="000000")# borde fino

                ws.column_dimensions['A'].width = 1
                ws.column_dimensions['B'].width = 36
                ws.column_dimensions['C'].width = 3
                ws.column_dimensions['D'].width = 26
                ws.column_dimensions['E'].width = 3
                ws.column_dimensions['F'].width = 20
                ws.column_dimensions['G'].width = 17

                #merge   
                celda=ws['B2']   
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR   
                celda.border = Border(bottom=thin, right=thin , top=thin , left=thin)
                ws.merge_cells('B2:G2') 
                
                celda=ws['B3']   
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR   
                celda.border = Border(bottom=thin, right=thin , top=thin , left=thin)
                ws.merge_cells('B3:G3') 

                
                colC = ws['G']#ACTION
                num_row=0
                for c in colC:
                    num_row+=1

                    if num_row>=4 and num_row<=33:
                       
                        c.border = Border(right=thin)

                colC = ws['B']#ACTION
                num_row=0
                for c in colC:
                    num_row+=1

                    if num_row>=4 and num_row<=33:
                        c.font=Font(bold=True)
                        c.border = Border(left=thin)
                        
                        celda=ws['D'+str(num_row)]
                        celda.alignment = Alignment(horizontal='center', vertical='center')
                        

                        celda=ws['F'+str(num_row)]
                        celda.font=Font(bold=True)

                        celda=ws['G'+str(num_row)]
                        celda.alignment = Alignment(horizontal='center', vertical='center')

                celda=ws['B13']   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick , left=thick)
                celda=ws['C13']   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['D13']   
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['E13']   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['F13']  
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR    
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['G13']   
                celda.font=Font(bold=True)
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick , right=thick )
                celda=ws['F20']   
                celda.font=Font(bold=False)
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda=ws['F12']   
                celda.font=Font(bold=False)
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda=ws['F15']   
                celda.font=Font(bold=False)
                celda.alignment = Alignment(horizontal='center', vertical='center')
                 
                 
                celda=ws['B18']   
                
                celda.border = Border(bottom=thick, top=thick , left=thick)
                celda=ws['C18']   
                
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['D18']   
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR   
                
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['E18']   
                
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['F18']   
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['G18']   
              
                celda.border = Border(bottom=thick, top=thick , right=thick )
                

                celda=ws['B26']   
                celda.font=Font(bold=True)
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick , left=thick)
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda=ws['C26']   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['D26']   
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['E26']   
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['F26']  
                celda.alignment = Alignment(horizontal='center', vertical='center')
                celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR    
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick )
                celda=ws['G26']   
                celda.font=Font(bold=True)
                celda.fill=PatternFill("solid", fgColor="00C0C0C0") # por celda cambiar el fondo
                celda.border = Border(bottom=thick, top=thick , right=thick )
                celda.alignment = Alignment(horizontal='center', vertical='center')

                ws.row_dimensions[2].height = 50
                ws.row_dimensions[3].height = 35

                celda=ws['B27']   
                
                 # CELDA X CELDA CAMBIAR COLOR   
                celda.border = Border(bottom=thin, right=thin , top=thin , left=thin)
                celda.alignment = Alignment( vertical='top')
                #celda.fill=PatternFill("solid", fgColor="00808080") # por celda cambiar el fondo
                ws.merge_cells('B27:G30') 

                celda=ws['G34']   
                celda.border = Border(bottom=thin , right=thin )
                celda=ws['B34']   
                celda.border = Border(bottom=thin , left=thin )
                celda=ws['C34']   
                celda.border = Border(bottom=thin)
                celda=ws['D34']   
                celda.border = Border(bottom=thin)
                celda=ws['E34']   
                celda.border = Border(bottom=thin)
                celda=ws['F34']   
                celda.border = Border(bottom=thin)
                celda=ws['D32']   
                celda.border = Border(bottom=thin)
                
                 

            
    return wb

def funcion_status_generales(wb):
    nombre_hoja = 'Status Generales'
    ws = wb[nombre_hoja]
    ws.column_dimensions['A'].width = 33
    ws.column_dimensions['B'].width = 16
    ws.column_dimensions['C'].width = 16

    thin = Side(border_style="thin", color="000000")# borde fino

    # Seleccionar la celda específica
    celda = ws['A1']
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    # bold letra y cambiar fondo y color
    #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
    celda.font=Font(bold=True,color='00FFFFFF')
    celda.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)


    celda = ws['B1']
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    # bold letra y cambiar fondo y color
    #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
    celda.font=Font(bold=True,color='00FFFFFF')
    celda.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)

    celda = ws['C1']
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    # bold letra y cambiar fondo y color
    #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
    celda.font=Font(bold=True,color='00FFFFFF')
    celda.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)

    celda = ws['A2']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A3']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A4']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A5']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A6']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A7']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A8']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda = ws['A9']
    # bold letra y cambiar fondo y color
    #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
    celda.font=Font(bold=True,color='00FFFFFF')
    celda.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)

    celda = ws['B2']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['B3']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['B4']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['B5']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['B6']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['B7']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda.alignment = Alignment(horizontal='center', vertical='center')

    celda = ws['B8']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['B9']
    # bold letra y cambiar fondo y color
    #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
    celda.font=Font(bold=True,color='00FFFFFF')
    celda.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')


    celda = ws['C2']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C3']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C4']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C5']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C6']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C7']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C8']
    # bold letra y cambiar fondo y color
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')
    celda = ws['C9']
    # bold letra y cambiar fondo y color
    #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
    celda.font=Font(bold=True,color='00FFFFFF')
    celda.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
    celda.border = Border(top=thin, left=thin, right=thin, bottom=thin)
    # Centrar el contenido de la celda
    celda.alignment = Alignment(horizontal='center', vertical='center')


    return wb

def fun_otras_hojas(wb,nombre_hoja):
    ws = wb[nombre_hoja]
    ws.column_dimensions['A'].width = 9
    ws.column_dimensions['B'].width = 17
    ws.column_dimensions['C'].width = 30
    ws.column_dimensions['D'].width = 26
    ws.column_dimensions['E'].width = 25
    ws.column_dimensions['F'].width = 18
    ws.column_dimensions['G'].width = 14
    ws.column_dimensions['H'].width = 40
    LISTA_COLUMNA=['A','B','C','D','E','F','G','H']
    thin = Side(border_style="thin", color="000000")# borde fino
    for columna in LISTA_COLUMNA:
        num_linea=0
        colC = ws[columna]#ACTION
        for c in colC:
            num_linea+=1
            if num_linea==1:
                c.alignment = Alignment(horizontal='center', vertical='center')
                # bold letra y cambiar fondo y color
                #celda.font=Font(bold=True) # CELDA X CELDA CAMBIAR COLOR
                c.font=Font(bold=True,color='00FFFFFF')
                c.fill=PatternFill("solid", fgColor="00000000") # por celda cambiar el fondo
                c.border = Border(top=thin, left=thin, right=thin, bottom=thin)
            else:
                c.alignment = Alignment(horizontal='center', vertical='center')
            
                c.border = Border(top=thin, left=thin, right=thin, bottom=thin)

    return wb


def fun_vacaciones_calculo(dias_vacas,sueldo_diario):
    vacaciones_bruto=0
    vacaciones_ss=0
    vacaciones_se=0
    vacaciones_ilsr=0
    total_vacas_deducciones=0

    vacaciones_neto=0
    vacaciones_ss_patron=0
    vacaciones_se_patron=0
    vacacioones_total_patron=0

    if dias_vacas==0:
        lista=[vacaciones_bruto,vacaciones_ss,vacaciones_se,vacaciones_ilsr,total_vacas_deducciones,vacaciones_neto,vacaciones_ss_patron,vacaciones_se_patron,vacacioones_total_patron]
        return lista
    else:
        vacaciones_bruto=dias_vacas*sueldo_diario
        vacaciones_ss=vacaciones_bruto*0.0975
        vacaciones_se=vacaciones_bruto*0.0125
        vacaciones_ss_patron=vacaciones_bruto*0.1225
        vacaciones_se_patron=vacaciones_bruto*0.015
        sueldo_cal_deduciones=sueldo_diario*7 #una semana
        relacion_semanal=52/12
        sueldo_cal_deduciones=sueldo_cal_deduciones*relacion_semanal
        islr_calculo=sueldo_cal_deduciones*13
        islr=0
        islr_25=0
        islr_15=0
        if islr_calculo>50000:
            islr_25=(islr_calculo-50000)*0.25
        if islr_calculo>11000 and islr_calculo > 50000:
            islr_15=5850
        elif islr_calculo>11000 and islr_calculo<=50000:
            islr_15=(islr_calculo-11000)*0.15
                
        if islr_25+islr_15 >0:
            islr=(islr_15+islr_25)/13

        vacaciones_ilsr=(islr*vacaciones_bruto)/sueldo_cal_deduciones
        

        total_vacas_deducciones=vacaciones_ilsr+vacaciones_ss+vacaciones_se
        vacaciones_neto=vacaciones_bruto-total_vacas_deducciones
        vacacioones_total_patron=vacaciones_se_patron+vacaciones_ss_patron

        lista=[vacaciones_bruto,vacaciones_ss,vacaciones_se,vacaciones_ilsr,total_vacas_deducciones,vacaciones_neto,vacaciones_ss_patron,vacaciones_se_patron,vacacioones_total_patron]
        return lista

def fun_lista_Final_de_pago_cliente(lista_clientes,lista_completa) :

    lista_main=[]

    for codigo in lista_clientes:
        total_planilla=0
        numero_comprobante=0
        total_sueldo_sin_deducciones=0
        total_Hr_Extra=0
        total_deduciones_ley=0
        total_deducciones_Acreedores=0
        total_bonos_sin_ley=0
        total_sueldo_neto=0
        total_xiii=0
        total_aporte_patronal=0
        total_vacaciones=0

        for i in lista_completa:
            if i[-1]==codigo:
                numero_comprobante+=1

                total_planilla+=i[10]
                total_sueldo_sin_deducciones+=i[1]
                total_Hr_Extra+=i[2]
                total_deduciones_ley+=i[4]
                total_deducciones_Acreedores+=i[5]
                total_bonos_sin_ley+=i[6]
                total_sueldo_neto+=i[7]
                total_xiii+=i[8]
                total_aporte_patronal+=i[9]
                total_vacaciones+=i[12]
                nombre=i[14]

        lista_main.append([codigo,nombre,numero_comprobante,total_planilla,total_sueldo_sin_deducciones,
                           total_Hr_Extra,total_deduciones_ley,total_deducciones_Acreedores,total_bonos_sin_ley,total_vacaciones,
                           total_sueldo_neto,total_xiii,total_aporte_patronal])


    return lista_main        


def fun_calculo_decimo(colaborador_pk,lista_buscar_decimo):
    xiii=0
    lista_xiii_obj= Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=colaborador_pk, Periodo__in=lista_buscar_decimo)
    for quincena in lista_xiii_obj:
        xiii+= quincena.Decimo_xiii_quincena_Neto

    return xiii

def fun_calculo_decimo_planilla(colaborador_pk,lista_buscar_decimo):
    Pago_XIII_periodo_Bruto=0
    Pago_XIII_periodo_Seguro_Social=0
    
    Pago_XIII_periodo_ISLR=0
    

    Pago_XIII_periodo_Neto=0
    Deduccion_XIII_periodo_Seguro_social_patron=0
   
    lista_xiii_obj= Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=colaborador_pk, Periodo__in=lista_buscar_decimo)
    if len(lista_xiii_obj)>0:
     for quincena in lista_xiii_obj:
       
        Pago_XIII_periodo_Bruto+=quincena.Decimo_xiii_quincena_Bruto
        Pago_XIII_periodo_Seguro_Social+=quincena.Deduccion_Seg_social_decimo
    
        Pago_XIII_periodo_ISLR+=quincena.Deduccion_ISLR_Decimmo_xiii
        

        Pago_XIII_periodo_Neto+=quincena.Decimo_xiii_quincena_Neto
        Deduccion_XIII_periodo_Seguro_social_patron+=quincena.Deduccion_Seg_social_decimo_Patron
    
     
     LISTA=[Pago_XIII_periodo_Bruto,Pago_XIII_periodo_Seguro_Social,Pago_XIII_periodo_ISLR,Pago_XIII_periodo_Neto,Deduccion_XIII_periodo_Seguro_social_patron]
    else:
        LISTA=[0,0,0,0,0]

    return LISTA


def fun_lista_buscar_decimo(QM,year):    
    Q1='Q1-4'
    Q2='Q1-8'
    Q3='Q1-12'
    LISTA_Q1=['Q2-12','Q1-1','Q2-1','Q1-2','Q2-2','Q1-3','Q2-3','Q1-4']
    LISTA_Q2=['Q2-4','Q1-5','Q2-5','Q1-6','Q2-6','Q1-7','Q2-7','Q1-8']
    LISTA_Q3=['Q2-8','Q1-9','Q2-9','Q1-10','Q2-10','Q1-11','Q2-11','Q1-12']
    if QM ==Q1:
        LISTA_Q1[0]=LISTA_Q1[0]+'-'+str(year-1)
        LISTA_Q1[1]=LISTA_Q1[1]+'-'+str(year)
        LISTA_Q1[2]=LISTA_Q1[2]+'-'+str(year)
        LISTA_Q1[3]=LISTA_Q1[3]+'-'+str(year)
        LISTA_Q1[4]=LISTA_Q1[4]+'-'+str(year)
        LISTA_Q1[5]=LISTA_Q1[5]+'-'+str(year)
        LISTA_Q1[6]=LISTA_Q1[6]+'-'+str(year)
        LISTA_Q1[7]=LISTA_Q1[7]+'-'+str(year)
        return  LISTA_Q1
    elif QM ==Q2:
        LISTA_Q2[0]=LISTA_Q2[0]+'-'+str(year)
        LISTA_Q2[1]=LISTA_Q2[1]+'-'+str(year)
        LISTA_Q2[2]=LISTA_Q2[2]+'-'+str(year)
        LISTA_Q2[3]=LISTA_Q2[3]+'-'+str(year)
        LISTA_Q2[4]=LISTA_Q2[4]+'-'+str(year)
        LISTA_Q2[5]=LISTA_Q2[5]+'-'+str(year)
        LISTA_Q2[6]=LISTA_Q2[6]+'-'+str(year)
        LISTA_Q2[7]=LISTA_Q2[7]+'-'+str(year)
        return  LISTA_Q2 
    elif QM ==Q3: 
        LISTA_Q3[0]=LISTA_Q3[0]+'-'+str(year)
        LISTA_Q3[1]=LISTA_Q3[1]+'-'+str(year)
        LISTA_Q3[2]=LISTA_Q3[2]+'-'+str(year)
        LISTA_Q3[3]=LISTA_Q3[3]+'-'+str(year)
        LISTA_Q3[4]=LISTA_Q3[4]+'-'+str(year)
        LISTA_Q3[5]=LISTA_Q3[5]+'-'+str(year)
        LISTA_Q3[6]=LISTA_Q3[6]+'-'+str(year)
        LISTA_Q3[7]=LISTA_Q3[7]+'-'+str(year)    

        return  LISTA_Q3 

def fun_lista_buscar_decimo_1(QM,year):    
  
    LISTA_Q1=['Q2-12','Q1-1','Q2-1','Q1-2','Q2-2','Q1-3','Q2-3','Q1-4']
    LISTA_Q2=['Q2-4','Q1-5','Q2-5','Q1-6','Q2-6','Q1-7','Q2-7','Q1-8']
    LISTA_Q3=['Q2-8','Q1-9','Q2-9','Q1-10','Q2-10','Q1-11','Q2-11','Q1-12']
    if QM in LISTA_Q1:
        return  15 , 12 , year-1
    elif QM in LISTA_Q2: 
        return    15 , 4 , year
    elif QM in LISTA_Q3:  
        return    15 , 8 , year 

def fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, Minutos_Extras_Diurnos , Minutos_extras_mixtas_diurnas , Minutos_Extras_Noctuno , Minutos_extras_mixtas_nocturnas , Minutos_extras_diurnos_3h , Minutos_de_extras_mixtas_diurnas_3hr , Minutos_extras_nocturnos_3h , Minutos_de_extras_mixtas_nocturnas_3hr):
     #empieza codigo
    #hr_extras
    hr_extras_diurnas=0
    hr_extras_nocturn=0
    hr_extra_mixta_diu=0
    hr_extra_mixta_noc=0

    hr_extra_diurna_3h=0
    hr_extra_noctur_3h=0
    hr_extra_mix_diu_3h=0
    hr_extra_mix_noc_3h=0

    if Minutos_Extras_Diurnos!=0:
        hr_extra=Minutos_Extras_Diurnos
        if num_hr_extras_acumuladas_en_semana_ >= limite_hr_semanales:
            #estas horas pasa directo a 3Hr
            hr_extra_diurna_3h+= hr_extra
        else:
            if hr_extra+num_hr_extras_acumuladas_en_semana_ > limite_hr_semanales :
                #una parte pasan a hr extra acumuladas y otra a normales
                hr_3_mas=hr_extra+num_hr_extras_acumuladas_en_semana_ - limite_hr_semanales
                extra= hr_extra - hr_3_mas
                #agregando
                hr_extra_diurna_3h+= hr_3_mas
                hr_extras_diurnas+= extra

            else:
                #no paso el acumulado se guardan en sus hora extra normal
                hr_extras_diurnas+= hr_extra
                                    
        num_hr_extras_acumuladas_en_semana_ +=   hr_extra

    if Minutos_extras_mixtas_diurnas!=0:
        hr_extra=Minutos_extras_mixtas_diurnas
        if num_hr_extras_acumuladas_en_semana_ >= limite_hr_semanales:
            #estas horas pasa directo a 3Hr
            hr_extra_mix_diu_3h+= hr_extra
        else:
            if hr_extra+num_hr_extras_acumuladas_en_semana_ > limite_hr_semanales :
                #una parte pasan a hr extra acumuladas y otra a normales
                hr_3_mas=hr_extra+num_hr_extras_acumuladas_en_semana_ - limite_hr_semanales
                extra= hr_extra - hr_3_mas
                #agregando
                hr_extra_mix_diu_3h+= hr_3_mas
                hr_extra_mixta_diu+= extra

            else:
                #no paso el acumulado se guardan en sus hora extra normal
                hr_extra_mixta_diu+= hr_extra
                                    
        num_hr_extras_acumuladas_en_semana_ +=   hr_extra
        
    if Minutos_Extras_Noctuno!=0:
        hr_extra=Minutos_Extras_Noctuno
        if num_hr_extras_acumuladas_en_semana_ >= limite_hr_semanales:
            #estas horas pasa directo a 3Hr
            hr_extra_noctur_3h+= hr_extra
        else:
            if hr_extra+num_hr_extras_acumuladas_en_semana_ > limite_hr_semanales :
                #una parte pasan a hr extra acumuladas y otra a normales
                hr_3_mas=hr_extra+num_hr_extras_acumuladas_en_semana_ - limite_hr_semanales
                extra= hr_extra - hr_3_mas
                #agregando
                hr_extra_noctur_3h+= hr_3_mas
                hr_extras_nocturn+= extra

            else:
                #no paso el acumulado se guardan en sus hora extra normal
                hr_extras_nocturn+= hr_extra
                                    
        num_hr_extras_acumuladas_en_semana_ +=   hr_extra

    if Minutos_extras_mixtas_nocturnas!=0:
        hr_extra=Minutos_extras_mixtas_nocturnas
        if num_hr_extras_acumuladas_en_semana_ >= limite_hr_semanales:
            #estas horas pasa directo a 3Hr
            hr_extra_mix_noc_3h+= hr_extra
        else:
            if hr_extra+num_hr_extras_acumuladas_en_semana_ > limite_hr_semanales :
                #una parte pasan a hr extra acumuladas y otra a normales
                hr_3_mas=hr_extra+num_hr_extras_acumuladas_en_semana_ - limite_hr_semanales
                extra= hr_extra - hr_3_mas
                #agregando
                hr_extra_mix_noc_3h+= hr_3_mas
                hr_extra_mixta_noc+= extra

            else:
                #no paso el acumulado se guardan en sus hora extra normal
                hr_extra_mixta_noc+= hr_extra
                                    
        num_hr_extras_acumuladas_en_semana_ +=   hr_extra

    if Minutos_extras_diurnos_3h !=0:
        num_hr_extras_acumuladas_en_semana_ +=   Minutos_extras_diurnos_3h
        hr_extra_diurna_3h  +=  Minutos_extras_diurnos_3h
    
    if Minutos_de_extras_mixtas_diurnas_3hr !=0:
        num_hr_extras_acumuladas_en_semana_ +=   Minutos_de_extras_mixtas_diurnas_3hr
        hr_extra_mix_diu_3h  +=  Minutos_de_extras_mixtas_diurnas_3hr
    
    if Minutos_extras_nocturnos_3h !=0:
        num_hr_extras_acumuladas_en_semana_ +=   Minutos_extras_nocturnos_3h
        hr_extra_noctur_3h  +=  Minutos_extras_nocturnos_3h
    
    if Minutos_de_extras_mixtas_nocturnas_3hr !=0:
        num_hr_extras_acumuladas_en_semana_ +=   Minutos_de_extras_mixtas_nocturnas_3hr
        hr_extra_mix_noc_3h  +=  Minutos_de_extras_mixtas_nocturnas_3hr
         
    lista= [num_hr_extras_acumuladas_en_semana_,
            hr_extras_diurnas,
            hr_extras_nocturn,
            hr_extra_mixta_diu,
            hr_extra_mixta_noc,

            hr_extra_diurna_3h,
            hr_extra_noctur_3h,
            hr_extra_mix_diu_3h,
            hr_extra_mix_noc_3h
            ]
    
    return lista

def fun_num_hr_extras_acumuladas_en_semana_antes_que_empieza(fecha,colaborador_obj):
    min_horas_extras=0
    saber_dia=fecha.weekday()
    if saber_dia==0:
        min_horas_extras=0
        return min_horas_extras
    else:
        fecha_iterador =fecha-timedelta(days=1)
        iter_inicio=True
        while iter_inicio:
            try:
                dia_hoja_tiempo_obj=Hoja_tiempo.objects.get(Colaborador__pk=colaborador_obj.pk, Dia_entrada=fecha_iterador)
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_extras_mixtas_nocturnas
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_extras_mixtas_diurnas
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_Extras_Diurnos
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_Extras_Noctuno
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_extras_diurnos_3h
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_extras_nocturnos_3h
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_de_extras_mixtas_diurnas_3hr
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_de_extras_mixtas_nocturnas_3hr
               

            except:
                 a=1
            if fecha_iterador.weekday()==0:
                iter_inicio=False
                    
            else:
                fecha_iterador-=timedelta(days=1)
    
    return min_horas_extras

def fun_num_hr_acumuladas_en_semana_antes_que_empieza_Ruta(fecha,colaborador_obj):
    min_horas_extras=0
    saber_dia=fecha.weekday()
    if saber_dia==0:
        min_horas_extras=0
        return min_horas_extras
    else:
        fecha_iterador =fecha-timedelta(days=1)
        iter_inicio=True
        while iter_inicio:
            
            dia_hoja_tiempo_obj=Hoja_tiempo.objects.filter(Colaborador__pk=colaborador_obj.pk, Dia_entrada=fecha_iterador)
            for dia in dia_hoja_tiempo_obj:
                    min_horas_extras+=dia.Minutos_Trabajads
                
            
            if fecha_iterador.weekday()==0:
                iter_inicio=False
                    
            else:
                fecha_iterador-=timedelta(days=1)
    
    return min_horas_extras
  

def fun_num_hr_acumuladas_en_semana_antes_que_empieza(fecha,colaborador_obj):
    min_horas_extras=0
    saber_dia=fecha.weekday()
    if saber_dia==0:
        min_horas_extras=0
        return min_horas_extras
    else:
        fecha_iterador =fecha-timedelta(days=1)
        iter_inicio=True
        while iter_inicio:
            try:
                dia_hoja_tiempo_obj=Hoja_tiempo.objects.get(Colaborador__pk=colaborador_obj.pk, Dia_entrada=fecha_iterador)
                min_horas_extras+=dia_hoja_tiempo_obj.Minutos_Trabajads
                
            except:
                 a=1
            if fecha_iterador.weekday()==0:
                iter_inicio=False
                    
            else:
                fecha_iterador-=timedelta(days=1)
    
    return min_horas_extras
  

def dias_de_vacaciones(fecha_inicial_vacaciones, fecha_final_vacaciones, fecha_inicial_rango, fecha_final_rango):
    # Asegurarse de que las fechas estén ordenadas correctamente
    if fecha_inicial_vacaciones > fecha_final_vacaciones:
        fecha_inicial_vacaciones, fecha_final_vacaciones = fecha_final_vacaciones, fecha_inicial_vacaciones
    if fecha_inicial_rango > fecha_final_rango:
        fecha_inicial_rango, fecha_final_rango = fecha_final_rango, fecha_inicial_rango

    # Calcular la cantidad de días de vacaciones en el rango dado
    dias_vacaciones = (min(fecha_final_vacaciones, fecha_final_rango) - max(fecha_inicial_vacaciones, fecha_inicial_rango)).days + 1
    return max(0, dias_vacaciones)


def calcular_dias_vacaciones(fecha_inicio, vacaciones_consumidas):
    # Obtener la fecha actual
    
    fecha_actual = datetime.now()
    fecha_trabajada = fecha_actual.date() - timedelta(days=vacaciones_consumidas)
    dias_trabajos=fecha_trabajada-fecha_inicio
    dias_trabajados=dias_trabajos.days
   

    dias_vacaciones = math.floor(dias_trabajados/11)

    return dias_vacaciones


def calcular_incapacidad_dias(fecha_inicio, incapacidad_consumidas , col_obj):
    #saber si el trabajador tiene mas de 2 anos 
    tipo_colaborador = col_obj.Departamento

    fecha_actual = datetime.now()
    
    fecha_resultado = fecha_actual - relativedelta(years=2)
    fecha_comparacion= datetime(fecha_resultado.year , fecha_resultado.month , 1)
    if tipo_colaborador !='Ruta':
        lista_hoja_tiempo = Hoja_tiempo.objects.filter(Colaborador__pk = col_obj.pk )
        dias_trabajados=len(lista_hoja_tiempo)
        dias_acumulados= (dias_trabajados * 1.5) / 26
        if dias_acumulados>36:
             dias_acumulados=36
    else:
         
        suma_total_salario_bruto = Hoja_tiempo.objects.filter(Colaborador__pk=col_obj.pk).aggregate(total_salario_bruto=Sum('Minutos_Trabajads'))
        total_salario = suma_total_salario_bruto['total_salario_bruto']
        dias= ( total_salario * 1.5)  / (480*26)
        dias_acumulados = round(dias,2)
        if dias_acumulados>36:
             dias_acumulados=36
    
    dias_acumulados-=incapacidad_consumidas

    dias_acumulados= math.floor(dias_acumulados)
    return dias_acumulados


def calcular_dias_vacaciones_1(fecha_inicio, vacaciones_consumidas):
    # Obtener la fecha actual
    
    fecha_actual = datetime.now()
    fecha_trabajada = fecha_actual.date() - timedelta(days=vacaciones_consumidas)
    dias_trabajos=fecha_trabajada-fecha_inicio
    dias_trabajados=dias_trabajos.days
   

    dias_vacaciones = dias_trabajados/11

    return dias_vacaciones

def calcular_dias_vacaciones_2(fecha_inicio, vacaciones_consumidas, fecha_actual):
    # Obtener la fecha actual
    
   
    fecha_trabajada = fecha_actual - timedelta(days=vacaciones_consumidas)
    dias_trabajos=fecha_trabajada-fecha_inicio
    dias_trabajados=dias_trabajos.days
   

    dias_vacaciones = dias_trabajados/11

    return dias_vacaciones

# Ejemplo de uso
#fecha_inicio_trabajo = datetime(2023, 1, 1)  # Reemplaza esto con la fecha real de inicio de trabajo
#dias_vacaciones_totales = calcular_dias_vacaciones(fecha_inicio_trabajo)

def fun_minutoss(minutos):
    string='si'
    if minutos==0:
        string='0 Hr.'

    if minutos//60==0:
        string='0 Hr. - '+str(minutos//1)+' min.'
    

    if minutos//60>0:
        hr=minutos//60
        minutes=minutos-hr*60
        string=str(hr)+' Hr. - '+str(minutes)+' min.'
    return string
    
def calcular_minutos_trabajados_diario_ruta(entradas_y_salidas, hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados):
    
    hora_entrada_contrato = datetime.strptime(hora_entrada_contrato, '%H:%M').time()
    hora_salida_contrato = datetime.strptime(hora_salida_contrato, '%H:%M').time()

    lista_final=[]
    for i in entradas_y_salidas:
        entrada = i[0]
        salida=i[1]
        almorzo_bool=False

       
        dif_sal_diurna=0
        hr_extras_noc_salida=0
        # Convertir las cadenas de fecha y hora en objetos datetime
        fecha_entrada = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
        fecha_salida = datetime.strptime(salida, '%Y-%m-%d %H:%M')

        hora_entrada = fecha_entrada.hour
        hora_salida = fecha_salida.hour 
        solo_fecha_entrada= fecha_entrada.day 
        solo_fecha_salida= fecha_salida.day 
        
        min_faltante_de_turno=0
        #calcular si trabajo solo el mismo dia
        if Almuerzo:
          if solo_fecha_entrada==solo_fecha_salida:
            if hora_entrada <= hora_de_inicio_almuerzo and hora_salida >= hora_de_final_almuerzo:
                almorzo_bool=True
          else:
            #entro un dia , salio el dia siguiente
            if    hora_de_inicio_almuerzo == 23:
                #si almuerza de 11pm a 12 de la medianoche
                # hr entrada menor que 11 pm y hora salida mayor que almuerzo
                #8pm < 11 y 6<0
                if  hora_entrada <= hora_de_inicio_almuerzo and hora_salida >= hora_de_final_almuerzo:
                    almorzo_bool=True
                #comio el misma dia
                # 6PM < 10 PM Y 11PM> 4AM
                    
            elif hora_entrada <=hora_de_inicio_almuerzo and hora_de_final_almuerzo >= hora_salida:
                    almorzo_bool=True
                # 20 > 3 y 4 < 6
            elif hora_entrada >=hora_de_inicio_almuerzo and hora_de_final_almuerzo <= hora_salida:
                    almorzo_bool=True
                
            else:
                    almorzo_bool=False

        tiempo_trabajado = fecha_salida - fecha_entrada
        
        minutos_trabajados = int(tiempo_trabajado.total_seconds() // 60)  # Convertir a minutos
        if almorzo_bool:
             minutos_trabajados-=60

        #llego_temprano= datetime.combine(fecha_entrada.date(), hora_entrada_contrato ) - datetime.combine(fecha_entrada.date(), fecha_entrada.time()) 
        #min_llego_temprano=llego_temprano.total_seconds()//60
        #if min_llego_temprano <=0:
              #min_llego_temprano=0
             
        min_llego_temprano=0
        ##print( minutos_trabajados, minutos_trabajados/60, type(minutos_trabajados))
        
        #input('que tiempo ves? tiempo en minutos ya con el tiempo de almuerzo quitado')
        minutos_de_tardia=0
      

        laboro_dia_domingo_descanso=False
        dia_semana=fecha_entrada.weekday()
        if dia_semana==6 or dia_descanso_1==dia_semana or dia_descanso_2==dia_semana:
              # es domingo se paga doble o dia descanso semanal
              laboro_dia_domingo_descanso=True

        #saber si es feriado
        laboro_dia_feriado=False
        f_enter=entrada.split()
        fecha_enter=f_enter[0]
        lista_f_enter=fecha_enter.split('-')
        date_enter=datetime(int(lista_f_enter[0]),int(lista_f_enter[1]),int(lista_f_enter[2]))
        if date_enter.date() in feriados:
              laboro_dia_feriado=True
        


        lista_entrada=entrada.split()
        lista_salida=salida.split()
        dia_entrada=lista_entrada[0]
        hr_entrada=lista_entrada[1]

        dia_salida=lista_salida[0]
        hr_salida=lista_salida[1]

        entrada = i[0]
        salida=i[1]
        lista_return=[dia_entrada,   hr_entrada  , dia_salida, hr_salida, 
                       minutos_trabajados  , minutos_trabajados , 0,0  ,
                      0  ,0  ,min_faltante_de_turno  ,min_llego_temprano  ,0,
                        0,
                        0  ,0  ,0  ,0 ,
                        laboro_dia_domingo_descanso,laboro_dia_feriado]
        
        lista_final.append(lista_return)
        

    return lista_final
     

def calcular_minutos_trabajados_diario_horas(entradas_y_salidas, hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados):
    resultados_semana = []
    hora_entrada_contrato = datetime.strptime(hora_entrada_contrato, '%H:%M').time()
    hora_salida_contrato = datetime.strptime(hora_salida_contrato, '%H:%M').time()
    lista_final=[]
    
    for i in entradas_y_salidas:
        entrada = i[0]
        salida=i[1]
        almorzo_bool=False

        ##print(entrada,salida, 'estamos en este fecha ruta')
        dif_sal_diurna=0
        hr_extras_noc_salida=0
        # Convertir las cadenas de fecha y hora en objetos datetime
        fecha_entrada = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
        fecha_salida = datetime.strptime(salida, '%Y-%m-%d %H:%M')

        hora_entrada = fecha_entrada.hour
        hora_salida = fecha_salida.hour 
        solo_fecha_entrada= fecha_entrada.day 
        solo_fecha_salida= fecha_salida.day 
        
        #calcular si trabajo solo el mismo dia
        if Almuerzo:
          if solo_fecha_entrada==solo_fecha_salida:
            if hora_entrada <= hora_de_inicio_almuerzo and hora_salida >= hora_de_final_almuerzo:
                almorzo_bool=True
          else:
            #entro un dia , salio el dia siguiente
            if    hora_de_inicio_almuerzo == 23:
                #si almuerza de 11pm a 12 de la medianoche
                # hr entrada menor que 11 pm y hora salida mayor que almuerzo
                #8pm < 11 y 6<0
                if  hora_entrada <= hora_de_inicio_almuerzo and hora_salida >= hora_de_final_almuerzo:
                    almorzo_bool=True
                #comio el misma dia
                # 6PM < 10 PM Y 11PM> 4AM
                    
            elif hora_entrada <=hora_de_inicio_almuerzo and hora_de_final_almuerzo >= hora_salida:
                    almorzo_bool=True
                # 20 > 3 y 4 < 6
            elif hora_entrada >=hora_de_inicio_almuerzo and hora_de_final_almuerzo <= hora_salida:
                    almorzo_bool=True
                
            else:
                    almorzo_bool=False

        tiempo_trabajado = fecha_salida - fecha_entrada
        
        minutos_trabajados = int(tiempo_trabajado.total_seconds() // 60)  # Convertir a minutos

        min_faltante_de_turno=0
        if almorzo_bool:
             minutos_trabajados-=60
             
        ##print( minutos_trabajados, minutos_trabajados/60, type(minutos_trabajados))
        #input('que tiempo ves? tiempo en minutos ya con el tiempo de almuerzo quitado')
        diferencia_entrada = datetime.combine(fecha_entrada.date(), fecha_entrada.time()) - datetime.combine(fecha_entrada.date(), hora_entrada_contrato)
        ##print(diferencia_entrada,'diferencia_entrada')
        #input('diferencia_entrada')

        # Verificar si la entrada es antes de la hora de entrada del contrato
        if diferencia_entrada.total_seconds() > 0:
            # llego tarde al trabajo 
            minutos_de_tardia = int(diferencia_entrada.total_seconds() // 60)  # Convertir a minutos
        else:
            minutos_de_tardia = 0

        llego_temprano= datetime.combine(fecha_entrada.date(), hora_entrada_contrato ) - datetime.combine(fecha_entrada.date(), fecha_entrada.time()) 
        min_llego_temprano=llego_temprano.total_seconds()//60
        if min_llego_temprano <=0:
              min_llego_temprano=0
        
        

        if jornada_diaria*60 <  minutos_trabajados:
            hora_inicio_diurna = datetime.strptime('06:00', '%H:%M').time() #jornada laboral por la ley
            hora_fin_diurna = datetime.strptime('18:00', '%H:%M').time()    #jornada laboral por la ley
            min_totales_extra=minutos_trabajados-jornada_diaria*60
            minutos_trabajadas_jornada_laboral=jornada_diaria*60
             #si trabajo mas de su 4 donde si no trabajo antes de las 6 pm se le paga normal
            
             #si trabajo de noche hay que pagarle su hora nocturnas
            if fecha_salida.time() > hora_fin_diurna and fecha_entrada.time() >=  hora_inicio_diurna :
                        
                        nocturnas=  datetime.combine(fecha_salida.date(), fecha_salida.time())- datetime.combine(fecha_salida.date(), hora_fin_diurna)
                        
                        minutos_extras_nocturnos=nocturnas.total_seconds()//60

                        #print(minutos_extras_nocturnos, nocturnas)

                        if minutos_extras_nocturnos>=min_totales_extra:
                            minutos_extras_nocturnos=min_totales_extra
                            minutos_extras_diurnos=0
                        else:   
                              minutos_extras_diurnos=minutos_trabajados-nocturnas.total_seconds()//60 - minutos_trabajadas_jornada_laboral  
                         
                        horas_laborales_extras=0

            elif fecha_salida.time() < hora_inicio_diurna:
                        minutos_trabajadas_jornada_laboral=jornada_diaria*60
                        minutos_extras_nocturnos=minutos_trabajados-jornada_diaria*60 
                        minutos_extras_diurnos=0
                        horas_laborales_extras=0
            elif   hora_inicio_diurna > fecha_entrada.time() and   fecha_salida.time() < hora_fin_diurna:
                        madrugada=  datetime.combine(fecha_entrada.date(), hora_inicio_diurna)- datetime.combine(fecha_entrada.date(), fecha_entrada.time())
                        
                        minutos_extras_nocturnos=madrugada.total_seconds()//60
                        if minutos_extras_nocturnos >= min_totales_extra:
                              minutos_extras_nocturnos=min_totales_extra
                              minutos_extras_diurnos=0
                        else:
                              
                        
                            minutos_extras_diurnos=minutos_trabajados-madrugada.total_seconds()//60 - minutos_trabajadas_jornada_laboral
                        horas_laborales_extras=0
            
            elif hora_inicio_diurna > fecha_entrada.time():
                        minutos_trabajadas_jornada_laboral=jornada_diaria*60
                        minutos_extras_nocturnos=minutos_trabajados-jornada_diaria*60 
                        minutos_extras_diurnos=0
                        horas_laborales_extras=0
            else:
                        minutos_trabajadas_jornada_laboral=jornada_diaria*60
                        minutos_extras_nocturnos=0
                        
                        horas_laborales_extras=0
                        minutos_extras_diurnos=minutos_trabajados-jornada_diaria*60


        elif jornada_diaria*60 ==  minutos_trabajados:
             #si trabajo igual que su trabajo
                        minutos_trabajadas_jornada_laboral=jornada_diaria*60
                        minutos_extras_nocturnos=0
                        minutos_extras_diurnos=0
                        horas_laborales_extras=0
        else:
             #verificar si cuanto minutos menostrabajo para reportarlo
                        minutos_extras_nocturnos=0
                        minutos_extras_diurnos=0
                        horas_laborales_extras=0
                        
                        minutos_trabajadas_jornada_laboral=minutos_trabajados
                        min_faltante_de_turno=jornada_diaria*60-minutos_trabajados

        minutos_de_extras_mixtas_nocturnas=0
        minutos_de_extras_mixtas_diurnas=0
        minutos_de_extras_mixtas_diurnas_3hr=0
        minutos_de_extras_mixtas_nocturnas_3hr=0

        laboro_dia_domingo_descanso=False
        dia_semana=fecha_entrada.weekday()
        if dia_semana==6 or dia_descanso_1==dia_semana or dia_descanso_2==dia_semana:
              # es domingo se paga doble o dia descanso semanal
              laboro_dia_domingo_descanso=True

        #saber si es feriado
        laboro_dia_feriado=False
        f_enter=entrada.split()
        fecha_enter=f_enter[0]
        lista_f_enter=fecha_enter.split('-')
        date_enter=datetime(int(lista_f_enter[0]),int(lista_f_enter[1]),int(lista_f_enter[2]))
        if date_enter.date() in feriados:
              laboro_dia_feriado=True

        minutos_extras_diurnos_3hr=0
        minutos_extras_nocturnos_3hr=0
        
        if  minutos_extras_diurnos + minutos_extras_nocturnos >180:
            if minutos_extras_nocturnos > 180 and minutos_extras_diurnos==0:

                minutos_extras_nocturnos_3hr=   minutos_extras_nocturnos - 180
                minutos_extras_nocturnos=minutos_extras_nocturnos-minutos_extras_nocturnos_3hr
                

            elif minutos_extras_nocturnos==0 and minutos_extras_diurnos>180:

                minutos_extras_diurnos_3hr=minutos_extras_diurnos-180
                minutos_extras_diurnos=minutos_extras_diurnos-minutos_extras_diurnos_3hr

            else:
                dif_3_hr_extras = minutos_extras_diurnos + minutos_extras_nocturnos - 180
                if minutos_extras_nocturnos <= dif_3_hr_extras :
                        minutos_extras_nocturnos_3hr = minutos_extras_nocturnos
                        minutos_extras_nocturnos = 0
                        minutos_extras_diurnos= minutos_extras_diurnos -  (dif_3_hr_extras - minutos_extras_nocturnos_3hr )
                        minutos_extras_diurnos_3hr=dif_3_hr_extras - minutos_extras_nocturnos_3hr
                        
                else:
                      minutos_extras_nocturnos_3hr =  dif_3_hr_extras
                      minutos_extras_nocturnos= minutos_extras_nocturnos - minutos_extras_nocturnos_3hr


        lista_entrada=entrada.split()
        lista_salida=salida.split()
        dia_entrada=lista_entrada[0]
        hr_entrada=lista_entrada[1]

        dia_salida=lista_salida[0]
        hr_salida=lista_salida[1]

        entrada = i[0]
        salida=i[1]
        lista_return=[dia_entrada,   hr_entrada  , dia_salida, hr_salida, 
                       minutos_trabajados  , minutos_trabajadas_jornada_laboral , minutos_extras_diurnos,minutos_extras_nocturnos  ,
                      horas_laborales_extras  ,minutos_de_tardia  ,min_faltante_de_turno  ,min_llego_temprano  ,minutos_de_extras_mixtas_nocturnas,
                        minutos_de_extras_mixtas_diurnas,
                        minutos_extras_diurnos_3hr  ,minutos_extras_nocturnos_3hr  ,minutos_de_extras_mixtas_diurnas_3hr  ,minutos_de_extras_mixtas_nocturnas_3hr ,
                        laboro_dia_domingo_descanso,laboro_dia_feriado]
        
        lista_final.append(lista_return)
        

    return lista_final

def calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas, hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados):
    resultados_semana = []
    hora_entrada_contrato = datetime.strptime(hora_entrada_contrato, '%H:%M').time()
    hora_salida_contrato = datetime.strptime(hora_salida_contrato, '%H:%M').time()
    lista_final=[]

    for i in entradas_y_salidas:
        entrada = i[0]
        salida=i[1]
        almorzo_bool=False

        ##print(entrada,salida, 'estamos en este fecha hora mixta diurna')
        dif_sal_diurna=0
        hr_extras_noc_salida=0
        # Convertir las cadenas de fecha y hora en objetos datetime
        fecha_entrada = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
        fecha_salida = datetime.strptime(salida, '%Y-%m-%d %H:%M')

        laboro_dia_domingo_descanso=False
        dia_semana=fecha_entrada.weekday()
        if dia_semana==6 or dia_descanso_1==dia_semana or dia_descanso_2==dia_semana:
              # es domingo se paga doble o dia descanso semanal
              laboro_dia_domingo_descanso=True

        #saber si es feriado
        laboro_dia_feriado=False
        f_enter=entrada.split()
        fecha_enter=f_enter[0]
        lista_f_enter=fecha_enter.split('-')
        date_enter=datetime(int(lista_f_enter[0]),int(lista_f_enter[1]),int(lista_f_enter[2]))
        if date_enter.date() in feriados:
              laboro_dia_feriado=True
              
             
        hora_entrada = fecha_entrada.hour
        hora_salida = fecha_salida.hour 
        solo_fecha_entrada= fecha_entrada.day 
        solo_fecha_salida= fecha_salida.day 
        
        #calcular si trabajo solo el mismo dia
        if Almuerzo:
          if solo_fecha_entrada==solo_fecha_salida:
            if hora_entrada <= hora_de_inicio_almuerzo and hora_salida >= hora_de_final_almuerzo:
                almorzo_bool=True
          else:
            #entro un dia , salio el dia siguiente
            if    hora_de_inicio_almuerzo == 23:
                #si almuerza de 11pm a 12 de la medianoche
                # hr entrada menor que 11 pm y hora salida mayor que almuerzo
                #8pm < 11 y 6<0
                if  hora_entrada <= hora_de_inicio_almuerzo and hora_salida >= hora_de_final_almuerzo:
                    almorzo_bool=True
                #comio el misma dia
                # 6PM < 10 PM Y 11PM> 4AM
                    
            elif hora_entrada <=hora_de_inicio_almuerzo and hora_de_final_almuerzo >= hora_salida:
                    almorzo_bool=True
                # 20 > 3 y 4 < 6
            elif hora_entrada >=hora_de_inicio_almuerzo and hora_de_final_almuerzo <= hora_salida:
                    almorzo_bool=True
                
            else:
                    almorzo_bool=False

        tiempo_trabajado = fecha_salida - fecha_entrada
        
        minutos_trabajados = int(tiempo_trabajado.total_seconds() // 60)  # Convertir a minutos

        min_faltante_de_turno=0
        if almorzo_bool:
             minutos_trabajados-=60
             
        ##print( minutos_trabajados, minutos_trabajados/60, type(minutos_trabajados))
        #input('que tiempo ves? tiempo en minutos ya con el tiempo de almuerzo quitado')

        diferencia_entrada = datetime.combine(fecha_entrada.date(), fecha_entrada.time()) - datetime.combine(fecha_entrada.date(), hora_entrada_contrato)
        ##print(diferencia_entrada,'diferencia_entrada')
        #input('diferencia_entrada')

        # Verificar si la entrada es antes de la hora de entrada del contrato
        if diferencia_entrada.total_seconds() > 0:
            # llego tarde al trabajo 
            minutos_de_tardia = int(diferencia_entrada.total_seconds() // 60)  # Convertir a minutos
        else:
            minutos_de_tardia = 0

        llego_temprano= datetime.combine(fecha_entrada.date(), hora_entrada_contrato ) - datetime.combine(fecha_entrada.date(), fecha_entrada.time()) 
        min_llego_temprano=llego_temprano.total_seconds()//60
        if min_llego_temprano <=0:
              min_llego_temprano=0

        # tomar decision de horas trabajadas
        if jornada_diaria*60 ==  minutos_trabajados:
             #si trabajo igual que su trabajo
                        minutos_trabajadas_jornada_laboral=jornada_diaria*60
                        minutos_extras_nocturnos=0
                        minutos_extras_diurnos=0
                        horas_laborales_extras=0
                        minutos_de_extras_mixtas_nocturnas=0
                        minutos_de_extras_mixtas_diurnas=0

        elif jornada_diaria*60 <  minutos_trabajados:
            hora_inicio_diurna = datetime.strptime('06:00', '%H:%M').time() #jornada laboral por la ley
            hora_fin_diurna = datetime.strptime('18:00', '%H:%M').time()    #jornada laboral por la ley

            if fecha_entrada.time() < hora_fin_diurna:
                total_min_extras=minutos_trabajados-jornada_diaria*60
                tiempo_antes_6pm_hr_entrada= datetime.combine(fecha_entrada.date(), hora_fin_diurna ) - datetime.combine(fecha_entrada.date(), fecha_entrada.time())
                min_tiempo_antes_6pm_hr_entrada= tiempo_antes_6pm_hr_entrada.total_seconds()//60
                if min_tiempo_antes_6pm_hr_entrada > total_min_extras:

                    minutos_de_extras_mixtas_diurnas=total_min_extras

                else:
                    minutos_de_extras_mixtas_diurnas = min_tiempo_antes_6pm_hr_entrada
                    minutos_de_extras_mixtas_nocturnas  =   total_min_extras   -  minutos_de_extras_mixtas_diurnas
                      
                      
            else:
                minutos_de_extras_mixtas_nocturnas=minutos_trabajados-jornada_diaria*60
                minutos_de_extras_mixtas_diurnas=0
                  

            minutos_trabajadas_jornada_laboral=jornada_diaria*60
            minutos_extras_diurnos=0
            minutos_extras_nocturnos=0
            horas_laborales_extras=0
              

        else:
             #verificar si cuanto minutos menostrabajo para reportarlo
                        minutos_extras_nocturnos=0
                        minutos_extras_diurnos=0
                        horas_laborales_extras=0
                        minutos_de_extras_mixtas_nocturnas=0
                        minutos_de_extras_mixtas_diurnas=0
                        minutos_trabajadas_jornada_laboral=minutos_trabajados
                        min_faltante_de_turno=jornada_diaria*60-minutos_trabajados


        #SABER SI TRABAJO MAS DE 3 Horas extras
        minutos_extras_diurnos_3hr=0
        minutos_extras_nocturnos_3hr=0
        minutos_de_extras_mixtas_diurnas_3hr=0
        minutos_de_extras_mixtas_nocturnas_3hr=0
        
        if  minutos_de_extras_mixtas_diurnas + minutos_de_extras_mixtas_nocturnas >180:
            if minutos_de_extras_mixtas_nocturnas > 180 and minutos_de_extras_mixtas_diurnas==0:

                minutos_de_extras_mixtas_nocturnas_3hr=   minutos_de_extras_mixtas_nocturnas - 180
                minutos_de_extras_mixtas_nocturnas=minutos_de_extras_mixtas_nocturnas-minutos_de_extras_mixtas_nocturnas_3hr
                

            elif minutos_de_extras_mixtas_nocturnas==0 and minutos_de_extras_mixtas_diurnas>180:

                minutos_de_extras_mixtas_diurnas_3hr=minutos_de_extras_mixtas_diurnas-180
                minutos_de_extras_mixtas_diurnas=minutos_de_extras_mixtas_diurnas-minutos_de_extras_mixtas_diurnas_3hr

            else:
                dif_3_hr_extras = minutos_de_extras_mixtas_diurnas + minutos_de_extras_mixtas_nocturnas - 180
                if minutos_de_extras_mixtas_nocturnas <= dif_3_hr_extras :
                        minutos_de_extras_mixtas_nocturnas_3hr = minutos_de_extras_mixtas_nocturnas
                        minutos_de_extras_mixtas_nocturnas = 0
                        minutos_de_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas -  (dif_3_hr_extras - minutos_de_extras_mixtas_nocturnas_3hr )
                        minutos_de_extras_mixtas_diurnas_3hr=dif_3_hr_extras - minutos_de_extras_mixtas_nocturnas_3hr
                        
                else:
                      minutos_de_extras_mixtas_nocturnas_3hr =  dif_3_hr_extras
                      minutos_de_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas - minutos_de_extras_mixtas_nocturnas_3hr

                      

                        
                        
                  
                  

        lista_entrada=entrada.split()
        lista_salida=salida.split()
        dia_entrada=lista_entrada[0]
        hr_entrada=lista_entrada[1]

        dia_salida=lista_salida[0]
        hr_salida=lista_salida[1]

        entrada = i[0]
        salida=i[1]
        lista_return=[dia_entrada,   hr_entrada  , dia_salida, hr_salida, 
                       minutos_trabajados  , minutos_trabajadas_jornada_laboral , minutos_extras_diurnos,minutos_extras_nocturnos  ,
                      horas_laborales_extras  ,minutos_de_tardia  ,min_faltante_de_turno  ,min_llego_temprano  ,minutos_de_extras_mixtas_nocturnas,
                        minutos_de_extras_mixtas_diurnas,
                        minutos_extras_diurnos_3hr  ,minutos_extras_nocturnos_3hr  ,minutos_de_extras_mixtas_diurnas_3hr  ,minutos_de_extras_mixtas_nocturnas_3hr ,
                        laboro_dia_domingo_descanso,laboro_dia_feriado]
        
        lista_final.append(lista_return)
        

    return lista_final

def fun_calcular_dia_pago(Quater):
    lista_q=Quater.split('-')
    mes=int(lista_q[1])
    year=int(lista_q[2])

    if Quater.find('Q1')!=-1:
       fecha_pago= datetime(year, mes,15)
        
       
    else:
        
        ultimo_dia_mes = calendar.monthrange(year, mes)[1]
        fecha_pago=datetime(year, mes, ultimo_dia_mes)
    
    return fecha_pago.date()
# Create your views here.

def index(request):
   
    
    return redirect('/home-page/12/12/')

def index_1(request, mensuales='12', liquidacion='12'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk)
                    qty=len(lista_clientes)
                    #permiso
                    colaboradores_pk_list=[]

                    if True: #permisos
                        #Vacaciones
                        colab_en_vacas=0
                        
                        colab_en_incap=0

                        colab_en_licen=0
                        colab_activos=0
                        hoy=datetime.now()

                        for obj_col in lista_clientes:
                            colaboradores_pk_list.append(obj_col.pk)
                             
                             # Filtrar los permisos del colaborador para la fecha específica
                            vacaciones_colaborador = Permisos.objects.filter( Colaborador_id=obj_col.pk,
                                            Dia_inicio_permiso__lte=hoy.date(),
                                             Dia_fin_permiso__gte=hoy.date(),
                                             Tipo_permiso='Vacaciones',Estado_Permiso='Aprobado'
                                                                        )

                            incap_colaborador = Permisos.objects.filter( Colaborador_id=obj_col.pk,
                                            Dia_inicio_permiso__lte=hoy.date(),
                                             Dia_fin_permiso__gte=hoy.date(),
                                             Tipo_permiso='Incapacidad',Estado_Permiso='Aprobado'
                                                                        )

                            licencia_colaborador = Permisos.objects.filter( Colaborador_id=obj_col.pk,
                                            Dia_inicio_permiso__lte=hoy.date(),
                                             Dia_fin_permiso__gte=hoy.date(),
                                             Tipo_permiso='Licencia Paga',Estado_Permiso='Aprobado'
                                                                        )
                            if len(vacaciones_colaborador)>0:
                                colab_en_vacas+=1
                            elif len(incap_colaborador)>0:
                                colab_en_incap+=1
                            elif len(licencia_colaborador)>0:
                                colab_en_licen+=1
                            else:
                                colab_activos+=1

                        lista_permisos=[colab_activos,colab_en_licen,colab_en_incap,colab_en_vacas]
                    
                    if True: #tardias
                        colaboradores_con_tardia = Hoja_tiempo.objects.filter(Colaborador_id__in=colaboradores_pk_list,Minutos_Tardia__gt=0,
                                                                              Dia_entrada__gte=hoy.date() - timedelta(days=30))
                        if len(colaboradores_con_tardia)>0:
                            min_tardia=0
                            rep_tardia=0
                            id_col_no_repetivos=[]
                            for obj_hoja_tiempo in colaboradores_con_tardia:
                                min_tardia+=obj_hoja_tiempo.Minutos_Tardia
                                rep_tardia+=1
                                if obj_hoja_tiempo.Colaborador.pk not in id_col_no_repetivos:
                                    id_col_no_repetivos.append(obj_hoja_tiempo.Colaborador.pk   )
                            
                            lista_tardia=[min_tardia,
                                         round(min_tardia/rep_tardia,2),
                                          rep_tardia,len(id_col_no_repetivos),round(min_tardia/60,2) ]
                        else:
                            lista_tardia=[0,0,0,0,0]  
                    
                    if True: #Sobretiempo
                        colaboradores_con_tardia = Hoja_tiempo.objects.filter(Colaborador_id__in=colaboradores_pk_list,Minutos_Trabajads__gt=F('Minutos_Trabajads_Jornada_Laboral'),
                                                                              Dia_entrada__gte=hoy.date() - timedelta(days=30))
                        if len(colaboradores_con_tardia)>0:
                            min_tardia=0
                            rep_tardia=0
                            id_col_no_repetivos=[]
                            for obj_hoja_tiempo in colaboradores_con_tardia:
                                min_tardia+=obj_hoja_tiempo.Minutos_Trabajads -  obj_hoja_tiempo.Minutos_Trabajads_Jornada_Laboral
                                rep_tardia+=1
                                if obj_hoja_tiempo.Colaborador.pk not in id_col_no_repetivos:
                                    id_col_no_repetivos.append(obj_hoja_tiempo.Colaborador.pk)
                            
                            lista_sobret=[min_tardia,
                                         round(min_tardia/rep_tardia,2),
                                          rep_tardia,len(id_col_no_repetivos),round(min_tardia/60,2) ]
                        else:
                            lista_sobret=[0,0,0,0,0]  
                    

                    return render(request, "index_supervisores.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj , 'qty':qty , 'lista_permisos':lista_permisos, 'lista_tardia':lista_tardia , 'lista_sobret':lista_sobret })


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    name='Steph'
    if request.method=='GET':
    
        #dia_actual=datetime(2020, 8 , 2)
        dia_actual=datetime.now()



        mes = dia_actual.month
        fecha = dia_actual.day
        year = dia_actual.year

        if fecha <= 10:
            codigo_planilla='Q1-'+str(mes)+'-'+str(year)
           
        elif fecha >= 26:
            if mes==12:
                mes_inicial=1
                year_inicial, year_final =year, year+1
            else:
                mes_inicial=mes+1
                
                year_inicial, year_final =year, year

            codigo_planilla='Q1-'+str(mes_inicial)+'-'+str(year_final)
           
        else:
            codigo_planilla='Q2-'+str(mes)+'-'+str(year)
            
        Quater_actual=codigo_planilla
        lista_Ultimos_Quater=lista_los_ultimos_quater(Quater_actual,6)
        lista_para_barra=lista_sueldo_netos_y_lista_colaborador(lista_Ultimos_Quater)

        lista_nro_Colaboradores=lista_para_barra[0]
        lista_sueldo_totales=lista_para_barra[1]

        ultima_quincena=lista_sueldo_totales[-1]
        penultima_quincena=lista_sueldo_totales[-2]
        lista_grafica_1=fun_maximos_porcentaje_sueldos(ultima_quincena, penultima_quincena)
        lista_grafica_2=fun_maximos_porcentaje(lista_nro_Colaboradores[-1], lista_nro_Colaboradores[-2])

        datos_bar = {
                    'label': '',
                    'labels': lista_Ultimos_Quater,
                    'datos': lista_sueldo_totales
                         }
        datos_linea = {
                    'label': 'Qty. Colaboradores',
                    'labels': lista_Ultimos_Quater,
                    'datos': lista_nro_Colaboradores
                         }
        
        if True: #Colaboradores
            lista_datos_grafica_3=fun_lista_datos_grafica_3(lista_nro_Colaboradores[-1],lista_Ultimos_Quater[-1], dia_actual )
        
        if True: #grafica anual
            
            lista_ultimos_12_meses=fun_lista_ultimo_meses_personalizados(dia_actual, int(mensuales))

            lista_fechas_estudio=lista_ultimos_12_meses[0]
            lista_label_fechas=lista_ultimos_12_meses[1]
            lista_datos_grafica_4=fun_lista_mes_sueldo(lista_fechas_estudio,'Total_general_sueldo')

            datos_bar_2 = {
                    'label': 'Comparativa Ultimos meses',
                    'labels': lista_label_fechas,
                    'datos': lista_datos_grafica_4
                         }

        if True: #liquidaciones anual
            lista_ultimos_12_meses=fun_lista_ultimo_meses_personalizados(dia_actual, int(liquidacion))
            
            lista_fechas_estudio=lista_ultimos_12_meses[0]
            lista_label_fechas_5=lista_ultimos_12_meses[1]
            lista_datos_grafica_5=fun_lista_mes_liquidaciones(lista_fechas_estudio,'Total_Liquidacion_Neta')
            

            datos_bar_5 = {
                    'label': 'Ultimos 12 Meses',
                    'labels': lista_label_fechas_5,
                    'datos': lista_datos_grafica_5
                         }

        if True: #persona de vacaciones

            activo_en_vacaciones= Permisos.objects.filter(Dia_inicio_permiso__gte=dia_actual.date(),Dia_fin_permiso__lte=dia_actual.date(), Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
            activo_en_licencia_paga= Permisos.objects.filter(Dia_inicio_permiso__gte=dia_actual.date(),Dia_fin_permiso__lte=dia_actual.date(), Tipo_permiso='Licencia Paga', Estado_Permiso='Aprobado')
            activo_incapacidades= Permisos.objects.filter(Dia_inicio_permiso__gte=dia_actual.date(),Dia_fin_permiso__lte=dia_actual.date(), Tipo_permiso='Incapacidad', Estado_Permiso='Aprobado')
            if len(activo_en_vacaciones)>0:
                num_vacaciones=len(activo_en_vacaciones)
            else:
                num_vacaciones=0
            
            if len(activo_en_licencia_paga)>0:
                num_licencia_paga=len(activo_en_licencia_paga)
            else:
                num_licencia_paga=0
            
            if len(activo_incapacidades)>0:
                num_incapacidad=len(activo_incapacidades)
            else:
                num_incapacidad=0

            num_colaboradores_activos=lista_datos_grafica_3[0]

            Colaboradores_disponibles= num_colaboradores_activos - num_vacaciones - num_licencia_paga - num_incapacidad 
            lista_labels_vacaciones=['Colaboradores Activos','Colaboradores en Vacaciones','Colaboradores con Incapacidad','Colaboradores con Licencia']
            lista_datos_vacaciones=[Colaboradores_disponibles,num_vacaciones, num_licencia_paga, num_incapacidad]
            doughnut_datasets_1 = {
                    'label': 'Relacion Permiso Activo dia de Hoy',
                    'labels': lista_labels_vacaciones,
                    'datos': lista_datos_vacaciones
                         }

        if True: #persona de vacaciones proximo dias
           
            f=15
            fecha_inicial = dia_actual + relativedelta(days=1)
            fecha_final = dia_actual + relativedelta(days=f)
            activo_en_vacaciones= Permisos.objects.filter(Dia_inicio_permiso__gte=fecha_inicial.date(),Dia_fin_permiso__lte=fecha_final.date(), Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
            activo_en_licencia_paga= Permisos.objects.filter(Dia_inicio_permiso__gte=fecha_inicial.date(),Dia_fin_permiso__lte=fecha_final.date(), Tipo_permiso='Licencia Paga', Estado_Permiso='Aprobado')
            activo_incapacidades= Permisos.objects.filter(Dia_inicio_permiso__gte=fecha_inicial.date(),Dia_fin_permiso__lte=fecha_final.date(), Tipo_permiso='Incapacidad', Estado_Permiso='Aprobado')
            if len(activo_en_vacaciones)>0:
                num_vacaciones=len(activo_en_vacaciones)
            else:
                num_vacaciones=0
            
            if len(activo_en_licencia_paga)>0:
                num_licencia_paga=len(activo_en_licencia_paga)
            else:
                num_licencia_paga=0
            
            if len(activo_incapacidades)>0:
                num_incapacidad=len(activo_incapacidades)
            else:
                num_incapacidad=0

            

            Colaboradores_disponibles_1= num_colaboradores_activos - num_vacaciones - num_licencia_paga - num_incapacidad 
            lista_labels_vacaciones_1=['Colaboradores Activos','Colaboradores en Vacaciones','Colaboradores con Incapacidad','Colaboradores con Licencia']
            lista_datos_vacaciones_1=[Colaboradores_disponibles_1,num_vacaciones, num_licencia_paga, num_incapacidad]
            doughnut_datasets_2 = {
                    'label': 'Relacion Permiso dentro '+str(f)+' Dias',
                    'labels': lista_labels_vacaciones_1,
                    'datos': lista_datos_vacaciones_1
                         }


            
            
            

        return render(request, "index_page.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'mensuales':mensuales, 'liquidacion':liquidacion,'doughnut_datasets_2':json.dumps(doughnut_datasets_2), 'doughnut_datasets_1':json.dumps(doughnut_datasets_1), 'datos_bar_5':json.dumps(datos_bar_5),'datos_bar_2':json.dumps(datos_bar_2), 'datos_bar': json.dumps(datos_bar),'datos_linea': json.dumps(datos_linea), 'lista_datos_grafica_3':lista_datos_grafica_3,'lista_grafica_2':lista_grafica_2, 'lista_grafica_1':lista_grafica_1, "name1":name, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def analisis_cliente(request , mensuales='12', cliente='0', buscador='0'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0

    lista_final=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)

    if request.method=='GET':

        if buscador=='0':
            buscador1='Total_general_sueldo'
        elif buscador=='1':
            buscador1='Pago_quincena_despues_descuento'
        elif buscador=='2':
            buscador1='Pago_Total_Sobretiempo_quincenal'
        elif buscador=='3':
            buscador1='Pago_Vacaciones'
        elif buscador=='4':
            buscador1='Pago_XIII_periodo_Bruto'

        elif buscador=='5':
            buscador1='Pago_total_bonos_sin_impuesto'
        elif buscador=='6':
            buscador1='Totales_patronales'
        elif buscador=='7':
            buscador1='MIN_Ausencia'
            

        lista_campos_filtrar=[[0,'Total Planilla ($)'],
                              [1,'Total Sueldo Bruto ($)'],
                              [2,'Total de Sobretiempo ($)'],
                              [3,'Vacaciones Brutas ($)'],
                              [4,'XIII Brutas ($)'],
                              [5,'Bonos/Viaticos ($)'],
                              [6,'Deducciones Patronales y Prov ($)'],
                              [7,'Minutos Ausencia dentro Jornada ( Min.)'],


            
        ]



        #dia_actual=datetime(2020, 6 , 18)
        dia_actual=datetime.now()

        cliente_id=cliente
        meses=mensuales

        if True: #GRAFICA Clientes

            lista_ultimos_12_meses=fun_lista_ultimo_meses_personalizados(dia_actual, int(meses))

            lista_fechas_estudio=lista_ultimos_12_meses[0]
            lista_label_fechas=lista_ultimos_12_meses[1]
            if cliente_id=='0':

                lista_datos_grafica_1=fun_lista_mes_sueldo_clientes(lista_fechas_estudio,buscador1,meses)
            else:
                lista_datos_grafica_1=fun_lista_mes_sueldo_clientes_especifico(lista_fechas_estudio,buscador1,meses, cliente)

            
        lista_de_planilla_cliente= Panilla_por_periodo_quincenal_clientes.objects.all()
        lista_cliente=[]
        lista_completa_cliente=[]
        for obj_planilla in lista_de_planilla_cliente:
            id_cliente=obj_planilla.Cliente.pk
            if id_cliente not in lista_cliente:
                nombre_empresa=obj_planilla.Cliente.nombre_empresa
                lista_cliente.append(id_cliente)
                lista_completa_cliente.append([id_cliente,nombre_empresa])

        lista_completa_cliente.insert(0,[0,'Todas las Cuentas'])

        max_value= lista_datos_grafica_1[2]

        lista_chart =lista_datos_grafica_1[1]
        data = {
            'labels': lista_label_fechas,
                'datasets':lista_datos_grafica_1[0]
                }
        
        

   
        
        return render(request, "analisis_clientes.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_campos_filtrar':lista_campos_filtrar,'lista_completa_cliente':lista_completa_cliente,'buscador':buscador,'mensuales':mensuales, 'cliente':cliente,'data': json.dumps(data),'max_value':max_value,'lista_chart':lista_chart,'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion), 'request':request.method})


def analisis_colaborador(request , mensuales='12', cliente='0', buscador='0'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0

    lista_final=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)

    if request.method=='GET':

        if buscador=='0':
            buscador1='Total_general_sueldo'
        elif buscador=='1':
            buscador1='Pago_quincena_despues_descuento'
        elif buscador=='2':
            buscador1='Pago_Total_Sobretiempo_quincenal'
        elif buscador=='3':
            buscador1='Pago_Vacaciones'
        elif buscador=='4':
            buscador1='Pago_XIII_periodo_Bruto'

        elif buscador=='5':
            buscador1='Pago_total_bonos_sin_impuesto'
        elif buscador=='6':
            buscador1='Totales_patronales'
        elif buscador=='7':
            buscador1='MIN_Ausencia'
            

        lista_campos_filtrar=[[0,'Total Planilla ($)'],
                              [1,'Total Sueldo Bruto ($)'],
                              [2,'Total de Sobretiempo ($)'],
                              [3,'Vacaciones Brutas ($)'],
                              [4,'XIII Brutas ($)'],
                              [5,'Bonos/Viaticos ($)'],
                              [6,'Deducciones Patronales y Prov ($)'],
                              [7,'Minutos Ausencia dentro Jornada ( Min.)'],


            
        ]



        #dia_actual=datetime(2020, 6 , 18)
        dia_actual=datetime.now()
        Quater_actual='Q2-6-2020'

        cliente_id=cliente
        meses=mensuales

        if True: #GRAFICA Clientes

            lista_ultimos_12_meses=fun_lista_ultimo_meses_personalizados(dia_actual, int(meses))

            lista_fechas_estudio=lista_ultimos_12_meses[0]
            lista_label_fechas=lista_ultimos_12_meses[1]
            if cliente_id=='0':

                lista_datos_grafica_1=fun_lista_mes_sueldo_colaboradores(lista_fechas_estudio,buscador1,meses)
            else:
                lista_datos_grafica_1=fun_lista_mes_sueldo_colaboradores_especifico(lista_fechas_estudio,buscador1,meses, cliente)

            
        lista_de_planilla_cliente= Panilla_por_periodo_quincenal.objects.all()
        lista_cliente=[]
        lista_completa_cliente=[]
        for obj_planilla in lista_de_planilla_cliente:
            id_cliente=obj_planilla.Colaborador.pk
            if id_cliente not in lista_cliente:
                nombre_empresa=obj_planilla.Colaborador.Colaborador_nombre+' '+obj_planilla.Colaborador.Colaborador_apellido
                lista_cliente.append(id_cliente)
                lista_completa_cliente.append([id_cliente,nombre_empresa])

        lista_completa_cliente.insert(0,[0,'Todas las Cuentas'])

    

        max_value= lista_datos_grafica_1[2]

        lista_chart =lista_datos_grafica_1[1]
        data = {
            'labels': lista_label_fechas,
                'datasets':lista_datos_grafica_1[0]
                }
        
        

   
        
        return render(request, "analisis_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_campos_filtrar':lista_campos_filtrar,'lista_completa_cliente':lista_completa_cliente,'buscador':buscador,'mensuales':mensuales, 'cliente':cliente,'data': json.dumps(data),'max_value':max_value,'lista_chart':lista_chart,'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion), 'request':request.method})


def test(request):
    name='Steph'
    if request.method=='GET':
        
        return render(request, "page_test.html", {"name1":name, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def inicio_empresa(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1

    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    name='Steph'
    if request.method=='GET':
        try:
            empresa = Info_Empresa.objects.get(id=1)
            #  ' 'representante_RRHH': ['steph tolozo'], 'correo_representante_RRHH': ['steph@tolozo.com']}>
            dict={'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'name_empresa':empresa.nombre_empresa,
            'cedula_juridica':empresa.Cedula_Juridica,
            'correo_empresa':empresa.Correo,
            'Direccion_empresa':empresa.Direccion,
            'Estado_empresa':empresa.Ciudad,
            'Telefono_empresa':empresa.Telefono,
            'web_empresa':empresa.Pagina_web,
            'representante':empresa.Representante,
            'correo_representante':empresa.Representante_email,
            'representante_RRHH':empresa.Encargado_RRHH,
            'correo_representante_RRHH':empresa.Encargado_RRHH_email,
            'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}




            return render(request, "inicio_empresa_creada.html",dict)
        except:
        
        
            return render(request, "inicio_empresa.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        #print(request.POST)


        name_empresa = request.POST["name_empresa"]
        cedula_juridica=request.POST["cedula_juridica"]

        correo_empresa=request.POST["correo_empresa"]
        Direccion_empresa=request.POST["Direccion_empresa"]
        Estado_empresa=request.POST["Estado_empresa"]
        Telefono_empresa=int(request.POST["Telefono_empresa"])
        web_empresa=request.POST["web_empresa"]
        representante=request.POST["representante"]
        correo_representante=request.POST["correo_representante"]
        representante_RRHH=request.POST["representante_RRHH"]
        correo_representante_RRHH=request.POST["correo_representante_RRHH"]


    
        created = Info_Empresa.objects.get_or_create(nombre_empresa=name_empresa, Cedula_Juridica=cedula_juridica , Direccion=Direccion_empresa, Ciudad=Estado_empresa, Telefono=Telefono_empresa,  Correo=correo_empresa, Pagina_web=web_empresa,Representante=representante,Representante_email=correo_representante,Encargado_RRHH=representante_RRHH,Encargado_RRHH_email=correo_representante_RRHH)
        # crear en la empresa
        created= Info_Clientes.objects.get_or_create(nombre_empresa=name_empresa ,
                                                Cedula_Juridica = cedula_juridica ,
                                                Codigo_cliente='000',
                                                Direccion =Direccion_empresa,
                                                Ciudad = 'Panama',
                                                Estado = Estado_empresa,
                                                Pais ='Panama',
    
                                                Telefono = Telefono_empresa,
                                                Correo = correo_empresa,
                                                Pagina_web = web_empresa,
                                                Representante = representante,
                                                Representante_email = correo_representante,
                                                status = 'Activo')
        return redirect('inicio-empresa/')

def inicio_clientes(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
           
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        try:
            
            lista_clientes=Info_Clientes.objects.all()
            for i in range(len(lista_clientes)):
                lista=[i+1,
                        lista_clientes[i].nombre_empresa,
                        lista_clientes[i].Cedula_Juridica ,
                        lista_clientes[i].Codigo_cliente,
                        lista_clientes[i].Direccion,
                        lista_clientes[i].Ciudad ,
                        lista_clientes[i].Estado,
                        lista_clientes[i].Pais ,
                        lista_clientes[i].Zip_code ,
                        lista_clientes[i].Telefono ,
                        lista_clientes[i].Correo ,
                        lista_clientes[i].Pagina_web,
                        lista_clientes[i].Representante,
                        lista_clientes[i].status
                        
                        ]
                lista_final.append(lista)
            
            if len(lista_final)==0:
                    lista=['0',
                   'Cliente No Registrado',
                        'Sin Registrar',
                        'Sin Registrar' ,
                        'Sin Registrar',
                        'Sin Registrar',
                        'Sin Registrar' ,
                        'Sin Registrar',
                        'Sin Registrar' ,
                        'Sin Registrar' ,
                        'Sin Registrar' ,
                        'Sin Registrar' ,
                        'Sin Registrar',
                        'Sin Registrar',
                        'Sin Registrar'
                        ]
                    lista_final.append(lista)


            
        except:
           

            lista=['0',
                   'Cliente No Registrado',
                        'Sin Registrar',
                        'Sin Registrar' ,
                        'Sin Registrar',
                        'Sin Registrar',
                        'Sin Registrar' ,
                        'Sin Registrar',
                        'Sin Registrar' ,
                        'Sin Registrar' ,
                        'Sin Registrar' ,
                        'Sin Registrar' ,
                        'Sin Registrar',
                        'Sin Registrar',
                        'Sin Registrar'
                        ]
            lista_final.append(lista)

        
        return render(request, "inicio_clientes.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())


        name_empresa = request.POST["name_empresa"]
        cedula_juridica=request.POST["cedula_juridica"]
        codigo_cliente=request.POST["codigo_cliente"]
        correo_empresa=request.POST["correo_empresa"].lower()
        Direccion_empresa=request.POST["Direccion_empresa"]
        Estado_empresa=request.POST["Estado_empresa"]
        Telefono_empresa=int(request.POST["Telefono_empresa"])
        if 'web_empresa' in values:
            web_empresa=request.POST["web_empresa"]
        else:
            web_empresa='https://www.sinpaginaweb.com'

        representante=request.POST["representante"]
        correo_representante=request.POST["correo_representante"].lower()
        status=request.POST["status"]
        


    
        created = Info_Clientes.objects.get_or_create(nombre_empresa=name_empresa, Codigo_cliente= codigo_cliente, Cedula_Juridica=cedula_juridica , Direccion=Direccion_empresa, Ciudad=Estado_empresa, Telefono=Telefono_empresa,  Correo=correo_empresa, Pagina_web=web_empresa,Representante=representante,Representante_email=correo_representante, status=status)

        if True: #guardar Novedades
            tipo_seguimiento='Clientes'
            sUB_Tipo_seguimiento=' Creacion'
            comment=' Creacion Cliente: '+name_empresa+' Codigo Cliente: '+codigo_cliente
            fecha_novedad_date=datetime.now()
            fecha_novedad=fecha_novedad_date.date()
            hora_actual = fecha_novedad_date.strftime('%H:%M')

            if es_admin:

                novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                            SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                            comentario= comment ,
                                                            Fecha_novedad=fecha_novedad ,
                                                            hora_novedad=hora_actual 
                                                                                )
            else:
                novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                            SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                            comentario= comment ,
                                                            Fecha_novedad=fecha_novedad ,
                                                            hora_novedad=hora_actual ,
                                                            Colaborador= user_profile_obj.Colaborador
                                                                                )
    

        return redirect('clientes/')

def agregar_colaborador(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1

    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_supervisores=[]
        lista_clientes=Colaboradores.objects.all()
        for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])
        
        id_empresa=1
        lista_departamento=Departamento_Empresa.objects.filter(Empresa_id=id_empresa)

        
        return render(request, "agregar_colaborador.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_departamento':lista_departamento, 'lista_supervisores':lista_supervisores, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        try:
            print(request.POST)
            
            id_empresa=1
            lista_departamento=Departamento_Empresa.objects.filter(Empresa_id=id_empresa)
            values= list(request.POST.keys())

            tipo_documento=request.POST["tipo_documento"]
            nro_Identificacion=request.POST["Nro_Identificacion"]
            nro_Identificacion=nro_Identificacion.replace(' ','')
            name_colaborador=request.POST["name_colaborador"]
            lastname_colaborador=request.POST["lastname_colaborador"]
            nro_Seguro_Social=request.POST["nro_Seguro_Social"]
            correo=request.POST["correo"]
            Telefono_empresa=request.POST["Telefono_empresa"]
            sexo=request.POST["sexo"]
            fecha_nacimiento=request.POST["fecha_nacimiento"]
            estado_civil=request.POST["estado_civil"]
            hijos=int(request.POST["hijos"])
            licencia_conducir=request.POST["licencia_conducir"]
            posee_vehiculo=request.POST["posee_vehiculo"]
            direccion_empresa=request.POST["Direccion_empresa"]
            estado_empresa=request.POST["Estado_empresa"]
            profesion=request.POST["profesion"]
            cargo=request.POST["cargo"]
            departamento=request.POST["departamento"]
            tipo_contrato=request.POST["tipo_contrato"]
            fecha_ingreso=request.POST["fecha_ingreso"]
            fecha_egreso=request.POST["fecha_egreso"]
            hora_entrada=request.POST["hora_entrada"]
            hora_salida=request.POST["hora_salida"]
            dia_descanso_1=int(request.POST["dia_descanso_1"])
            dia_descanso_2=int(request.POST["dia_descanso_2"])
            almuerzo_aplica=request.POST["almuerzo_aplica"]
            if almuerzo_aplica=='Si':
                almuerzo_aplica=True
            else:
                almuerzo_aplica=False
            inicio_Almuerzo=request.POST["inicio_Almuerzo"]
            jornada_diaria=float(request.POST["jornada_diaria"])
            jornada_semanal=int(request.POST["jornada_semanal"])
            tipo_jornada=request.POST["tipo_jornada"]
            forma_pago=request.POST["forma_pago"]
            tipo_cuenta=request.POST["tipo_cuenta"]
            banco_nombre=request.POST["banco_nombre"]
            nro_cuenta_banco=int(request.POST["nro_cuenta_banco"])
            nombre_urgencia=request.POST["nombre_urgencia"]
            telefono_urgencia=request.POST["telefono_urgencia"]
            status=request.POST["status"]
            sueldo=float(request.POST["sueldo"])
            supervisor=int(request.POST["supervisor"])
            archivos = list(request.FILES.keys())
            bool_Jornada_HR_Semanal=request.POST["bool_Jornada_HR_Semanal"]
            if bool_Jornada_HR_Semanal=='Si':
                bool_Jornada_HR_Semanal=True
            else:
                bool_Jornada_HR_Semanal=False
            
            if 'archivo' in archivos :
                colaborador_id=len(Colaboradores.objects.all())
                
                archivo_imagen = request.FILES["archivo"]
                # Generar un nuevo nombre de archivo utilizando el nombre original
                nombre_original, extension = os.path.splitext(archivo_imagen.name)
                empresa='GoCleaning/'
                subpath=empresa+'Colaborador/imagen/'
                # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
                nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta

                archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
                #archivo_url = default_storage.url(archivo_guardado)
            
            

            
            else:
                archivo_guardado='no_hay_archivo.jpg'
                


            if supervisor==1:
                print('estoy en supervisor')
                if True:
                    print('Jornada_Laboral_Equitativa_Semanal',bool_Jornada_HR_Semanal, 'imagen',archivo_guardado, 'Colaborador_nombre',name_colaborador, 'Colaborador_apellido', lastname_colaborador, 'Tipo_documento',tipo_documento,'Nro_Identificacion', nro_Identificacion,'Nro_Seguro_Social',nro_Seguro_Social, 'Direccion' , direccion_empresa,'Ciudad' , estado_empresa, 'Telefono' , Telefono_empresa, 'Correo' , correo, 'Profesion' , profesion, 'Cargo',cargo, 'Departamento',departamento,'Tipo_contrato',tipo_contrato, 'Tipo_pago',forma_pago, 'Sueldo',sueldo,'Nombre_Banco',banco_nombre,'Tipo_cuenta',tipo_cuenta,'Nro_cuenta',nro_cuenta_banco,'Fecha_Ingreso',fecha_ingreso,'Fecha_Egreso',fecha_egreso,'Contanto_Urgencia' , nombre_urgencia,'Telefono_Urgencia' , telefono_urgencia, 'Status' , status,'Hora_entrada',hora_entrada,'Hora_salida',hora_salida,'Dia_descanso_1', dia_descanso_1,'Dia_descanso_2', dia_descanso_2,'Almuerzo_bool', almuerzo_aplica, 'Inicio_Hora_Almuerzo',inicio_Almuerzo,'Jornada_diaria',jornada_diaria,'Jornada_semanal',jornada_semanal,'Tipo_Jornada',tipo_jornada,'Sexo',sexo,'Fecha_nacimiento',fecha_nacimiento,'Estado_civil',estado_civil, 'Nro_Hijos',hijos, 'Posee_Licencia_Vehicular',licencia_conducir,'Posee_Carro_Vehicular',posee_vehiculo)
            
            
                created = Colaboradores.objects.create(Jornada_Laboral_Equitativa_Semanal=bool_Jornada_HR_Semanal, imagen=archivo_guardado, Colaborador_nombre=name_colaborador, Colaborador_apellido= lastname_colaborador, Tipo_documento=tipo_documento,Nro_Identificacion= nro_Identificacion,Nro_Seguro_Social=nro_Seguro_Social, Direccion = direccion_empresa,Ciudad = estado_empresa, Telefono = Telefono_empresa, Correo = correo, Profesion = profesion, Cargo=cargo, Departamento=departamento,Tipo_contrato=tipo_contrato, Tipo_pago=forma_pago, Sueldo=sueldo,Nombre_Banco=banco_nombre,Tipo_cuenta=tipo_cuenta,Nro_cuenta=nro_cuenta_banco,Fecha_Ingreso=fecha_ingreso,Fecha_Egreso=fecha_egreso,Contanto_Urgencia = nombre_urgencia,Telefono_Urgencia = telefono_urgencia, Status = status,Hora_entrada=hora_entrada,Hora_salida=hora_salida,Dia_descanso_1= dia_descanso_1,Dia_descanso_2= dia_descanso_2,Almuerzo_bool= almuerzo_aplica, Inicio_Hora_Almuerzo=inicio_Almuerzo,Jornada_diaria=jornada_diaria,Jornada_semanal=jornada_semanal,Tipo_Jornada=tipo_jornada,Sexo=sexo,Fecha_nacimiento=fecha_nacimiento,Estado_civil=estado_civil, Nro_Hijos=hijos, Posee_Licencia_Vehicular=licencia_conducir,Posee_Carro_Vehicular=posee_vehiculo)
            
            else:
                supervisor_instance= Colaboradores.objects.get(pk=supervisor)
                created = Colaboradores.objects.create(Jornada_Laboral_Equitativa_Semanal=bool_Jornada_HR_Semanal, imagen=archivo_guardado, Colaborador_nombre=name_colaborador, Colaborador_apellido= lastname_colaborador, Tipo_documento=tipo_documento,Nro_Identificacion= nro_Identificacion,Nro_Seguro_Social=nro_Seguro_Social, Direccion = direccion_empresa,Ciudad = estado_empresa, Telefono = Telefono_empresa, Correo = correo, Profesion = profesion, Cargo=cargo, Departamento=departamento,Tipo_contrato=tipo_contrato, Tipo_pago=forma_pago, Sueldo=sueldo,Nombre_Banco=banco_nombre,Tipo_cuenta=tipo_cuenta,Nro_cuenta=nro_cuenta_banco,Fecha_Ingreso=fecha_ingreso,Fecha_Egreso=fecha_egreso,Contanto_Urgencia = nombre_urgencia,Telefono_Urgencia = telefono_urgencia, Status = status,Hora_entrada=hora_entrada,Hora_salida=hora_salida,Dia_descanso_1= dia_descanso_1,Dia_descanso_2= dia_descanso_2,Almuerzo_bool= almuerzo_aplica, Inicio_Hora_Almuerzo=inicio_Almuerzo,Jornada_diaria=jornada_diaria,Jornada_semanal=jornada_semanal,Tipo_Jornada=tipo_jornada,Sexo=sexo,Fecha_nacimiento=fecha_nacimiento,Estado_civil=estado_civil, Nro_Hijos=hijos, Posee_Licencia_Vehicular=licencia_conducir,Posee_Carro_Vehicular=posee_vehiculo, Supervisor=supervisor_instance)
            
            if True: #guardar Novedades
                tipo_seguimiento='Colaborador'
                sUB_Tipo_seguimiento=' Creacion'
                comment=' Creacion Colaborador : '+name_colaborador+' '+lastname_colaborador+' Nro Identificacion: '+nro_Identificacion
                fecha_novedad_date=datetime.now()
                fecha_novedad=fecha_novedad_date.date()
                hora_actual = fecha_novedad_date.strftime('%H:%M')
                
                if es_admin:

                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual 
                                                                                    )
                else:
                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual ,
                                                                Colaborador= user_profile_obj.Colaborador
                                                                                    )
        
            
                

            lista_supervisores=[]
            lista_clientes=Colaboradores.objects.all()
            for lista in lista_clientes:
                value=lista.pk
                nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
                lista_supervisores.append([value,nombre])

            return render(request, "agregar_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'agregado':'existo','colaborador':name_colaborador+' '+lastname_colaborador, 'lista_departamento':lista_departamento, 'lista_supervisores':lista_supervisores, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        except Exception as e:
            print("Se produjo una excepción:", type(e).__name__, "-", e)
            # Imprimir la información de la traza de la excepción
            traceback.print_exc()
            print(traceback.print_exc(), 'print')
            print("Archivo:", e.__traceback__.tb_frame.f_code.co_filename)
            print("Línea:", e.__traceback__.tb_lineno)

def previsualisar_colaboradores(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        lista_clientes=Colaboradores.objects.all()

        if nivel >=4:
                
                
                lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk)

        else:

                lista_clientes=Colaboradores.objects.all()

        for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                        lista_clientes[i].Status ,
                        lista_clientes[i].Nro_Identificacion,
                        lista_clientes[i].Colaborador_nombre ,
                        lista_clientes[i].Colaborador_apellido,
                        lista_clientes[i].Cargo,
                        lista_clientes[i].Departamento ,
                        lista_clientes[i].Tipo_contrato,
                        lista_clientes[i].Tipo_Jornada,
                        lista_clientes[i].Sueldo ,
                        lista_clientes[i].Telefono,
                        lista_clientes[i].imagen
                        
                        
                        
                        ]
                lista_final.append(lista)
        
        
        return render(request, "previsualizar_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,  'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
def previsualisar_colaboradores_1(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        if nivel >=4:
                
                
                lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk)

        else:

                lista_clientes=Colaboradores.objects.all()
        for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                        lista_clientes[i].Status ,
                        lista_clientes[i].Nro_Identificacion,
                        lista_clientes[i].Colaborador_nombre ,
                        lista_clientes[i].Colaborador_apellido,
                        lista_clientes[i].Cargo,
                        lista_clientes[i].Departamento ,
                        lista_clientes[i].Tipo_contrato,
                        lista_clientes[i].Tipo_Jornada,
                        lista_clientes[i].Sueldo ,
                        lista_clientes[i].Telefono ,
                        lista_clientes[i].imagen
                        
                        
                        
                        ]
                lista_final.append(lista)
        
        
        return render(request, "previsualizar_colaborador_1.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    

def modificar_colaboradores(request,  searched='1'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_supervisores=[]
    lista_clientes=Colaboradores.objects.all()
    for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])

    if request.method=='GET':
        lista_final=[]
        Colaborador_obj=Colaboradores.objects.get(pk=int(searched))
        id_empresa=1
        lista_departamento=Departamento_Empresa.objects.filter(Empresa_id=id_empresa)
        
        
        
        return render(request, "modificar_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,'lista_departamento':lista_departamento, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'Colaborador_obj':Colaborador_obj, 'lista_supervisores':lista_supervisores ,'searched':searched})
    
    
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())
        archivos = list(request.FILES.keys())
        colaborador_id=int(request.POST["coldaborador_id"])
        Colaborador_obj=Colaboradores.objects.get(pk=colaborador_id)

        if 'tipo_documento' in values:
            var=request.POST["tipo_documento"]
            if var!= 'Seleccione':
                Colaborador_obj.Tipo_documento=var
                Colaborador_obj.save()
        
        if 'Nro_Identificacion' in values:
            var=request.POST["Nro_Identificacion"]
            if var!= '':
                Colaborador_obj.Nro_Identificacion=var
                Colaborador_obj.save() 
        
        if 'name_colaborador' in values:
            var=request.POST["name_colaborador"]
            if var!= '':
                Colaborador_obj.Colaborador_nombre=var
                Colaborador_obj.save() 
        
        if 'lastname_colaborador' in values:
            var=request.POST["lastname_colaborador"]
            if var!= '':
                Colaborador_obj.Colaborador_apellido=var
                Colaborador_obj.save() 
        
        if 'nro_Seguro_Social' in values:
            var=request.POST["nro_Seguro_Social"]
            if var!= '':
                Colaborador_obj.Nro_Seguro_Social=var
                Colaborador_obj.save() 
        
        if 'correo' in values:
            var=request.POST["correo"]
            if var!= '':
                Colaborador_obj.Correo=var
                Colaborador_obj.save() 
        
        if 'Telefono_empresa' in values:
            var=request.POST["Telefono_empresa"]
            if var!= '':
                Colaborador_obj.Telefono=var
                Colaborador_obj.save()
        
        if 'sexo' in values:
            var=request.POST["sexo"]
            if var!= 'Seleccione':
                Colaborador_obj.Sexo=var
                Colaborador_obj.save()
        
        if 'fecha_nacimiento' in values:
            var=request.POST["fecha_nacimiento"]
           
            if var!= '':
                Colaborador_obj.Fecha_nacimiento=var
                Colaborador_obj.save()

        if 'estado_civil' in values:
            var=request.POST["estado_civil"]
            if var!= 'Seleccione':
                Colaborador_obj.Estado_civil=var
                Colaborador_obj.save()

        if 'hijos' in values:
            var=request.POST["hijos"]
            if var!= 'Seleccione':
                Colaborador_obj.Nro_Hijos=int(var)
                Colaborador_obj.save()
        
        if 'licencia_conducir' in values:
            var=request.POST["licencia_conducir"]
            if var!= 'Seleccione':
                Colaborador_obj.Posee_Licencia_Vehicular=var
                Colaborador_obj.save()
        
        if 'posee_vehiculo' in values:
            var=request.POST["posee_vehiculo"]
            if var!= 'Seleccione':
                Colaborador_obj.Posee_Carro_Vehicular=var
                Colaborador_obj.save()

        if 'Direccion_empresa' in values:
            var=request.POST["Direccion_empresa"]
            if var!= '':
                Colaborador_obj.Direccion=var
                Colaborador_obj.save()
        
        if 'Estado_empresa' in values:
            var=request.POST["Estado_empresa"]
            if var!= 'Seleccione':
                Colaborador_obj.Ciudad=var
                Colaborador_obj.save()
        
        if 'profesion' in values:
            var=request.POST["profesion"]
            if var!= '':
                Colaborador_obj.Profesion=var
                Colaborador_obj.save()

        if 'cargo' in values:
            var=request.POST["cargo"]
            if var!= '':
                Colaborador_obj.Cargo=var
                Colaborador_obj.save()
        
        if 'departamento' in values:
            var=request.POST["departamento"]
            if var!= 'Seleccione':
                Colaborador_obj.Departamento=var
                Colaborador_obj.save()

        if 'tipo_contrato' in values:
            var=request.POST["tipo_contrato"]
            if var!= 'Seleccione':
                Colaborador_obj.Tipo_contrato=var
                Colaborador_obj.save()
        
        if 'fecha_ingreso' in values:
            var=request.POST["fecha_ingreso"]
            
            if var!= '':
                Colaborador_obj.Fecha_Ingreso=var
                Colaborador_obj.save()
        
        if 'fecha_egreso' in values:
            var=request.POST["fecha_egreso"]
            if var!= '':
                Colaborador_obj.Fecha_Egreso=var
                Colaborador_obj.save()
    
        if 'hora_entrada' in values:
            var=request.POST["hora_entrada"]
            if var!= '':
                Colaborador_obj.Hora_entrada=var
                Colaborador_obj.save()
        
        if 'hora_salida' in values:
            var=request.POST["hora_salida"]
            if var!= '':
                Colaborador_obj.Hora_salida=var
                Colaborador_obj.save()
    
        if 'dia_descanso_1' in values:
            var=request.POST["dia_descanso_1"]
            if var!= 'Seleccione':
                Colaborador_obj.Dia_descanso_1=int(var)
                Colaborador_obj.save()
        
        if 'dia_descanso_2' in values:
            var=request.POST["dia_descanso_2"]
            if var!= 'Seleccione':
                Colaborador_obj.Dia_descanso_2=int(var)
                Colaborador_obj.save()
        
        if 'almuerzo_aplica' in values:
            var=request.POST["almuerzo_aplica"]
            if var!= 'Seleccione':
                if var=='Si':
                    var=True
                else:
                    var=False
                Colaborador_obj.Almuerzo_bool=var
                Colaborador_obj.save()

        if 'bool_Jornada_HR_Semanal' in values:
            var=request.POST["bool_Jornada_HR_Semanal"]
            if var!= 'Seleccione':
                if var=='Si':
                    var=True
                else:
                    var=False
                Colaborador_obj.Jornada_Laboral_Equitativa_Semanal=var
                Colaborador_obj.save()
       
        if 'inicio_Almuerzo' in values:
            var=request.POST["inicio_Almuerzo"]
            if var!= 'Seleccione':
                Colaborador_obj.Inicio_Hora_Almuerzo=var
                Colaborador_obj.save()
        
        if 'jornada_diaria' in values:
            var=request.POST["jornada_diaria"]
            if var!= '':
                Colaborador_obj.Jornada_diaria=int(var)
                Colaborador_obj.save()
        
        if 'jornada_semanal' in values:
            var=request.POST["jornada_semanal"]
            if var!= '':
                Colaborador_obj.Jornada_semanal=int(var)
                Colaborador_obj.save()
        
        if 'tipo_jornada' in values:
            var=request.POST["tipo_jornada"]
            if var!= 'Seleccione':
                Colaborador_obj.Tipo_Jornada=var
                Colaborador_obj.save()
        
        if 'forma_pago' in values:
            var=request.POST["forma_pago"]
            if var!= 'Seleccione':
                Colaborador_obj.Tipo_pago=var
                Colaborador_obj.save()
        
        if 'tipo_cuenta' in values:
            var=request.POST["tipo_cuenta"]
            if var!= 'Seleccione':
                Colaborador_obj.Tipo_cuenta=var
                Colaborador_obj.save()
        
        if 'banco_nombre' in values:
            var=request.POST["banco_nombre"]
            if var!= 'Seleccione':
                Colaborador_obj.Nombre_Banco=var
                Colaborador_obj.save()
        
        if 'nro_cuenta_banco' in values:
            var=request.POST["nro_cuenta_banco"]
            if var!= '':
                Colaborador_obj.Nro_cuenta=int(var)
                Colaborador_obj.save()
        
        if 'nombre_urgencia' in values:
            var=request.POST["nombre_urgencia"]
            if var!= '':
                Colaborador_obj.Contanto_Urgencia=var
                Colaborador_obj.save()
        
        if 'telefono_urgencia' in values:
            var=request.POST["telefono_urgencia"]
            if var!= '':
                Colaborador_obj.Telefono_Urgencia=var
                Colaborador_obj.save()
        
        if 'status' in values:
            var=request.POST["status"]
            if var!= 'Seleccione':
                Colaborador_obj.Status=var
                Colaborador_obj.save()
        
        if 'sueldo' in values:
            var=request.POST["sueldo"]
            if var!= '':
                Colaborador_obj.Sueldo=float(var)
                Colaborador_obj.save()

        if 'supervisor' in values:
            var=request.POST["supervisor"]
            if var!= 'Seleccione':
                supervisor_instance= Colaboradores.objects.get(pk=int(var))
                Colaborador_obj.Supervisor=supervisor_instance
                Colaborador_obj.save()
        
        
        if 'archivo' in archivos :
            
            archivo_imagen = request.FILES["archivo"]
            # Generar un nuevo nombre de archivo utilizando el nombre original
            nombre_original, extension = os.path.splitext(archivo_imagen.name)
            empresa='GoCleaning/'
            subpath=empresa+'Colaborador/imagen/'
            # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
            nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta

            archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
            #archivo_url = default_storage.url(archivo_guardado)
        
            Colaborador_obj.imagen=archivo_guardado
            Colaborador_obj.save()

        if True: #guardar Novedades
            tipo_seguimiento='Colaborador'
            sUB_Tipo_seguimiento=' Modifico'
            comment=' Creacion Colaborador : '+Colaborador_obj.Colaborador_nombre+' '+Colaborador_obj.Colaborador_apellido+' Nro Identificacion: '+Colaborador_obj.Nro_Identificacion
            fecha_novedad_date=datetime.now()
            fecha_novedad=fecha_novedad_date.date()
            hora_actual = fecha_novedad_date.strftime('%H:%M')
            
            if es_admin:

                novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                            SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                            comentario= comment ,
                                                            Fecha_novedad=fecha_novedad ,
                                                            hora_novedad=hora_actual 
                                                                                )
            else:
                novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                            SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                            comentario= comment ,
                                                            Fecha_novedad=fecha_novedad ,
                                                            hora_novedad=hora_actual ,
                                                            Colaborador= user_profile_obj.Colaborador
                                                                                )
    
        return redirect('ver_colaborador_Individual/', searched=str(colaborador_id))

def ver_colaboradores(request,  searched='1'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_supervisores=[]
    lista_clientes=Colaboradores.objects.all()
    for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])

    if request.method=='GET':
        lista_final=[]
        Colaborador_obj=Colaboradores.objects.get(pk=int(searched))
        lista_ajuste=Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=int(searched))
        lista_permiso=Permisos.objects.filter(Colaborador__pk=int(searched))
        lista_acreedor=Acreedores.objects.filter(Colaborador__pk=int(searched))
        lista_sueldo_importaciones=SIPE_Mensual.objects.filter(nro_identificacion=Colaborador_obj.Nro_Identificacion)
        foto=Colaborador_obj.imagen
        #print(settings.MEDIA_ROOT, foto)
        
        
        
        return render(request, "ver_detalles_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'Colaborador_obj':Colaborador_obj, 'lista_supervisores':lista_supervisores , 'lista_ajustes':lista_ajuste , 'lista_permiso':lista_permiso , 'lista_acreedor':lista_acreedor , 'pk_colaborador':searched, 'foto':foto, 'lista_sueldo_importaciones':lista_sueldo_importaciones})

def ver_contrato_trabajo(request,  searched='1'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_supervisores=[]
    lista_clientes=Colaboradores.objects.all()
    for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])

    if request.method=='GET':
        lista_final=[]
        Colaborador_obj=Colaboradores.objects.get(pk=int(searched))
        
        doc = Document()
        if Colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
            Contrato='CONTRATO DE TRABAJO POR TIEMPO INDEFINIDO\n'
        else:
            Contrato='CONTRATO DE TRABAJO POR TIEMPO DEFINIDO\n'

        

        encabezado = doc.add_heading(Contrato, level=1)
        encabezado.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        encabezado_run = encabezado.runs[0]
        encabezado_run.font.color.rgb = RGBColor(0, 0, 0)  # Color negro

        if True:#  1er parafffo  Nombres y detalles de las partes
            hoy=datetime.now()
            empleador_nombre = 'DABINDRANATH RIVERA'
            empleador_cedula = '8-513-548'
            trabajador_nombre = Colaborador_obj.Colaborador_nombre+' '+Colaborador_obj.Colaborador_apellido
            trabajador_cedula = Colaborador_obj.Nro_Identificacion
            trabajador_direccion =   Colaborador_obj.Direccion
            trabajador_ciudad =  Colaborador_obj.Ciudad
            string_fecha_naci=Colaborador_obj.Fecha_nacimiento
            lista_nac=string_fecha_naci.split('-')
            date_fecha_naci=datetime(int(lista_nac[0]),int(lista_nac[1]), int(lista_nac[2]))
            edad=str_sacar_edad( date_fecha_naci.date() , hoy.date())
            estado_civil=Colaborador_obj.Estado_civil
            if Colaborador_obj.Tipo_documento =='pasaporte':
                tipo_identificacion='pasporte'
            else:
                tipo_identificacion='CIP'

            if Colaborador_obj.Sexo=='Masculino':
                sexo='varón'
                estado_civil=estado_civil.replace('o(a)','o')
            else:
                sexo='mujer'
                estado_civil=estado_civil.replace('o(a)','a')

            texto_contrato = """
    \nEntre los suscritos a saber {empleador_nombre}, Varón, panameño, mayor de edad, con cédula de identidad personal número {empleador_cedula}, y actuando en su condición de Representante Legal de la Empresa GO SERVICES,S.A. según consta en registro Único de contribuyente # 155600705-2-2015, quien en adelante se denominará EL EMPLEADOR, por una parte y por la otra {trabajador_nombre} , {sexo}, panameño, de {edad} de edad, {estado_civil}, con {tipo_identificacion} {trabajador_cedula}, con domicilio en {trabajador_direccion} ciudad {trabajador_ciudad}, quien en adelante se denominará EL TRABAJADOR, se acuerda el presente contrato basado en las siguientes Cláusulas:
    """.format(empleador_nombre=empleador_nombre,
            empleador_cedula=empleador_cedula,
            trabajador_nombre=trabajador_nombre,
            trabajador_cedula=trabajador_cedula,
            trabajador_direccion=trabajador_direccion ,
            trabajador_ciudad=trabajador_ciudad ,
            sexo=sexo,
            edad =edad,
            tipo_identificacion=tipo_identificacion,
            estado_civil=estado_civil
            )
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['GO', 'SERVICES,S.A.']
            string_bold=trabajador_nombre.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        

        if True: #segundo parrafo
             
            texto='PRIMERA: Al tenor de lo dispuesto en el ordinal 2 del Artículo 68 del Código de trabajo EL TRABAJADOR deja constancia de que las siguientes personas viven con él:'
            paragraph = doc.add_paragraph(texto)
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True: #tercer parrafo
            # Agregar tabla
            tabla = doc.add_table(rows=3, cols=3)
            tabla.style = None  # Estilo de la tabla
            fila1 = tabla.rows[0].cells
            fila1[0].text = 'NOMBRE'
            fila1[1].text = 'PARENTESCO'
            fila1[2].text = 'EDAD'
            fila2 = tabla.rows[1].cells
            fila2[0].text = 'AMINTA DE RAMOS'
            fila2[1].text = 'MADRE'
            fila2[2].text = '55 AÑOS'
            fila3 = tabla.rows[2].cells
            fila3[0].text = 'LUIS RAMOS'
            fila3[1].text = 'PADRE' 
            fila3[2].text = '60 AÑOS'

        if True:#  4TO parafffo 
            
            trabajador_cargo = Colaborador_obj.Cargo
            

            texto_contrato = """
    \nSEGUNDA: EL TRABAJADOR se compromete a prestar sus servicios como {trabajador_cargo} , cuyas funciones generales son:
    """.format(trabajador_cargo=trabajador_cargo)
            
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['SEGUNDA:']
            string_bold=trabajador_cargo.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  5TO parafffo 
           

            texto_contrato = """
    \n\tLIMPIEZA GENERAL DIARIA 
    """.format(trabajador_cargo=trabajador_cargo)
            
            paragraph = doc.add_paragraph()
            LISTA_BOLD=[]
            string_bold='LIMPIEZA GENERAL DIARIA'.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  6TO parafffo 

           
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpieza de áreas comunes de pabellones A,B,C,D,E, a saber: Portales en planta baja (PB) y planta alta (PA) de pabellones, Sub Estación, Visitas Mediana y  Salud PB/PA, Visitas Mínima y  Salud PB/PA, Salones de Educación Mediana Seg. PB, Educación Minima Seg. PB, Area de deportes (Canchas, gimnasios, etc), Sub Estación, Salones de Visitas  y  Salud PB/PA Prelibertad, Visitas Mínima  y  Salud PB/PA, Educación Prelibertad, CONTROL DE ACCESO, PB ATENCION A VISITAS, CLASIFICACION, MANTENIMIENTO, ALOJAMIENTO 1, 2, 3.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpieza de mobiliario: Retirar el polvo de mesas, máquinas, anaqueles, perfiles de ventanas, puertas, molduras, repisas, sillas, archivadores, tableros, escritorios y computadoras.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpieza de mobiliario aéreo: Muebles modulares de pared, rieles de techo, parillas de salida del aire acondicionado, abanicos, limpieza de persianas y cenefas.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpieza de Pisos: Barrer y trapear según las necesidades de cada tipo de piso, el área interna de las instalaciones y sus alrededores inmediatos (vestíbulos, pasillos, escaleras, estacionamientos, terrazas, etc.). Limpieza de zócalos. Retirar goma de mascar cada vez que barre. Use la espátula.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Aspirar alfombras, mamparas modulares, sillas y sillones.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpiar y desinfectar equipo de comunicación: teléfonos, radios, faxes, intercoms, cámaras de vigilancias y televisores. Así mismo especial atención (Utilice solo plumeros) a centros de copiado y equipo audiovisual.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpieza de Sanitarios: Lavar y desinfectar los servicios sanitarios y orinales, lavar los lavamanos, lavar y pulir las fuentes de agua y limpiar toda la ferretería con productos bactericidas y bacteriostáticos. Lavar y pulir los espejos. Colocar papel higiénico, papel toalla y jabones de tocador. ")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Limpiar vidrios de puertas y ventanas. Limpiar los perfiles y rieles.")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Regar las plantas naturales y mantener limpios los potes. Limpieza de las hojas de las plantas tanto artificiales como naturales. ")
            lista = doc.add_paragraph(style='List Number')
            lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            lista.add_run("Recolectar la basura de los puestos de trabajo, cambiar las bolsas de basura y colocar la basura en el lugar de desperdicios indicado por el cliente.")
        
        if True:#  7TO parafffo 
           

            texto_contrato = """
    \n\tLIMPIEZA PERIODICA 
    """.format(trabajador_cargo=trabajador_cargo)
            
            paragraph = doc.add_paragraph()
            LISTA_BOLD=[]
            string_bold='LIMPIEZA PERIODICA'.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        

        if True:#  8vo parafffo 
            doc.styles['List Number'].paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
           
            lista = doc.add_paragraph(style='List Number')
            
            
            lista.add_run("Lavar los tanques de basura y tinaqueras. Semanalmente o según necesidad.")
            lista = doc.add_paragraph(style='List Number')
           
            lista.add_run("Revisar y remover marcas en las paredes internas. Semanalmente o según necesidad.")
            lista = doc.add_paragraph(style='List Number')
           
            lista.add_run("Movilización del mobiliario para limpieza profunda. Mensualmente.")
            lista = doc.add_paragraph(style='List Number')
            
            lista.add_run("Revisar y remover telarañas de las columnas, paredes, carriolas, ventanas y techos. Mensualmente.")
            lista = doc.add_paragraph(style='List Number')
            
            lista.add_run("Limpieza de abanicos, muebles modulares aéreos, parrillas de retorno del aire acondicionado. Mensualmente.")
            lista = doc.add_paragraph(style='List Number')
           
            lista.add_run("Restregado o baldeado de pisos de alto tráfico como entradas principales, patios, pisos y paredes de baños comunes.")
            lista = doc.add_paragraph(style='List Number')
           
            lista.add_run("Aspirar mamparas de muebles modulares, cortinas, cenefas fijas, sillas y sillones de tela. Mensualmente. ")
            lista = doc.add_paragraph(style='List Number')
           
            lista.add_run("Lavado de pisos con máquinas rotativas. Lavado de alfombras con máquina extractora. Lavado de muebles con máquinas de lavado de muebles.")

        if True:#  9no parafffo 
           

            texto_contrato = """
    \n\tSERVICIO DE CAFETERÍA 
    """.format(trabajador_cargo=trabajador_cargo)
            
            paragraph = doc.add_paragraph()
            LISTA_BOLD=[]
            string_bold='SERVICIO DE CAFETERÍA'.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        

        if True:#  10mo parafffo 
            lista_parrafos=[]
            lista_parrafos.append('Limpieza, desgrase y desinfección de Cocinas, mesas de trabajo, mesas de servicios y sillas. Comedores y sala de reuniones.')
            lista_parrafos.append('Limpiar refrigeradoras y hornos de microondas de las cocinas y/o comedores. Semanalmente. Lavado de neveras por dentro y por fuera.')
            lista_parrafos.append('Preparar, servir y retirar servicio de: café, té, sodas, agua o cualquier otro servicio al puesto indicado por el cliente.')
            lista_parrafos.append('Lavado de pisos de cocinas y/o comedores. Mensualmente.')
            for paraf in lista_parrafos:
                lista = doc.add_paragraph(style='List Number')
                lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            
                lista.add_run(paraf)

        if True:#  11vo parafffo 
           

            texto_contrato = """
    \n\tOTRAS FUNCIONES 
    """.format(trabajador_cargo=trabajador_cargo)
            
            paragraph = doc.add_paragraph()
            LISTA_BOLD=[]
            string_bold='OTRAS FUNCIONES'.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        

        if True:#  12vo parafffo 
            doc.add_paragraph() 

            lista_parrafos=[]
            lista_parrafos.append('Reemplaza y apoya a otros operarios. Realiza limpiezas especiales.')
            lista_parrafos.append('Reporta cualquier anomalía que atente con el normal funcionamiento de los servicios que se brindan, al jefe inmediato.')
            lista_parrafos.append('Mantener su área de trabajo limpia y ordenada. Cada vez que termine su jornada de trabajo, revisar que todos sus materiales y equipos de trabajo se encuentren organizados y limpios.')
            lista_parrafos.append('Hacer pedido de materiales todos los días 15 de cada mes, para hacer la entrega de los mismos los días 30 del mismo mes. Utilizar formulario de Solicitud y Entrega de Materiales.')
            lista_parrafos.append('Hacer inventario mensual de los materiales y equipos en su puesto de trabajo. Procurar dar buen uso a sus materiales y equipos. Reportar anomalías a su Supervisor Inmediato.')
            for paraf in lista_parrafos:
                lista = doc.add_paragraph(style='List Number')
                lista.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            
                lista.add_run(paraf)
             
        if True:#  Tercera 
            
            texto_contrato = """
    \nTERCERA: EL EMPLEADOR podrá usar los servicios de EL TRABAJADOR, en todas las funciones análogas, similares o complementarias a las funciones para cuya ejecución específica fue contratado o dentro de otras instalaciones dentro del territorio nacional. El TRABAJADOR acepta la posibilidad de movilidad funcional y horizontal dentro o fuera de la empresa.
\n""".format()
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['TERCERA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#   Cuarta Clausala
            
            texto_contrato = """
    \nCUARTA: EL TRABAJADOR se obliga a acatar las instrucciones de sus jefes inmediatos y efectuará sus labores con la intensidad, cuidado, esmero y eficacia necesarias que exige el desempeño de sus labores. Así mismo, EL TRABAJADOR se compromete a dedicar sus horas de trabajo al desempeño exclusivo de las tareas para las que se le han contratado y especificadas por EL TRABAJADOR.
""".format()
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['TERCERA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#   Cuarta Clausala continua
            
            texto_contrato ="De igual forma, EL TRABAJADOR se obliga especialmente a lo siguiente:\n\nMantener en todo momento la debida conducta y reserva respecto a toda información confidencial a la cual tuviese acceso en el desempeño de sus labores.\n\nNo comunicar a terceros cuestiones relacionadas con su trabajo o con las actividades de EL EMPLEADOR  y sus Clientes y a no divulgar asuntos que sean de naturaleza privada o reservada.\n\nGuardar estricta confidencialidad en relación con los códigos de acceso (contraseñas, llaves, etc.) que se le asignen o suministren y devolver los mismos a EL EMPLEADOR, según corresponda, cuando así se lo soliciten o al momento de terminarse la relación de trabajo.\n"
            paragraph = doc.add_paragraph(texto_contrato)
           
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Quinbta
            HR_SEMANAL=str(Colaborador_obj.Jornada_semanal)
            texto_contrato = """
    \nQUINTA: EL TRABAJADOR desarrollará sus labores en jornadas de trabajo de {HR_SEMANAL} horas semanales así:""".format(HR_SEMANAL=HR_SEMANAL)
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['QUINTA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True: #Horario
            
            if int(HR_SEMANAL) == 48:
            # Agregar tabla
                tabla = doc.add_table(rows=2, cols=2)
                tabla.style = None  # Estilo de la tabla
                fila1 = tabla.rows[0].cells
                fila1[0].text = 'De Lunes a Sábados'
                fila1[1].text = 'De 6:00am a 03:00pm, o de 7:00am a 4:00pm, o de 8:00am a 05:00pm, o de 9:00am a 6:00pm.'
               
                fila2 = tabla.rows[1].cells
                fila2[0].text = 'Domingos'
                fila2[1].text = 'Libre semanal'
            else:
                tabla = doc.add_table(rows=3, cols=2)
                tabla.style = None  # Estilo de la tabla
                fila1 = tabla.rows[0].cells
                fila1[0].text = 'De Lunes a Viernes'
                fila1[1].text = 'De 6:00am a 03:00pm, o de 7:00am a 4:00pm, o de 8:00am a 05:00pm, o de 9:00am a 6:00pm.'

                fila2 = tabla.rows[1].cells
                fila2[0].text = 'Sábados'
                fila2[1].text = 'De 6:00am a 10:00am, o de 7:00am a 11:00am, o de 8:00am a 12:00md.'

                fila2 = tabla.rows[2].cells
                fila2[0].text = 'Domingos'
                fila2[1].text = 'Libre semanal'

        if True:#   Continuacion de Quinta
            
            
            texto_contrato='\nEL EMPLEADOR de acuerdo a la necesidad del servicio, se reserva el derecho de efectuar cambios en las rutas y en los horarios de trabajo, a turnos rotativos y viceversa.  '
            texto_contrato+='\n\nEn caso de necesidad del servicio EL TRABAJADOR estará obligado a trabajar en jornadas extraordinarias que indique EL EMPLEADOR y de conformidad con las limitaciones que prevé la Ley.'
            texto_contrato+='\n\nEL TRABAJADOR, se compromete además, a dar aviso inmediato, DENTRO DE LA PRIMERA HORA DE SU JORNADA DE TRABAJO, por él mismo o a través de un tercero cuando no pueda asistir a su jornada de trabajo, indicando la razón y entendiendo que las áreas de trabajo son específicas para cada trabajador y la inasistencia a su puesto de trabajo genera ajustes a la programación de otras unidades para reemplazar.'
            texto_contrato+='\n\nEL EMPLEADOR de acuerdo a la necesidad del servicio, se reserva el derecho de efectuar cambios en los turnos y horarios de trabajo, y sólo pagará a EL TRABAJADOR las horas extraordinarias de trabajo que le hayan sido autorizadas previamente y por escrito a la prestación de dicho trabajo extraordinario.'
            texto_contrato+='\n\nAdicionalmente, EL TRABAJADOR reconoce que las obligaciones convenidas en este contrato y las que le impone la ley y no le permiten prestar servicios remunerados a terceras personas, antes o después de su jornada diaria, durante sus períodos de descanso o durante el goce de sus vacaciones anuales.  Se abstendrá, por consiguiente, de iniciar o mantener una relación de trabajo con otro empleador o los mismos clientes de EL EMPLEADOR, durante la vigencia del presente Contrato de Trabajo.\n'
            
            paragraph = doc.add_paragraph(texto_contrato)
           
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Sexta
            sueldo_mens=Colaborador_obj.Sueldo
            semanal=sueldo_mens*12/52
            rata_hr=round(semanal/int(HR_SEMANAL),2)
            
            texto_contrato = """
    \nSEXTA: En pago de sus servicios EL TRABAJADOR recibirá un salario mensual a Base de una rata por hora de B/ {rata_hr}. Los pagos se harán quincenalmente los días 15 y 30 de cada mes en las instalaciones de la oficina o en su lugar de trabajo, de acuerdo al sistema de pago que mantenga la empresa, cheque, efectivo o sistema electrónico. Al hacer el pago EL EMPLEADOR hará las deducciones que procedan conforme a la ley.
""".format(rata_hr=rata_hr)
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['SEXTA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Septima
            
            
            texto_contrato = """
    \nSEPTIMA: EL EMPLEADOR se reserva el derecho a discreción, de pagar a EL TRABAJADOR, premios, bonificaciones, incentivos o sumas de dinero adicionales con el objetivo de incrementar la productividad y el rendimiento, sin que exista ninguna obligación por parte de EL EMPLEADOR, de conformidad a lo que establece la Ley 44 de 12 de Agosto de 1995.
""".format(rata_hr=rata_hr)
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['SEPTIMA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Octava
           
            
            texto_contrato = """
    \nOCTAVA: Para el desempeño efectivo de las tareas diarias, EL EMPLEADOR proveerá de equipo y materiales, los mismos que tendrá que utilizar EL TRABAJADOR, cuidar y custodiar dentro de su horario de trabajo. EL TRABAJADOR tampoco podrá retirar objeto alguno de las dependencias de EL EMPLEADOR, sin autorización expresa del superior respectivo. Así mismo, EL TRABAJADOR no podrá utilizar su tiempo, equipo o material alguno de los puestos de trabajo y que sean de propiedad de EL EMPLEADOR o sus Clientes, para fines personales. (Ej. Reciclaje)
""".format(rata_hr=rata_hr)
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['OCTAVA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Octava
         
            
            texto_contrato = """
    \nEL EMPLEADOR  proveerá además, uniformes (Polo shirt, T-shirt, camisas, botas, chompas, petos, etc.), que deberá mantener en buen estado y devolver al finalizar el presente contrato. EL TRABAJADOR no podrá hacerle arreglos a los uniformes que provean EL EMPLEADOR sin autorización expresa de éste o su superior inmediato.""".format(rata_hr=rata_hr)
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['OCTAVA:', 'CUARTA:']
           
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Novena
            if Colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
                Contrato='TIEMPO INDEFINIDO'
                fecha_contrato=fun_fecha_bonita_contrato(Colaborador_obj.Fecha_Ingreso)
            else:
                Contrato='TIEMPO DEFINIDO'
                fecha_contrato=fun_fecha_bonita_contrato(Colaborador_obj.Fecha_Ingreso)+' al '+fun_fecha_bonita_contrato(Colaborador_obj.Fecha_Egreso)

            texto_contrato = """
    \nNOVENA: Este contrato será por {Contrato}, a partir del {fecha_contrato}. Sin embargo, se entiende que tres (3) meses a partir de su vigencia serán de prueba y  que durante dicho periodo cualesquiera de las partes podrán dar por terminada la relación de trabajo, sin responsabilidad alguna, de conformidad con lo que establece el Artículo 78 del Código de trabajo.
""".format(Contrato=Contrato,
fecha_contrato=fecha_contrato
            )
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['NOVENA:', 'TIEMPO', 'INDEFINIDO,' , 'DEFINIDO,']   
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Novena pt 2

            fecha_contrato=fun_fecha_bonita_contrato(hoy.date())

            

            texto_contrato = """
    \nEn fe de lo anterior, se firma el presente contrato, en la ciudad de Panamá, el día {fecha_contrato}.

""".format(fecha_contrato=fecha_contrato
            )
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['NOVENA:', 'TIEMPO', 'INDEFINIDO,' , 'DEFINIDO,']   
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Espacio Firma

            texto_contrato = "\n\n\n\n"
            paragraph = doc.add_paragraph(texto_contrato) 
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        if True:#  Firma

            texto_contrato = """POR EL TRABAJADOR						POR EL EMPLEADOR""".format()
            paragraph = doc.add_paragraph()      
            for word in texto_contrato.split():
                if word=='TRABAJADOR':
                    run = paragraph.add_run(word + '				   ')
                    run.bold = True
                else:     
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        if True:#  Firma pt2

            texto_contrato = """CIP N°	{trabajador_cedula} ,				                              CIP N°
""".format(trabajador_cedula=trabajador_cedula)
            paragraph = doc.add_paragraph()      
            for word in texto_contrato.split():
                if word==',':
                    run = paragraph.add_run(word + '				                  ')
                    run.bold = True
                else:     
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        
        empresa='GoCleaning/' 
        path=empresa+'archivos/' 
        
        name_file='Contrato Laboral'
        nombre_archivo_WORD=path+'Contrato_laboral_'+str(Colaborador_obj.pk)+'_'+Colaborador_obj.Colaborador_nombre+'_'+Colaborador_obj.Colaborador_apellido+'.doc'
        nombre_archivo_WORD=nombre_archivo_WORD.replace(' ','')
        archivo_WORD = BytesIO()
        doc.save(archivo_WORD)
       
        archivo_temporal = File(archivo_WORD, name=nombre_archivo_WORD)
        try:
                objetc_archivo = Archivos.objects.get(nombre=nombre_archivo_WORD )
                objetc_archivo.file=archivo_temporal
                objetc_archivo.save()
        except: 
              objetc_archivo = Archivos.objects.create(nombre=nombre_archivo_WORD,file=archivo_temporal)
        
        archivo_WORD.close()
       
        
        
        
        return render(request, "ver_carta_trabajo.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,'name_file':name_file,  'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo_WORD, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'Colaborador_obj':Colaborador_obj, 'pk_colaborador':searched, })

def ver_carta_trabajo(request,  searched='1'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_supervisores=[]
    lista_clientes=Colaboradores.objects.all()
    for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])

    if request.method=='GET':
     try:
        lista_final=[]
        Colaborador_obj=Colaboradores.objects.get(pk=int(searched))
        
        doc = Document()
        if Colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
            Contrato='CONTRATO DE TRABAJO POR TIEMPO INDEFINIDO\n'
        else:
            Contrato='CONTRATO DE TRABAJO POR TIEMPO DEFINIDO\n'

        url_izquierda = "https://mypayrollpa.s3.amazonaws.com/GoCleaning/archivos/go_cleaning_membrete.jpg"
        imagen_izquierda = descargar_imagen(url_izquierda)
        if imagen_izquierda:
            left_paragraph = doc.add_paragraph()
            left_run = left_paragraph.add_run()
            left_run.add_picture(imagen_izquierda, width=Inches(6.5), height=Inches(1.7))
            left_paragraph.alignment = 0 

        if True:#  fecha carta
            hoy=datetime.now()

            fecha_contrato=fun_fecha_bonita_contrato(hoy.date())
            texto_contrato = "Panamá, "+fecha_contrato+".\n"
            
            paragraph = doc.add_paragraph(texto_contrato)
            

            texto_contrato = """
    \nA QUIEN CONCIERNE""".format()
            paragraph1 = doc.add_paragraph()
            for word in texto_contrato.split():
                if word in ['A', 'QUIEN', 'CONCIERNE']:
                    run = paragraph1.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph1.add_run(word + ' ')

            paragraph1.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

            texto_contrato = "Respetados Señores:\n"
            
            paragraph = doc.add_paragraph(texto_contrato)
        

        if True:#  1er parafffo  Nombres y detalles de las partes
           
           
            trabajador_nombre = Colaborador_obj.Colaborador_nombre+' '+Colaborador_obj.Colaborador_apellido
            trabajador_cedula = Colaborador_obj.Nro_Identificacion
            fecha_ingreso=fun_fecha_bonita_contrato(Colaborador_obj.Fecha_Ingreso)
            estado_civil=Colaborador_obj.Estado_civil
            if Colaborador_obj.Tipo_documento =='pasaporte':
                tipo_identificacion='pasporte'
            else:
                tipo_identificacion='cédula'

            if Colaborador_obj.Sexo=='Masculino':
                sexo='Sr.'
                estado_civil=estado_civil.replace('o(a)','o')
            else:
                sexo='Sra.'
                estado_civil=estado_civil.replace('o(a)','a')

            texto_contrato = """Por medio de la presente se certifica que el {sexo} {trabajador_nombre} identificado con número de {tipo_identificacion} {trabajador_cedula} , labora en la compañía Go Services, S.A., desde el {fecha_ingreso}.
""".format(trabajador_nombre=trabajador_nombre,
            trabajador_cedula=trabajador_cedula,
            sexo=sexo,
            tipo_identificacion=tipo_identificacion,
            fecha_ingreso=fecha_ingreso
            )
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['Go', 'Services,','S.A.,', trabajador_cedula]
            string_bold=trabajador_nombre.split()
            for palabras in string_bold:
                LISTA_BOLD.append(palabras)
                
                
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        

        if True: #tercer parrafo
            cargo = Colaborador_obj.Cargo 
            if Colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
            
                tipo_contrato='indefinido'
            else:
                tipo_contrato='definido'
                 
            texto='Actualmente ocupa el cargo de '+cargo+', con un contrato por tiempo '+tipo_contrato+' y presenta el siguiente estado de ingreso y deducciones:'
            paragraph = doc.add_paragraph(texto)
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY

            texto_contrato = """
    \nIngresos:""".format()
            paragraph1 = doc.add_paragraph()
            for word in texto_contrato.split():
                if word in ['A', 'Ingresos:', 'CONCIERNE']:
                    run = paragraph1.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph1.add_run(word + ' ')
        
        if True: #tabla sueldo
            # Agregar tabla
            sueldo=Colaborador_obj.Sueldo
            if sueldo>=846.15:
                tabla = doc.add_table(rows=5, cols=2)
            else:
                 tabla = doc.add_table(rows=4, cols=2)

            tabla.style = None  # Estilo de la tabla
            fila1 = tabla.rows[0].cells
            fila1[0].text = 'Sueldo Base Mensual'
            fila1[1].text = '$'+str(round(sueldo,2))
        
            fila2 = tabla.rows[1].cells
            fila2[0].text = 'Seguro Social'
            fila2[1].text = '$'+str(round(sueldo*0.0925,2))
           
            fila3 = tabla.rows[2].cells
            fila3[0].text = 'Seguro Educativo'
            fila3[1].text = '$'+str(round(sueldo*0.0125,2))
            
            if sueldo<846.15:
                total= sueldo- sueldo*0.0125 - sueldo*0.0925
                total=round(total,2)
                fila3 = tabla.rows[3].cells
                fila3[0].text = 'Ingreso Neto Mensual'
                fila3[1].text = '$'+str(total)
            else:
                islr_calculo=sueldo*13
                islr=0
                islr_25=0
                islr_15=0
                if islr_calculo>50000:
                    islr_25=(islr_calculo-50000)*0.25
                if islr_calculo>11000 and islr_calculo > 50000:
                    islr_15=5850
                elif islr_calculo>11000 and islr_calculo<=50000:
                     islr_15=(islr_calculo-11000)*0.15
                
                if islr_25+islr_15 >0:
                    islr=(islr_15+islr_25)/13
                
                fila3 = tabla.rows[3].cells
                fila3[0].text = 'Impuesto Sobre la Renta'
                fila3[1].text = '$'+str(round(islr,2))

                
                total= sueldo- sueldo*0.0125 - sueldo*0.0925 - islr
                total=round(total,2)
                fila4 = tabla.rows[4].cells
                fila4[0].text = 'Ingreso Neto Mensual'
                fila4[1].text = '$'+str(total)
                
                 

        if True:#  4TO parafffo 
            paragraph1 = doc.add_paragraph('\nAtentamente,')
            texto_contrato = """
    GO SERVICES, S.A.""".format()
            
            paragraph = doc.add_paragraph()
            LISTA_BOLD=['GO','SERVICES,','S.A.']     
            for word in texto_contrato.split():
                if word in LISTA_BOLD:
                    run = paragraph.add_run(word + ' ')
                    run.bold = True
                else:
                    paragraph.add_run(word + ' ')

            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY

            try:
                paragraph1 = doc.add_paragraph('\n\n\n_________________________________\n'+user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido+'\n'+user_profile_obj.Colaborador.Departamento+'\nGO SERVICES, S.A. - Tel. 391-6290/ 6711-3149'+'\nCorreo: Info@go-cleaning.com - Visítenos en www.go-cleaning.com')
            except:
                paragraph1 = doc.add_paragraph('\n\n\n_________________________________\n'+user_profile_obj.user.first_name+' '+user_profile_obj.user.last_name+'\n'+'Gerencia General'+'\nGO SERVICES, S.A. - Tel. 391-6290/ 6711-3149'+'\nCorreo: Info@go-cleaning.com - Visítenos en www.go-cleaning.com')
        empresa='GoCleaning/' 
        path=empresa+'archivos/' 
        
        name_file='Constancia Salarial'

        nombre_archivo_WORD=path+'Constancia_Salarial_'+str(Colaborador_obj.pk)+'_'+Colaborador_obj.Colaborador_nombre+'_'+Colaborador_obj.Colaborador_apellido+'.doc'
        nombre_archivo_WORD=nombre_archivo_WORD.replace(' ','')
        archivo_WORD = BytesIO()
        doc.save(archivo_WORD)
       
        archivo_temporal = File(archivo_WORD, name=nombre_archivo_WORD)
        try:
                objetc_archivo = Archivos.objects.get(nombre=nombre_archivo_WORD )
                objetc_archivo.file=archivo_temporal
                objetc_archivo.save()
        except: 
              objetc_archivo = Archivos.objects.create(nombre=nombre_archivo_WORD,file=archivo_temporal)
        
        archivo_WORD.close()
       
        
        
        
        return render(request, "ver_carta_trabajo.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'name_file':name_file, 'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo_WORD, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'Colaborador_obj':Colaborador_obj, 'pk_colaborador':searched, })
     
     except Exception as e:
            print("Se produjo una excepción:", type(e).__name__, "-", e)
            # Imprimir la información de la traza de la excepción
            traceback.print_exc()
            print(traceback.print_exc(), 'print')
            print("Archivo:", e.__traceback__.tb_frame.f_code.co_filename)
            print("Línea:", e.__traceback__.tb_lineno)

def ver_archivos_colaborador(request,  searched='1'):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_supervisores=[]
    lista_clientes=Colaboradores.objects.all()
    for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])

    if request.method=='GET':
        lista_final=[]

        empresa_id=1
        lista_archivos = Archivos_Colaboradores.objects.filter(Empresa_id=empresa_id , Colaborador_id = int(searched))

        Colaborador_obj=Colaboradores.objects.get(pk=int(searched))
        
        
        
        return render(request, "ver_archivos_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,  'MEDIA_URL':settings.MEDIA_URL, 'lista_archivos':lista_archivos, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'Colaborador_obj':Colaborador_obj, 'pk_colaborador':searched, })

    else:
        #print(request.POST)
        #print(request.FILES)
        

        hoy=datetime.now()
        hoy=hoy.date()
        Colaborador_obj=Colaboradores.objects.get(pk=int(searched))
        id_empresa=1
        descripcion=request.POST['descripcion']
        archivo = request.FILES["archivo"]
        # Generar un nuevo nombre de archivo utilizando el nombre original
        nombre_original, extension = os.path.splitext(archivo.name)
        empresa='GoCleaning/'
        subpath=empresa+'Permisos/Archivos_Personales/'
        colaborador_id=Colaborador_obj.Colaborador_nombre+'_CIP_'+Colaborador_obj.Nro_Identificacion+'_'+searched
        colaborador_id=colaborador_id.replace(' ','_')
        # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
        nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta
        nombre_archivo=nombre_archivo.replace(' ','_')
        archivo_guardado = default_storage.save(nombre_archivo, archivo)
        
        created= Archivos_Colaboradores.objects.create(Colaborador_id=int(searched),Empresa_id=id_empresa,Fecha_Subido=hoy , Nombre_Archivo=nombre_archivo, Comentario_Archivo=descripcion , Archivo= archivo_guardado , Quien_lo_subio_id=user_profile_obj.pk)
        
                   

        lista_archivos = Archivos_Colaboradores.objects.filter(Empresa_id=id_empresa , Colaborador_id = int(searched))

        
        
        
        
        return render(request, "ver_archivos_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,  'MEDIA_URL':settings.MEDIA_URL, 'lista_archivos':lista_archivos, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'Colaborador_obj':Colaborador_obj, 'pk_colaborador':searched, })

         


def dias_feriados(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        try:
            
            lista_clientes=Dias_Feriados.objects.all()
            for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].Dia_Feriado,
                        lista_clientes[i].Motivo_Feriado ,
                        lista_clientes[i].pk
                        
                        ]
                lista_final.append(lista)
            
            if len(lista_final)==0:
                    lista=['Sin Fecha',
                        'Sin Registrar',
                        0
                        
                        ]
                    lista_final.append(lista)
            
        except:
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        '0'
                        ]
            lista_final.append(lista)

        
        return render(request, "dias_feriados.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        motivo='Dia Feriado con gozo de prestaciones'
        
        values= list(request.POST.keys())
        if 'borrar' in values:
            el_dia_a_borrar=Dias_Feriados.objects.get(pk=int(request.POST["borrar"]))
            if True: #guardar Novedades
                tipo_seguimiento='Dia Feriado'
                sUB_Tipo_seguimiento=' Eliminar'
                comment=' Eliminar Feriado : '+str(el_dia_a_borrar.Dia_Feriado)+' '+' Motivo Feriado: '+el_dia_a_borrar.Motivo_Feriado
                fecha_novedad_date=datetime.now()
                fecha_novedad=fecha_novedad_date.date()
                hora_actual = fecha_novedad_date.strftime('%H:%M')
                
                if es_admin:

                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual 
                                                                                    )
                else:
                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual ,
                                                                Colaborador= user_profile_obj.Colaborador
                                                                                    )
        
            el_dia_a_borrar.delete()
        else:
            feriado = request.POST["dia_feriado"]
            if 'motivo' in values:
                motivo=request.POST["motivo"]
        


    
            created = Dias_Feriados.objects.get_or_create(Dia_Feriado=feriado,Motivo_Feriado=motivo)
            if True: #guardar Novedades
                tipo_seguimiento='Dia Feriado'
                sUB_Tipo_seguimiento=' Creacion'
                comment=' Creacion Feriado : '+str(feriado)+' '+' Motivo Feriado: '+motivo
                fecha_novedad_date=datetime.now()
                fecha_novedad=fecha_novedad_date.date()
                hora_actual = fecha_novedad_date.strftime('%H:%M')
                
                if es_admin:

                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual 
                                                                                    )
                else:
                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual ,
                                                                Colaborador= user_profile_obj.Colaborador
                                                                                    )
        
        
    
        return redirect('dias-feriados/')

def agregar_departamento(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        try:
            
            lista_clientes=Departamento_Empresa.objects.filter(Empresa_id=1)
            for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].Nombre_departamento,
                        lista_clientes[i].Comentario ,
                        lista_clientes[i].pk
                        
                        ]
                lista_final.append(lista)
            
            if len(lista_final)==0:
                    lista=['Sin Departamento',
                        'Sin Comentario',
                        0
                        
                        ]
                    lista_final.append(lista)
            
        except:
           

            lista=['Sin Departamento',
                        'Sin Comentario',
                        0
                        
                        ]
            lista_final.append(lista)

        
        return render(request, "agregar_departamento.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        motivo='Sin Descripcion de Departamento'
        
        values= list(request.POST.keys())
        if 'borrar' in values:
            el_dia_a_borrar=Departamento_Empresa.objects.get(pk=int(request.POST["borrar"]))
            
            if True: #guardar Novedades
                tipo_seguimiento='Departamento'
                sUB_Tipo_seguimiento=' Eliminar'
                comment=' Eliminar  Departamento : '+str(el_dia_a_borrar.Nombre_departamento)+' '+' Motivo Feriado: '+el_dia_a_borrar.Comentario
                fecha_novedad_date=datetime.now()
                fecha_novedad=fecha_novedad_date.date()
                hora_actual = fecha_novedad_date.strftime('%H:%M')
                
                if es_admin:

                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual 
                                                                                    )
                else:
                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual ,
                                                                Colaborador= user_profile_obj.Colaborador
                                                                                    )

            el_dia_a_borrar.delete()
    
        else:
            dpto = request.POST["departamento_nombre"]
            if 'motivo' in values:
                motivo=request.POST["motivo"]
        


            id_Empresa=1
            try:
                created = Departamento_Empresa.objects.get(Nombre_departamento=dpto,Empresa_id=id_Empresa)
                created.Comentario = motivo
                created.save()
            except:
                created = Departamento_Empresa.objects.create(Nombre_departamento=dpto,Empresa_id=id_Empresa, Comentario=motivo)
                 

            if True: #guardar Novedades
                tipo_seguimiento='Departamento'
                sUB_Tipo_seguimiento=' Creacion'
                comment=' Creacion  Departamento : '+str(created.Nombre_departamento)+' '+' Motivo Feriado: '+created.Comentario
                fecha_novedad_date=datetime.now()
                fecha_novedad=fecha_novedad_date.date()
                hora_actual = fecha_novedad_date.strftime('%H:%M')
                
                if es_admin:

                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual 
                                                                                    )
                else:
                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                comentario= comment ,
                                                                Fecha_novedad=fecha_novedad ,
                                                                hora_novedad=hora_actual ,
                                                                Colaborador= user_profile_obj.Colaborador
                                                                                    )

    
        return redirect('Agregar_Departamento')

def agregar_jornada_individual(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        try:
            if nivel >=4:
                
                
                lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk, Status='Activo')

            else:

                lista_clientes=Colaboradores.objects.filter(Status='Activo')

            for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Hora_entrada ,
                        lista_clientes[i].Hora_salida ,
                        lista_clientes[i].Inicio_Hora_Almuerzo ,
                        lista_clientes[i].imagen ,

                        #<td><img src="{{ MEDIA_URL }}{{  clientes.7 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>

                        
                        
                        ]
                lista_final.append(lista)
            
            lista_empresass=Info_Clientes.objects.all() 
            for i in range(len(lista_empresass)):
                lista=[lista_empresass[i].pk,
                       lista_empresass[i].Codigo_cliente,
                        lista_empresass[i].nombre_empresa ,
                        
                        ]
                lista_empresas.append(lista)
            
        except:
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            lista_empresas.append(lista)

        
        return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        lista_empresas=[]
        try:
            
            if nivel >=4:
                
                
                lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk, Status='Activo')

            else:

                lista_clientes=Colaboradores.objects.filter(Status='Activo')

            for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Hora_entrada ,
                        lista_clientes[i].Hora_salida ,
                        lista_clientes[i].Inicio_Hora_Almuerzo ,
                        lista_clientes[i].imagen ,

                        
                        
                        ]
                lista_final.append(lista)
            
            lista_empresass=Info_Clientes.objects.all() 
            for i in range(len(lista_empresass)):
                lista=[lista_empresass[i].pk,
                       lista_empresass[i].Codigo_cliente,
                        lista_empresass[i].nombre_empresa ,
                        
                        ]
                lista_empresas.append(lista)
            
        except:
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            lista_empresas.append(lista)

        
        values= list(request.POST.keys())
        ##print(request.POST)
        if 'empresa' not in values:
          
            Mensaje='Error.! No Agregaste una Empresa, Por favor asigna una empresa en la jornada Laboral.'
            return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
            
        if 'colaborador' not in values:
           
            Mensaje='Error.! No Agregaste un Colaborador, Por favor asigna un Colaborador en la jornada Laboral.'
            return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        if 'empresa' in values:
            colaborador=request.POST.getlist("empresa")
            if len(colaborador)>1:
                Mensaje='Error.! Solo Agrega una (1) Empresa, Por favor asigna una empresa en la jornada Laboral.'
                return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        if 'colaborador' in values:
            colaborador=request.POST.getlist("colaborador")
            if len(colaborador)>1:
                Mensaje='Error.! Solo Agrega una (1) Colaborador, Por favor asigna un colaborador  por jornada Laboral.'
                return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


        lista_dia_entrada=request.POST.getlist("dia_entrada")
        lista_hora_entrada=request.POST.getlist("hora_entrada")
        lista_dia_salida=request.POST.getlist("dia_salida")
        lista_hora_salida=request.POST.getlist("hora_salida")
        lista_dia_entradaa=[]
        lista_hora_entradaa=[]
        lista_dia_salidaa=[]
        lista_hora_salidaa=[]
        for i in lista_dia_entrada:
            if i !='':
                lista_dia_entradaa.append(i)
        
        for i in lista_hora_entrada:
            if i !='':
                lista_hora_entradaa.append(i)
        
        for i in lista_dia_salida:
            if i !='':
                lista_dia_salidaa.append(i)

        for i in lista_hora_salida:
            if i !='':
                lista_hora_salidaa.append(i)

        entradas_y_salidas=[]

        if len(lista_dia_entradaa)==len(lista_hora_entradaa) and len(lista_dia_entradaa)==len(lista_dia_salidaa) and len(lista_dia_entradaa)==len(lista_hora_salidaa) : #son iguales empeza hacer otro estudio
            for i in range( len(lista_dia_entradaa)):
                entrada=lista_dia_entradaa[i]+' '+lista_hora_entradaa[i]
                salida=lista_dia_salidaa[i]+' '+lista_hora_salidaa[i]
                entradas_y_salidas.append([entrada,salida])
                fecha_entrada = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                fecha_salida = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                tiempo_trabajado = fecha_salida -fecha_entrada
                tiempo_trabajado=tiempo_trabajado.total_seconds()
                if tiempo_trabajado < 1 :
                    Mensaje='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                    return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
                elif tiempo_trabajado>=86400:
                    Mensaje='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                    return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            Mensaje='Error.! Falta algun dia o alguna en hora en el formulario, Por favor asigna equitativamente las horas o dias de entrada y salidas por jornada Laboral.'
            return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        
        colaborador=request.POST["colaborador"]
        empresa=request.POST["empresa"]
        colaborador_info=Colaboradores.objects.get(pk=int(colaborador))
        empresa_info=Info_Clientes.objects.get(pk=int(empresa))
        hora_entrada_contrato = colaborador_info.Hora_entrada
        hora_salida_contrato = colaborador_info.Hora_salida
        jornada_diaria = colaborador_info.Jornada_diaria
        Almuerzo=colaborador_info.Almuerzo_bool
        hora_de_inicio_almuerzo=colaborador_info.Inicio_Hora_Almuerzo
        if hora_de_inicio_almuerzo!=23:
            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
        else:
             hora_de_final_almuerzo=0
        dia_descanso_1=colaborador_info.Dia_descanso_1
        dia_descanso_2=colaborador_info.Dia_descanso_2
        categoria_empleado=colaborador_info.Departamento #si sale ruta
        tipo_de_jornada=colaborador_info.Tipo_Jornada # 'Npcturna' ya sabes a donde va
        lista_FERIADOS=Dias_Feriados.objects.all()
        feriados=[]
        jornada_semanal=48
        
        for i in lista_FERIADOS:
             feriados.append(i.Dia_Feriado)
        
             
        
        ##print(categoria_empleado, colaborador_info.Colaborador_nombre)
        if categoria_empleado=='Ruta':
            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
        elif tipo_de_jornada=='Nocturna':
             resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
        else:
             resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

        for i in resultados:
            dia_entrada= i[0]
            hr_entrada = i[1]
            dia_salida = i[2]
            hr_salida = i[3]
            minutos_trabajados = i[4]
            minutos_trabajadas_jornada_laboral = i[5]
            minutos_extras_diurnos=i[6]
            minutos_extras_nocturnos = i[7]
            horas_laborales_extras = i[8]
            minutos_de_tardia = i[9]
            min_faltante_de_turno = i[10]
            min_llego_temprano  =i[11]
            minutos_de_extras_mixtas_nocturnas=i[12]
            minutos_de_extras_mixtas_diurnas=i[13]
            minutos_extras_diurnos_3hr  =i[14]
            minutos_extras_nocturnos_3hr =i[15]
            minutos_de_extras_mixtas_diurnas_3hr = i[16]
            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
            laboro_dia_domingo_descanso= i[18]
            laboro_dia_feriado=i[19]

            '''ver_si_hay_mismo_dia=Hoja_tiempo.objects.filter(Colaborador_id=colaborador_info.pk)
            ver_si_hay_mismo_dia=Hoja_tiempo.objects.filter(Dia_entrada__icontains=dia_entrada)'''
            if es_admin:
                Quien_agrego_Jornada='Administrador'
            else:
                Quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
            try:

                if categoria_empleado=='Ruta':
                    created = Hoja_tiempo.objects.create(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= colaborador_info,Empresa=empresa_info,  Quien_agrego_Jornada=Quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                    if True: #guardar Novedades
                        tipo_seguimiento='Hoja Tiempo'
                        sUB_Tipo_seguimiento=' Creacion '
                        comment=' Creacion Jornada Ruta Entrada: '+str(dia_entrada)+' '+str(hr_entrada)+' Salida: '+str(dia_salida)+' '+str(hr_salida)+' Colaborador: '+colaborador_info.Colaborador_nombre+' '+colaborador_info.Colaborador_apellido+' Nro Ident.: '+colaborador_info.Nro_Identificacion
                        fecha_novedad_date=datetime.now()
                        fecha_novedad=fecha_novedad_date.date()
                        hora_actual = fecha_novedad_date.strftime('%H:%M')
                        
                        if es_admin:

                            novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                        SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                        comentario= comment ,
                                                                        Fecha_novedad=fecha_novedad ,
                                                                        hora_novedad=hora_actual 
                                                                                            )
                        else:
                            novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                        SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                        comentario= comment ,
                                                                        Fecha_novedad=fecha_novedad ,
                                                                        hora_novedad=hora_actual ,
                                                                        Colaborador= user_profile_obj.Colaborador
                                                                                            )
    
                
                else: 
                    created = Hoja_tiempo.objects.get(Dia_entrada=dia_entrada,Colaborador_id=colaborador_info.pk)
                    Hoja_tiempo.objects.filter(pk=created.pk).update(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= colaborador_info,Empresa=empresa_info,  Quien_agrego_Jornada=Quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                    
                    if True: #guardar Novedades
                        tipo_seguimiento='Hoja Tiempo'
                        sUB_Tipo_seguimiento=' Actualizar '
                        comment=' Actualizar Jornada  Entrada: '+str(dia_entrada)+' '+str(hr_entrada)+' Salida: '+str(dia_salida)+' '+str(hr_salida)+' Colaborador: '+colaborador_info.Colaborador_nombre+' '+colaborador_info.Colaborador_apellido+' Nro Ident.: '+colaborador_info.Nro_Identificacion
                        fecha_novedad_date=datetime.now()
                        fecha_novedad=fecha_novedad_date.date()
                        hora_actual = fecha_novedad_date.strftime('%H:%M')
                        
                        if es_admin:

                            novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                        SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                        comentario= comment ,
                                                                        Fecha_novedad=fecha_novedad ,
                                                                        hora_novedad=hora_actual 
                                                                                            )
                        else:
                            novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                        SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                        comentario= comment ,
                                                                        Fecha_novedad=fecha_novedad ,
                                                                        hora_novedad=hora_actual ,
                                                                        Colaborador= user_profile_obj.Colaborador
                                                                                            )
    
                        ##print('se grabo uno ya existente')
            
            except ObjectDoesNotExist:
                #crear nuevo dia
                created = Hoja_tiempo.objects.create(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= colaborador_info,Empresa=empresa_info,  Quien_agrego_Jornada=Quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                if True: #guardar Novedades
                        tipo_seguimiento='Hoja Tiempo'
                        sUB_Tipo_seguimiento=' Creacion '
                        comment=' Creacion Jornada  Entrada: '+str(dia_entrada)+' '+str(hr_entrada)+' Salida: '+str(dia_salida)+' '+str(hr_salida)+' Colaborador: '+colaborador_info.Colaborador_nombre+' '+colaborador_info.Colaborador_apellido+' Nro Ident.: '+colaborador_info.Nro_Identificacion
                        fecha_novedad_date=datetime.now()
                        fecha_novedad=fecha_novedad_date.date()
                        hora_actual = fecha_novedad_date.strftime('%H:%M')
                        
                        if es_admin:

                            novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                        SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                        comentario= comment ,
                                                                        Fecha_novedad=fecha_novedad ,
                                                                        hora_novedad=hora_actual 
                                                                                            )
                        else:
                            novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                        SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                        comentario= comment ,
                                                                        Fecha_novedad=fecha_novedad ,
                                                                        hora_novedad=hora_actual ,
                                                                        Colaborador= user_profile_obj.Colaborador
                                                                                            )
    
                ##print('se grabo uno nuevo')

            '''if len(ver_si_hay_mismo_dia)==0:
                 #crear y guardar la nueva base datos
                 
            else:
                 #sustituir la ya existentente 
                 b=1'''
            

             

        '''if 'borrar' in values:
            el_dia_a_borrar=Dias_Feriados.objects.get(pk=int(request.POST["borrar"]))
            el_dia_a_borrar.delete()
        else:
            feriado = request.POST["dia_feriado"]
            if 'motivo' in values:
                motivo=request.POST["motivo"]
        


    
            created = Dias_Feriados.objects.get_or_create(Dia_Feriado=feriado,Motivo_Feriado=motivo)'''
        Mensaje='Colaborador agregado sastifactoriamente en sus jornadas laborales, Dias agregado : '+str(len(lista_dia_entradaa))+' dias.'
        return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        #return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final})

def agregar_jornada_masiva(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1


    if request.method=='GET':
        
        lista_final=[]
        
        if nivel<4:
                 
                lista_clientes=Colaboradores.objects.filter(Status='Activo')
                lista_clientes= lista_clientes.exclude(Departamento__in=["Administrativo", "Ruta"])
            
        else:
                
                lista_clientes=Colaboradores.objects.filter(Supervisor__pk= user_profile_obj.Colaborador.pk, Status='Activo')
                lista_clientes= lista_clientes.exclude(Departamento__in=["Administrativo", "Ruta"]) 
                
        for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Hora_entrada ,
                        lista_clientes[i].Hora_salida ,
                        lista_clientes[i].Inicio_Hora_Almuerzo ,
                        lista_clientes[i].imagen ,

                        #<td><img src="{{ MEDIA_URL }}{{  clientes.7 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>

                        
                        
                        ]
                
                lista_final.append(lista)
      
        return render(request, "agregar_jornada_masiva_0.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def agregar_jornada_masiva_p1(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1


    if request.method=='GET':
        
        return redirect('agregar-jornada-masiva') 
    
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())
        
        # #print(request.FILES['archivo'])
        
       
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('agregar-jornada-masiva') 
         
        if 'fecha_inicial' in values:
           
            fecha_inicial_date=fun_convertir_string_date_a_fecha(request.POST["fecha_inicial"])
            fecha_final_date=fun_convertir_string_date_a_fecha(request.POST["fecha_final"])

            
            #### fecha de comparacion terminadas

            ###rechazar o aprobar
        
        #determinar colaborador
        lista_id_colab=[]
        if 'colaborador' in values:
            lista_id_col=request.POST.getlist("colaborador")
            
            ##print(lista_id_col,'0' in lista_id_col,"'0' in lista_id_col")
            if '0' in lista_id_col or '[0]' in lista_id_col:
                bool_hacer_todos=True
                lista_id_colab=[0]
            else:
                for idd in lista_id_col:
                    lista_id_colab.append(int(idd))
                bool_hacer_todos=False
                                  
        else:
            bool_hacer_todos=True
            lista_id_colab=[0]
             
        if True:
            if nivel<4:

                
                if bool_hacer_todos==False:
                    lista_permisos=Permisos.objects.filter(Colaborador__Status='Activo' , Colaborador__pk__in=lista_id_colab)
                else:
                    lista_permisos=Permisos.objects.filter(Colaborador__Status='Activo')

                lista_permisos= lista_permisos.exclude(Colaborador__Departamento__in=["Administrativo", "Ruta"])
            
            else:
                if bool_hacer_todos==False:
                    lista_permisos=Permisos.objects.filter(Colaborador__Supervisor__pk= user_profile_obj.Colaborador.pk, Colaborador__Status='Activo', Colaborador__pk__in=lista_id_colab )
                else:
                    lista_permisos=Permisos.objects.filter(Colaborador__Supervisor__pk= user_profile_obj.Colaborador.pk, Colaborador__Status='Activo')

                lista_permisos= lista_permisos.exclude(Colaborador__Departamento__in=["Administrativo", "Ruta"]) 

            siguiente_bool=True
            lista_ausencia=[]
            for permisos in lista_permisos:
                dia_inicio_permiso=permisos.Dia_inicio_permiso
                dia_fin_permiso=permisos.Dia_fin_permiso
                '''#print(dia_inicio_permiso,dia_fin_permiso)
                #print('inicio',fecha_inicial_corte.date(),'final', fecha_final_corte.date())
                #print('*/********')'''
                
                dias = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_date,fecha_final_date)
                if dias>0:
                    
                    tipo_permiso=permisos.Tipo_permiso
                    estado_permiso=permisos.Estado_Permiso
                    if estado_permiso=='Pendiente':
                         siguiente_bool=False
                    
                    aprobado_por=permisos.Aprobado_por
                    documento_permiso=permisos.Documento_permiso
                    nombre=permisos.Colaborador.Colaborador_nombre+' '+permisos.Colaborador.Colaborador_apellido
                    cargo=permisos.Colaborador.Cargo
                    dpto=permisos.Colaborador.Departamento
                    motivo=permisos.Comentario_Permiso

                    lista=[permisos.pk,
                                    nombre,
                                    cargo,
                                    dpto,
                                    dia_inicio_permiso,
                                    dia_fin_permiso,
                                    motivo,
                                    estado_permiso,
                                    documento_permiso,
                                    aprobado_por,
                                    tipo_permiso,
                                    permisos.Colaborador.imagen

                                    #<td><img src="{{ MEDIA_URL }}{{  clientes.11 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                    ]
                
                    lista_ausencia.append(lista)
                 
            
        return render(request, "agregar_jornada_masiva_1.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_id_colab':lista_id_colab, 'lista_cliente':lista_ausencia,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'siguiente_bool':siguiente_bool , 'fecha_inicial':str(request.POST["fecha_inicial"]) , 'fecha_final': str(request.POST["fecha_final"])})

def agregar_jornada_masiva_p2(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1


    if request.method=='GET':
        
        return redirect('agregar-jornada-masiva') 
    
    elif request.method=='POST':
        #print(request.POST)
        existo='no existo'
        Mensaje=''
        lista_ausencia_final=[]
        siguiente_bool=False
             
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
   
        if 'Regresar' in values:
             return redirect('agregar-jornada-masiva') 
        

        if 'fecha_inicial' in values:
           
            fecha_inicial_date=fun_convertir_string_date_a_fecha(request.POST["fecha_inicial"])
            fecha_final_date=fun_convertir_string_date_a_fecha(request.POST["fecha_final"])

        lista_id_colab=[]
        if 'colaborador' in values:
            col=request.POST["colaborador"]
            col=col.replace('[','')
            col=col.replace(']','')
            lista_id_col=col.split (',')
            if '0' in lista_id_col:
                bool_hacer_todos=True
                lista_id_colab=[0]
            else:
                for idd in lista_id_col:
                    lista_id_colab.append(int(idd))
                bool_hacer_todos=False
                                  
        else:
            bool_hacer_todos=True
            lista_id_colab=[0]

        if 'Actualizar' in values:
            existo='existo'
            Mensaje='Colaborador(es) agregado correctamente su jornada de Laboral.'
            if nivel>3:
                if bool_hacer_todos:
                    lista_colaboradores_filtrados=  Planificacion.objects.filter(Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk,   Colaborador__Status='Activo', Colaborador__Fecha_Ingreso__lte=fecha_final_date , Dia_Inicio_Planificacion__lte=fecha_final_date)
                else:
                    lista_colaboradores_filtrados=  Planificacion.objects.filter(Colaborador__pk__in=lista_id_colab )
                     
            
            else:
                
                
                if bool_hacer_todos:
                    lista_colaboradores_filtrados=  Planificacion.objects.filter(  Colaborador__Status='Activo', Colaborador__Fecha_Ingreso__lte=fecha_final_date , Dia_Inicio_Planificacion__lte=fecha_final_date)
                else:
                    lista_colaboradores_filtrados=  Planificacion.objects.filter(Colaborador__pk__in=lista_id_colab )
            lista_colb=[]
            for obj_col in lista_colaboradores_filtrados:
                id_col=obj_col.Colaborador.pk
                if id_col not in lista_colb:
                    lista_colb.append(id_col)
                  


            #lista feriado
            lista_feriados_obj=Dias_Feriados.objects.filter(Dia_Feriado__range=(fecha_inicial_date, fecha_final_date))  
            lista_feriados=[]
            if len(lista_feriados_obj)>0:
                for yy in lista_feriados_obj:
                    lista_feriados.append(yy.Dia_Feriado)
           
            
            #empieza interacion colaborador
            
            for id_col in lista_colb:
                trabaj_obj=Colaboradores.objects.get(pk=id_col)
                if True: #guardar Novedades
                                                tipo_seguimiento='Jornada Masiva'
                                                sUB_Tipo_seguimiento=' Creacion Masiva'
                                                comment=' Creacion Jornada  Masiva: Desde '+str(fecha_inicial_date)+' Hasta: '+str(fecha_final_date)+' Colaborador: '+trabaj_obj.Colaborador_nombre+' '+trabaj_obj.Colaborador_apellido+' Nro Ident.: '+trabaj_obj.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                            
                fecha_finall_datee=fecha_final_date
                                        
                Fecha_Ingreso=trabaj_obj.Fecha_Ingreso
               
                tipo_contrato=trabaj_obj.Tipo_contrato

                if fecha_inicial_date>Fecha_Ingreso:
                    
                    #'inicial corte es mayor que cuando entro',fecha_inicial_corte.date(), Fecha_Ingreso )
                    fecha_inicial_generar=fecha_inicial_date

                elif fecha_inicial_date<=Fecha_Ingreso:
                    
                    fecha_inicial_generar=Fecha_Ingreso
                
                ##print(trabaj_obj.Colaborador_nombre)
                ##print(tipo_contrato !='Contrato_Indefinido',tipo_contrato ,'Contrato_Indefinido', fecha_finall_datee)
                ##print(trabaj_obj.Fecha_Egreso < fecha_finall_datee, trabaj_obj.Fecha_Egreso , fecha_finall_datee, 'fecha_egreso < fecha_final_date')

                if tipo_contrato !='Contrato_Indefinido':
                    fecha_egreso=trabaj_obj.Fecha_Egreso
                    if fecha_egreso < fecha_finall_datee:
                        fecha_finall_datee=fecha_egreso
                ##print(fecha_finall_datee,'fecha_final_date')
            #vacaciones en rango fecha
                      
                obj_si_hay_permiso_fecha_generar=Permisos.objects.filter(Colaborador__pk=trabaj_obj.pk, Estado_Permiso='Aprobado')

                lista_persimo_trabj=[]
                if len(obj_si_hay_permiso_fecha_generar)>0:
                     
                     for permisos in obj_si_hay_permiso_fecha_generar:
                        
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_generar, fecha_finall_datee )
                        
                        if diass>0 and permisos.Estado_Permiso=='Aprobado':
                            
                            lista_persimo_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                         
                lista_persimo_trabj_final=[]
                
                if len(lista_persimo_trabj)>0:
                     for dia_d_per in lista_persimo_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_persimo_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

               
            # modificar rango inicio y final para creacion de fechas
            #ya dia a dia pregunta los datos del dia de ese dia especifico como feriado dia libre horas y demas cosas
                iter_inicio=True
                fecha_iterador=fecha_inicial_generar
                if fecha_iterador > trabaj_obj.Fecha_Egreso:
                     iter_inicio=False
                dias_trabajados=0
                permisos_tomados=0
                lista_horarios=[]
                siguiente_bool=True
                
                while iter_inicio:

                    
                    saber_dia=fecha_iterador.weekday()
                    #print(fecha_iterador,saber_dia,'saber_dia', trabaj_obj.Colaborador_nombre , fecha_finall_datee  )
                    #input()
                        
                        

                    if fecha_iterador in lista_feriados:
                            a=1
                            
                        
                    elif fecha_iterador in lista_persimo_trabj_final:
                            permisos_tomados+=1
                        
                            a=1
                    else:
                       
                        lista_estudiar_planificacion=lista_colaboradores_filtrados.filter(Colaborador__pk=id_col, Dia_Inicio_Planificacion__lte=fecha_iterador , Dia_Salidad_Planificacion__gte=fecha_iterador )
                        #lista_estudiar_planificacion=lista_colaboradores_filtrados.filter(Colaborador__pk=id_col)
                       
                        if len(lista_estudiar_planificacion)>0:
                            #si hay datos y se elegira la ultima
                            u=len(lista_estudiar_planificacion)-1
                            lista_datos_importantes=fun_saber_datos_depende_dia_para_hoja_tiempo(lista_estudiar_planificacion[u],saber_dia ) #lista con la ultima de planificacion, dia de la semana
                            
                            
                            #[Cliente,hora_entrada_contrato,hora_salida_contrato,jornada_diaria, Almuerzo,hora_de_inicio_almuerzo, dia_descanso, tipo_de_jornada]
                        
                            jornada_semanal=48

                            #saber si es dia de descanso para marcarlo como dia de descanso

                            #sino es dia de descanso pues pedir toda la info para crear 1 dia unico 

                            empresa_info=lista_datos_importantes[0]
                            hora_entrada_contrato = lista_datos_importantes[1]
                            hora_salida_contrato = lista_datos_importantes[2]
                            jornada_diaria =lista_datos_importantes[3]
                            Almuerzo=lista_datos_importantes[4]
                            hora_de_inicio_almuerzo=lista_datos_importantes[5]
                            if hora_de_inicio_almuerzo!=23:
                                hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                            else:
                                hora_de_final_almuerzo=0
                            dia_descanso_1=lista_datos_importantes[6]
                            dia_descanso_2=8

                           

                            tipo_de_jornada=lista_datos_importantes[7]
                            categoria_empleado=lista_estudiar_planificacion[u].Colaborador.Departamento #si sale ruta
                            
                            jornada_semanal=lista_estudiar_planificacion[u].Colaborador.Jornada_semanal

                            if jornada_diaria >0:
                                #no es domingo se crea jornada diaria
                                dias_trabajados+=1


                                if tipo_de_jornada=='Nocturna':
                                    a = str(fecha_iterador)+' '+hora_entrada_contrato
                                    b = str(fecha_iterador + timedelta(days=1))+' '+hora_salida_contrato
                                    lista_horarios=[[a,b]]
                                    resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(lista_horarios,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,lista_feriados)
                                
                                else:
                                    a = str(fecha_iterador)+' '+hora_entrada_contrato
                                    b = str(fecha_iterador)+' '+hora_salida_contrato
                                    lista_horarios=[[a,b]]
                                    resultados = calcular_minutos_trabajados_diario_horas(lista_horarios,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,lista_feriados)

                                for i in resultados:
                                    dia_entrada= i[0]
                                    hr_entrada = i[1]
                                    dia_salida = i[2]
                                    hr_salida = i[3]
                                    minutos_trabajados = i[4]
                                    minutos_trabajadas_jornada_laboral = i[5]
                                    minutos_extras_diurnos=i[6]
                                    minutos_extras_nocturnos = i[7]
                                    horas_laborales_extras = i[8]
                                    minutos_de_tardia = i[9]
                                    min_faltante_de_turno = i[10]
                                    min_llego_temprano  =i[11]
                                    minutos_de_extras_mixtas_nocturnas=i[12]
                                    minutos_de_extras_mixtas_diurnas=i[13]
                                    minutos_extras_diurnos_3hr  =i[14]
                                    minutos_extras_nocturnos_3hr =i[15]
                                    minutos_de_extras_mixtas_diurnas_3hr = i[16]
                                    minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                                    laboro_dia_domingo_descanso= i[18]
                                    laboro_dia_feriado=i[19]
                                    if es_admin:
                                        Quien_agrego_Jornada='Administrador'
                                    else:
                                        Quien_agrego_Jornada = user_profile_obj.Colaborador.Colaborador_nombre+' '+ user_profile_obj.Colaborador.Colaborador_apellido
                                         

                                    '''ver_si_hay_mismo_dia=Hoja_tiempo.objects.filter(Colaborador_id=colaborador_info.pk)
                                    ver_si_hay_mismo_dia=Hoja_tiempo.objects.filter(Dia_entrada__icontains=dia_entrada)'''
                                    try:
                                
                                        created = Hoja_tiempo.objects.get(Dia_entrada=dia_entrada,Colaborador_id=trabaj_obj.pk)
                                        Hoja_tiempo.objects.filter(pk=created.pk).update(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= trabaj_obj,Empresa=empresa_info,  Quien_agrego_Jornada=Quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                                        ##print('se grabo uno ya existente')
                                    except ObjectDoesNotExist:
                                        #crear nuevo dia
                                        created = Hoja_tiempo.objects.create(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= trabaj_obj,Empresa=empresa_info,  Quien_agrego_Jornada=Quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                                        ##print('se grabo uno nuevo')

                            


        
                #aqui si el ultimo dia y el primero son iguales se cierra creacion 


                    if fecha_iterador>=fecha_finall_datee:
                            iter_inicio=False
                    
                    elif fecha_iterador== trabaj_obj.Fecha_Egreso:
                         iter_inicio=False
                        
                    else:
                        fecha_iterador+=timedelta(days=1)
                    
                    ##print(fecha_iterador,fecha_final_date,iter_inicio)
                    ##print(trabaj_obj.Colaborador_nombre, trabaj_obj.Colaborador_apellido)
                    #input('siguientedia\n')


            #recibves la info y la guardas
            #siguiente dia
            #

           
            
        
        if True: #Hacer lista ver usuario  

            

            if nivel<4:

                if bool_hacer_todos:
                   lista_colaboradores_filtrados=  Colaboradores.objects.filter(Status='Activo', Fecha_Ingreso__lte=fecha_final_date)
                   lista_colaboradores_filtrados=lista_colaboradores_filtrados.exclude(Departamento__in=["Administrativo", "Ruta"])
                else:
                    lista_colaboradores_filtrados=  Colaboradores.objects.filter(pk__in=lista_id_colab )
                 
                
            
            else:
                if bool_hacer_todos:
                   lista_colaboradores_filtrados=Colaboradores.objects.filter(Supervisor__pk= user_profile_obj.Colaborador.pk, Status='Activo', Fecha_Ingreso__lte=fecha_final_date)
                   lista_colaboradores_filtrados= lista_colaboradores_filtrados.exclude(Departamento__in=["Administrativo", "Ruta"]) 
                else:
                    lista_colaboradores_filtrados=  Colaboradores.objects.filter(pk__in=lista_id_colab )
                
                


            num=0
            
            for colab_obj in lista_colaboradores_filtrados:
                lista_permisos=[]
                tipos_permiso=[]
            
                lista_hoja_tiempo=Hoja_tiempo.objects.filter(Colaborador__pk=colab_obj.pk, Dia_entrada__gte=fecha_inicial_date, Dia_entrada__lte=fecha_final_date )
            
                num_dias=len(lista_hoja_tiempo)

                # ver si tiene permisos
                obj_si_hay_permiso_fecha=Permisos.objects.filter( Colaborador__pk = colab_obj.pk )
                dias_permiso=0
                if len(obj_si_hay_permiso_fecha)>0:
                     #si hay datos
                     for permisos in obj_si_hay_permiso_fecha:
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_date, fecha_final_date)
                        if diass>0 and permisos.Estado_Permiso=='Aprobado':
                            lista_permisos.append(' Inicio: '+str(dia_inicio_permiso)+' Final: '+str(dia_fin_permiso))
                            tipos_permiso.append(permisos.Tipo_permiso)
                            dias_permiso+=permisos.Dias_permiso

                            
                             

                else:
                    bool_permiso=False
                    fecha='Sin Permisos'
                

                Permiso_string=''
                tipo_permiso_string=''
                if len(lista_permisos)==0:
                    Permiso_string='Sin Permiso en este Q.'  
                else:
                    for dd in   lista_permisos:
                        Permiso_string+=dd+'\n'
                

                if len(tipos_permiso)==0:
                    tipo_permiso_string='Sin T Permiso en este Q.'  
                else:
                    for dd in   tipos_permiso:
                        tipo_permiso_string+=dd+'\n'

                num += 1
                lista=[num,
                        num_dias,
                        colab_obj.Nro_Identificacion,
                        colab_obj.Colaborador_nombre+' '+colab_obj.Colaborador_apellido,
                        colab_obj.Cargo,
                        colab_obj.Departamento,
                        tipo_permiso_string,
                        Permiso_string,
                        dias_permiso,
                        colab_obj.imagen
                        ]

                lista_ausencia_final.append(lista)


            
            

            
        return render(request, "agregar_jornada_masiva_2.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'agregado':existo, 'Mensaje':Mensaje, 'lista_id_colab':lista_id_colab,  'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores,'siguiente_bool':siguiente_bool , 'fecha_inicial':str(request.POST["fecha_inicial"]) , 'fecha_final': str(request.POST["fecha_final"])})


def agregar_planificacion_colaboradores(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1


    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        try:
            if nivel<4:
                 
                lista_clientes=Colaboradores.objects.filter(Status='Activo')
                lista_clientes= lista_clientes.exclude(Departamento__in=["Administrativo", "Ruta"])
            
            else:
                
                lista_clientes=Colaboradores.objects.filter(Supervisor__pk= user_profile_obj.Colaborador.pk, Status='Activo')
                lista_clientes= lista_clientes.exclude(Departamento__in=["Administrativo", "Ruta"]) 


            for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Hora_entrada ,
                        lista_clientes[i].Hora_salida ,
                        lista_clientes[i].Inicio_Hora_Almuerzo ,
                        lista_clientes[i].imagen ,

                        #<td><img src="{{ MEDIA_URL }}{{  clientes.7 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>

                        
                        
                        ]
                lista_final.append(lista)
            
            lista_empresass=Info_Clientes.objects.all() 
            for i in range(len(lista_empresass)):
                lista=[lista_empresass[i].pk,
                       lista_empresass[i].Codigo_cliente,
                        lista_empresass[i].nombre_empresa ,
                        
                        ]
                lista_empresas.append(lista)
            
        except:
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            lista_empresas.append(lista)

        
        return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        lista_empresas=[]
        try:
            
            lista_clientes=Colaboradores.objects.filter(Status='Activo')
            lista_clientes= lista_clientes.exclude(Departamento__in=["Administrativo", "Ruta"])
            for i in range(len(lista_clientes)):
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Hora_entrada ,
                        lista_clientes[i].Hora_salida ,
                        lista_clientes[i].Inicio_Hora_Almuerzo ,
                        lista_clientes[i].imagen ,

                        
                        
                        ]
                lista_final.append(lista)
            
            lista_empresass=Info_Clientes.objects.all() 
            for i in range(len(lista_empresass)):
                lista=[lista_empresass[i].pk,
                       lista_empresass[i].Codigo_cliente,
                        lista_empresass[i].nombre_empresa ,
                        
                        ]
                lista_empresas.append(lista)
            
        except:
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            lista_empresas.append(lista)

        
        values= list(request.POST.keys())
        #print(request.POST)
        ##print(request.POST)
        if 'empresa' not in values:
          
            Mensaje='Error.! No Agregaste una Empresa, Por favor asigna una empresa en la jornada Laboral.'
            return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
            
        if 'colaborador' not in values:
           
            Mensaje='Error.! No Agregaste un Colaborador, Por favor asigna un Colaborador en la jornada Laboral.'
            return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

    

        lista_dia_entrada=fun_convertir_string_date_a_fecha(request.POST["fecha_inicio_Planificacion"])
        
        lista_dia_salida=fun_convertir_string_date_a_fecha(request.POST["fecha_final_Planificacion"])

        if lista_dia_entrada>=lista_dia_salida:
                Mensaje='Error.! Fecha Inicio es una mas fecha mayor que Fecha Final, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        Descanso_Lunes=False
        Descanso_Martes=False
        Descanso_Miercoles=False
        Descanso_Jueves=False
        Descanso_Viernes=False
        Descanso_Sabado=False
        Descanso_Domingo=True

      
        hr_Lunes=float(request.POST["Lunes"])
        if hr_Lunes>0:
            hora_entrada_Lunes=request.POST["hora_entrada_Lunes"]
            hora_salida_Lunes=request.POST["hora_salida_Lunes"]
            almuerzo_aplica_Lunes=request.POST["almuerzo_aplica_Lunes"]
            if almuerzo_aplica_Lunes=='Si':
                almuerzo_aplica_Lunes=True
            else:
                almuerzo_aplica_Lunes=False

            inicio_Almuerzo_Lunes=int(request.POST["inicio_Almuerzo_Lunes"])
            Dia_Siguiente_Lunes=request.POST["Dia_Siguiente_Lunes"]
            if Dia_Siguiente_Lunes=='Si':
                Dia_Siguiente_Lunes=True
            else:
                Dia_Siguiente_Lunes=False

            resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Lunes,hora_entrada_Lunes,hora_salida_Lunes,almuerzo_aplica_Lunes,inicio_Almuerzo_Lunes,Dia_Siguiente_Lunes)
        


            if resultado==False:

                Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de LUNES, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            Descanso_Lunes=True
            hora_entrada_Lunes = '08:00'
            hora_salida_Lunes= '08:00'
            almuerzo_aplica_Lunes= True
            inicio_Almuerzo_Lunes=12
            Dia_Siguiente_Lunes= False

        hr_Martes=float(request.POST["Martes"])
        if hr_Martes>0:
                
                hora_entrada_Martes=request.POST["hora_entrada_Martes"]
                hora_salida_Martes=request.POST["hora_salida_Martes"]
                almuerzo_aplica_Martes=request.POST["almuerzo_aplica_Martes"]
                if almuerzo_aplica_Martes=='Si':
                    almuerzo_aplica_Martes=True
                else:
                    almuerzo_aplica_Martes=False

                inicio_Almuerzo_Martes=int(request.POST["inicio_Almuerzo_Martes"])
                Dia_Siguiente_Martes=request.POST["Dia_Siguiente_Martes"]
                if Dia_Siguiente_Martes=='Si':
                    Dia_Siguiente_Martes=True
                else:
                    Dia_Siguiente_Martes=False

                resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Martes,hora_entrada_Martes,hora_salida_Martes,almuerzo_aplica_Martes,inicio_Almuerzo_Martes,Dia_Siguiente_Martes)
                
                if resultado==False:

                    Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de MARTES, Por favor asigna correctamente las fechas.'
                    return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            
            Descanso_Martes=True
            hora_entrada_Martes = '08:00'
            hora_salida_Martes= '08:00'
            almuerzo_aplica_Martes= True
            inicio_Almuerzo_Martes=12
            Dia_Siguiente_Martes= False

        hr_Miercoles=float(request.POST["Miercoles"])
        if hr_Miercoles>0:
            hora_entrada_Miercoles=request.POST["hora_entrada_Miercoles"]
            hora_salida_Miercoles=request.POST["hora_salida_Miercoles"]
            almuerzo_aplica_Miercoles=request.POST["almuerzo_aplica_Miercoles"]
            if almuerzo_aplica_Miercoles=='Si':
                almuerzo_aplica_Miercoles=True
            else:
                almuerzo_aplica_Miercoles=False

            inicio_Almuerzo_Miercoles=int(request.POST["inicio_Almuerzo_Miercoles"])
            Dia_Siguiente_Miercoles=request.POST["Dia_Siguiente_Miercoles"]
            if Dia_Siguiente_Miercoles=='Si':
                Dia_Siguiente_Miercoles=True
            else:
                Dia_Siguiente_Miercoles=False

            resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Miercoles,hora_entrada_Miercoles,hora_salida_Miercoles,almuerzo_aplica_Miercoles,inicio_Almuerzo_Miercoles,Dia_Siguiente_Miercoles)
            
            if resultado==False:

                Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de MIERCOLES, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            
            Descanso_Miercoles=True
            hora_entrada_Miercoles = '08:00'
            hora_salida_Miercoles= '08:00'
            almuerzo_aplica_Miercoles= True
            inicio_Almuerzo_Miercoles=12
            Dia_Siguiente_Miercoles= False



        hr_Jueves=float(request.POST["Jueves"])
        if hr_Jueves>0:

            hora_entrada_Jueves=request.POST["hora_entrada_Jueves"]
            hora_salida_Jueves=request.POST["hora_salida_Jueves"]
            almuerzo_aplica_Jueves=request.POST["almuerzo_aplica_Jueves"]
            if almuerzo_aplica_Jueves=='Si':
                almuerzo_aplica_Jueves=True
            else:
                almuerzo_aplica_Jueves=False

            inicio_Almuerzo_Jueves=int(request.POST["inicio_Almuerzo_Jueves"])
            Dia_Siguiente_Jueves=request.POST["Dia_Siguiente_Jueves"]
            if Dia_Siguiente_Jueves=='Si':
                Dia_Siguiente_Jueves=True
            else:
                Dia_Siguiente_Jueves=False

            resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Jueves,hora_entrada_Jueves,hora_salida_Jueves,almuerzo_aplica_Jueves,inicio_Almuerzo_Jueves,Dia_Siguiente_Jueves)
            
            if resultado==False:

                Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de JUEVES, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        else:
            Descanso_Jueves=True
            hora_entrada_Jueves = '08:00'
            hora_salida_Jueves= '08:00'
            almuerzo_aplica_Jueves= True
            inicio_Almuerzo_Jueves=12
            Dia_Siguiente_Jueves= False

        
        hr_Viernes=float(request.POST["Viernes"])
        if hr_Viernes>0:
            hora_entrada_Viernes=request.POST["hora_entrada_Viernes"]
            hora_salida_Viernes=request.POST["hora_salida_Viernes"]
            almuerzo_aplica_Viernes=request.POST["almuerzo_aplica_Viernes"]
            if almuerzo_aplica_Viernes=='Si':
                almuerzo_aplica_Viernes=True
            else:
                almuerzo_aplica_Viernes=False

            inicio_Almuerzo_Viernes=int(request.POST["inicio_Almuerzo_Viernes"])
            Dia_Siguiente_Viernes=request.POST["Dia_Siguiente_Viernes"]
            if Dia_Siguiente_Viernes=='Si':
                Dia_Siguiente_Viernes=True
            else:
                Dia_Siguiente_Viernes=False

            resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Viernes,hora_entrada_Viernes,hora_salida_Viernes,almuerzo_aplica_Viernes,inicio_Almuerzo_Viernes,Dia_Siguiente_Viernes)
            
            if resultado==False:

                Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de VIERNES, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
           
           
            Descanso_Viernes=True
            hora_entrada_Viernes = '08:00'
            hora_salida_Viernes= '08:00'
            almuerzo_aplica_Viernes= True
            inicio_Almuerzo_Viernes=12
            Dia_Siguiente_Viernes= False


        hr_Sabado=float(request.POST["Sabado"])
        if hr_Sabado>0:
            hora_entrada_Sabado=request.POST["hora_entrada_Sabado"]
            hora_salida_Sabado=request.POST["hora_salida_Sabado"]
            almuerzo_aplica_Sabado=request.POST["almuerzo_aplica_Sabado"]
            if almuerzo_aplica_Sabado=='Si':
                almuerzo_aplica_Sabado=True
            else:
                almuerzo_aplica_Sabado=False

            inicio_Almuerzo_Sabado=int(request.POST["inicio_Almuerzo_Sabado"])
            Dia_Siguiente_Sabado=request.POST["Dia_Siguiente_Sabado"]
            if Dia_Siguiente_Sabado=='Si':
                Dia_Siguiente_Sabado=True
            else:
                Dia_Siguiente_Sabado=False

            resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Sabado,hora_entrada_Sabado,hora_salida_Sabado,almuerzo_aplica_Sabado,inicio_Almuerzo_Sabado,Dia_Siguiente_Sabado)
            
            if resultado==False:

                Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de SABADO, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            Descanso_Sabado=True
            hora_entrada_Sabado = '08:00'
            hora_salida_Sabado= '08:00'
            almuerzo_aplica_Sabado= True
            inicio_Almuerzo_Sabado=12
            Dia_Siguiente_Sabado= False

        hr_Domingo=float(request.POST["Domingo"])
        if hr_Domingo>0:
            hora_entrada_Domingo=request.POST["hora_entrada_Domingo"]
            hora_salida_Domingo=request.POST["hora_salida_Domingo"]
            almuerzo_aplica_Domingo=request.POST["almuerzo_aplica_Domingo"]
            if almuerzo_aplica_Domingo=='Si':
                almuerzo_aplica_Domingo=True
            else:
                almuerzo_aplica_Domingo=False

            inicio_Almuerzo_Domingo=int(request.POST["inicio_Almuerzo_Domingo"])
            Dia_Siguiente_Domingo=request.POST["Dia_Siguiente_Domingo"]
            if Dia_Siguiente_Domingo=='Si':
                Dia_Siguiente_Domingo=True
            else:
                Dia_Siguiente_Domingo=False

            resultado=fun_determinar_horas_bien_planificacion(lista_dia_entrada,hr_Domingo,hora_entrada_Domingo,hora_salida_Domingo,almuerzo_aplica_Domingo,inicio_Almuerzo_Domingo,Dia_Siguiente_Domingo)
            
            if resultado==False:

                Mensaje='Error.! Fechas no concuerdan entre la salida, entrada , Almuerzo y pregunta de Jornada Nocturna de Domingo, Por favor asigna correctamente las fechas.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            Descanso_Domingo=True
            hora_entrada_Domingo = '08:00'
            hora_salida_Domingo= '08:00'
            almuerzo_aplica_Domingo= True
            inicio_Almuerzo_Domingo=12
            Dia_Siguiente_Domingo= False


        Suma_JR_Semanal=hr_Sabado+hr_Viernes+hr_Jueves+hr_Miercoles+hr_Martes+hr_Lunes+hr_Domingo

        #verificar que las horas semanas escritas aqui coincidan con las hr de su planilla
        empresa=request.POST["empresa"]
        empresa_info=Info_Clientes.objects.get(pk=int(empresa))
        colaboradores=request.POST.getlist("colaborador")
        for colaborador in colaboradores:
            colaborador_info=Colaboradores.objects.get(pk=int(colaborador))
            jornada_semanal = colaborador_info.Jornada_semanal
            if Suma_JR_Semanal !=jornada_semanal:
                nombre=colaborador_info.Colaborador_nombre+' '+colaborador_info.Colaborador_apellido
                Mensaje='Error.! Jornada Semanal  no concuerdan entre Suma de hora en Planificacion ( '+str(Suma_JR_Semanal)+' ) con Su Ficha creada ( '+str(jornada_semanal)+' ) , Colaborador: '+nombre+', Por favor asigna correctamente jornadas que den las misma horas semanal que el Colaborador en su ficha tecnica.'
                return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
       
            try:
                created=Planificacion.objects.get(Colaborador=colaborador_info,Dia_Inicio_Planificacion=lista_dia_entrada,Dia_Salidad_Planificacion=lista_dia_salida)
                created.Cliente = empresa_info
                created.Hr_Laboradas_Lunes = hr_Lunes
                created.Entrada_Lunes = hora_entrada_Lunes
                created.Salida_Lunes = hora_salida_Lunes
                created.Almuerzo_bool_Lunes =  almuerzo_aplica_Lunes
                created.Inicio_Hora_Almuerzo_Lunes = inicio_Almuerzo_Lunes
                created.Jornada_Nocturna_bool_Lunes = Dia_Siguiente_Lunes
                created.Dia_Descanso_bool_Lunes = Descanso_Lunes
                #Martes
                created.Hr_Laboradas_Martes = hr_Martes
                created.Entrada_Martes = hora_entrada_Martes
                created.Salida_Martes = hora_salida_Martes
                created.Almuerzo_bool_Martes =  almuerzo_aplica_Martes
                created.Inicio_Hora_Almuerzo_Martes = inicio_Almuerzo_Martes
                created.Jornada_Nocturna_bool_Martes = Dia_Siguiente_Martes
                created.Dia_Descanso_bool_Martes = Descanso_Martes
                #Miercoles
                created.Hr_Laboradas_Miercoles = hr_Miercoles
                created.Entrada_Miercoles = hora_entrada_Miercoles
                created.Salida_Miercoles = hora_salida_Miercoles
                created.Almuerzo_bool_Miercoles =  almuerzo_aplica_Miercoles
                created.Inicio_Hora_Almuerzo_Miercoles = inicio_Almuerzo_Miercoles
                created.Jornada_Nocturna_bool_Miercoles = Dia_Siguiente_Miercoles
                created.Dia_Descanso_bool_Miercoles = Descanso_Miercoles
                #Jueves
                created.Hr_Laboradas_Jueves = hr_Jueves
                created.Entrada_Jueves = hora_entrada_Jueves
                created.Salida_Jueves = hora_salida_Jueves
                created.Almuerzo_bool_Jueves =  almuerzo_aplica_Jueves
                created.Inicio_Hora_Almuerzo_Jueves = inicio_Almuerzo_Jueves
                created.Jornada_Nocturna_bool_Jueves = Dia_Siguiente_Jueves
                created.Dia_Descanso_bool_Jueves = Descanso_Jueves
                #Viernes
                created.Hr_Laboradas_Viernes = hr_Viernes
                created.Entrada_Viernes = hora_entrada_Viernes
                created.Salida_Viernes = hora_salida_Viernes
                created.Almuerzo_bool_Viernes =  almuerzo_aplica_Viernes
                created.Inicio_Hora_Almuerzo_Viernes = inicio_Almuerzo_Viernes
                created.Jornada_Nocturna_bool_Viernes = Dia_Siguiente_Viernes
                created.Dia_Descanso_bool_Viernes = Descanso_Viernes
                #Sabado
                created.Hr_Laboradas_Sabado = hr_Sabado
                created.Entrada_Sabado = hora_entrada_Sabado
                created.Salida_Sabado = hora_salida_Sabado
                created.Almuerzo_bool_Sabado =  almuerzo_aplica_Sabado
                created.Inicio_Hora_Almuerzo_Sabado = inicio_Almuerzo_Sabado
                created.Jornada_Nocturna_bool_Sabado = Dia_Siguiente_Sabado
                created.Dia_Descanso_bool_Sabado = Descanso_Sabado
                #Domingo
                created.Hr_Laboradas_Domingo = hr_Domingo
                created.Entrada_Domingo = hora_entrada_Domingo
                created.Salida_Domingo = hora_salida_Domingo
                created.Almuerzo_bool_Domingo =  almuerzo_aplica_Domingo
                created.Inicio_Hora_Almuerzo_Domingo = inicio_Almuerzo_Domingo
                created.Jornada_Nocturna_bool_Domingo = Dia_Siguiente_Domingo
                created.Dia_Descanso_bool_Domingo = Descanso_Domingo

                created.save()

                if True: #guardar Novedades
                        

                                                tipo_seguimiento='Planificacion de Jornada'
                                                sUB_Tipo_seguimiento=' Actualizar '
                                                comment=' Actualizar Planificacion Jornada  Masiva: '+request.POST["fecha_inicio_Planificacion"]+' Final: '+request.POST["fecha_final_Planificacion"]+' Colaborador: '+colaborador_info.Colaborador_nombre+' '+colaborador_info.Colaborador_apellido+' Nro Ident.: '+colaborador_info.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                            

            except:

                created=Planificacion.objects.create(Colaborador=colaborador_info,
                                     Dia_Inicio_Planificacion=lista_dia_entrada,
                                     Dia_Salidad_Planificacion=lista_dia_salida ,
                 Cliente = empresa_info
                , Hr_Laboradas_Lunes = hr_Lunes
                , Entrada_Lunes = hora_entrada_Lunes
                , Salida_Lunes = hora_salida_Lunes
                , Almuerzo_bool_Lunes =  almuerzo_aplica_Lunes
                , Inicio_Hora_Almuerzo_Lunes = inicio_Almuerzo_Lunes
                , Jornada_Nocturna_bool_Lunes = Dia_Siguiente_Lunes
                , Dia_Descanso_bool_Lunes = Descanso_Lunes
                #Martes
                , Hr_Laboradas_Martes = hr_Martes
                , Entrada_Martes = hora_entrada_Martes
                , Salida_Martes = hora_salida_Martes
                , Almuerzo_bool_Martes =  almuerzo_aplica_Martes
                , Inicio_Hora_Almuerzo_Martes = inicio_Almuerzo_Martes
                , Jornada_Nocturna_bool_Martes = Dia_Siguiente_Martes
                , Dia_Descanso_bool_Martes = Descanso_Martes
                #Miercoles
                , Hr_Laboradas_Miercoles = hr_Miercoles
                , Entrada_Miercoles = hora_entrada_Miercoles
                , Salida_Miercoles = hora_salida_Miercoles
                , Almuerzo_bool_Miercoles =  almuerzo_aplica_Miercoles
                , Inicio_Hora_Almuerzo_Miercoles = inicio_Almuerzo_Miercoles
                , Jornada_Nocturna_bool_Miercoles = Dia_Siguiente_Miercoles
                , Dia_Descanso_bool_Miercoles = Descanso_Miercoles
                #Jueves
                , Hr_Laboradas_Jueves = hr_Jueves
                , Entrada_Jueves = hora_entrada_Jueves
                , Salida_Jueves = hora_salida_Jueves
                , Almuerzo_bool_Jueves =  almuerzo_aplica_Jueves
                , Inicio_Hora_Almuerzo_Jueves = inicio_Almuerzo_Jueves
                , Jornada_Nocturna_bool_Jueves = Dia_Siguiente_Jueves
                , Dia_Descanso_bool_Jueves = Descanso_Jueves
                #Viernes
                , Hr_Laboradas_Viernes = hr_Viernes
                , Entrada_Viernes = hora_entrada_Viernes
                , Salida_Viernes = hora_salida_Viernes
                , Almuerzo_bool_Viernes =  almuerzo_aplica_Viernes
                , Inicio_Hora_Almuerzo_Viernes = inicio_Almuerzo_Viernes
                , Jornada_Nocturna_bool_Viernes = Dia_Siguiente_Viernes
                , Dia_Descanso_bool_Viernes = Descanso_Viernes
                #Sabado
                , Hr_Laboradas_Sabado = hr_Sabado
                , Entrada_Sabado = hora_entrada_Sabado
                , Salida_Sabado = hora_salida_Sabado
                , Almuerzo_bool_Sabado =  almuerzo_aplica_Sabado
                , Inicio_Hora_Almuerzo_Sabado = inicio_Almuerzo_Sabado
                , Jornada_Nocturna_bool_Sabado = Dia_Siguiente_Sabado
                , Dia_Descanso_bool_Sabado = Descanso_Sabado
                #Domingo
                , Hr_Laboradas_Domingo = hr_Domingo
                , Entrada_Domingo = hora_entrada_Domingo
                , Salida_Domingo = hora_salida_Domingo
                , Almuerzo_bool_Domingo =  almuerzo_aplica_Domingo
                , Inicio_Hora_Almuerzo_Domingo = inicio_Almuerzo_Domingo
                , Jornada_Nocturna_bool_Domingo = Dia_Siguiente_Domingo
                , Dia_Descanso_bool_Domingo = Descanso_Domingo
                 
                 )       

                if True: #guardar Novedades
                        

                                                tipo_seguimiento='Planificacion de Jornada'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Planificacion Jornada  Masiva: '+request.POST["fecha_inicio_Planificacion"]+' Final: '+request.POST["fecha_final_Planificacion"]+' Colaborador: '+colaborador_info.Colaborador_nombre+' '+colaborador_info.Colaborador_apellido+' Nro Ident.: '+colaborador_info.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                            

        #quede en guardar los datos en el modelo, crear descnaso y los demas por cada dia con el cliente

        Mensaje='Colaboradores ( '+str(len(colaboradores))+' ) agregados sastifactoriamente en sus Planificacion de jornada laboral.'
        return render(request, "agregar_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'lista_empresa':lista_empresas, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        #return render(request, "agregar_jornada_individual.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final})

def ver_planificacion(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
            
            if nivel<4:
                 
                lista_AJUSTE=Planificacion.objects.filter(Colaborador__Status='Activo')
                
            
            else:
                lista_supervisor=Planificacion.objects.filter(Colaborador__Status='Activo', Colaborador__pk=user_profile_obj.Colaborador.pk)
                lista_AJUSTE=Planificacion.objects.filter(Colaborador__Supervisor__pk= user_profile_obj.Colaborador.pk, Colaborador__Status='Activo') | lista_supervisor
                
           
        
            return render(request, "ver_planificacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_AJUSTE,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
   

def ver_jornada(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    

    if request.method=='GET':
        lista_final=[]
        #lista_clientes=Hoja_tiempo.objects.all()
        
        
        
        return render(request, "ver_jornada.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'request':request.method ,'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        existo='no existo'
        Mensaje=''
        #print(request.POST)
        values= list(request.POST.keys())
        if 'Borrar' in values:
            jornada_obj=Hoja_tiempo.objects.get(pk=request.POST["Borrar"])
            if True: #guardar Novedades
                        

                                                tipo_seguimiento='Hoja Tiempo'
                                                sUB_Tipo_seguimiento=' Eliminar '
                                                comment=' Eliminar Jornada de trabajo, Dia Inicio: '+str(jornada_obj.Dia_entrada)+' Salida: '+str(jornada_obj.Dia_salida)+' Colaborador: '+jornada_obj.Colaborador.Colaborador_nombre+' '+jornada_obj.Colaborador.Colaborador_apellido+' Nro Ident.: '+jornada_obj.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
            Mensaje=comment.replace('Eliminar','Eliminado') 
            existo='existo'   
            jornada_obj.delete()
            inicio=fun_convertir_string_date_a_fecha(request.POST['iniciall'])
            final=fun_convertir_string_date_a_fecha(request.POST['finall'])
            if nivel >=4:
                
                lista_Supervisor=Hoja_tiempo.objects.filter(Colaborador__pk=user_profile_obj.Colaborador.pk , Dia_entrada__range=(inicio, final))
                lista_clientes = Hoja_tiempo.objects.filter(Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk , Dia_entrada__range=(inicio, final)) | lista_Supervisor

            else:

                lista_clientes=Hoja_tiempo.objects.filter(Dia_entrada__range=(inicio, final))
            
            for i in range(len(lista_clientes)):
                minutos_Trabajads=fun_minutoss(lista_clientes[i].Minutos_Trabajads)
                Minutos_Trabajads_Jornada_Laboral=fun_minutoss(lista_clientes[i].Minutos_Trabajads_Jornada_Laboral)
                Minutos_Extras_Diurnos=fun_minutoss(lista_clientes[i].Minutos_Extras_Diurnos)
                Minutos_Extras_Noctuno=fun_minutoss(lista_clientes[i].Minutos_Extras_Noctuno)
                Minutos_Laborales_extras=fun_minutoss(lista_clientes[i].Minutos_Laborales_extras)
                Minutos_Tardia=fun_minutoss(lista_clientes[i].Minutos_Tardia)
                Minutos_Faltantes_turno=fun_minutoss(lista_clientes[i].Minutos_Faltantes_turno)
                Minutos_llego_temprano=fun_minutoss(lista_clientes[i].Minutos_llego_temprano)
                Minutos_extras_mixtas_nocturnas=fun_minutoss(lista_clientes[i].Minutos_extras_mixtas_nocturnas)
                Minutos_extras_mixtas_diurnas=fun_minutoss(lista_clientes[i].Minutos_extras_mixtas_diurnas)
                Minutos_extras_diurnos_3h=fun_minutoss(lista_clientes[i].Minutos_extras_diurnos_3h)
                Minutos_extras_nocturnos_3h=fun_minutoss(lista_clientes[i].Minutos_extras_nocturnos_3h)
                Minutos_de_extras_mixtas_diurnas_3hr=fun_minutoss(lista_clientes[i].Minutos_de_extras_mixtas_diurnas_3hr)
                Minutos_de_extras_mixtas_nocturnas_3hr=fun_minutoss(lista_clientes[i].Minutos_de_extras_mixtas_nocturnas_3hr)
                Laboro_dia_domingo_descanso=lista_clientes[i].Laboro_dia_domingo_descanso
                if Laboro_dia_domingo_descanso==True:
                     str_Laboro_dia_domingo_descanso='Si'
                else:
                     str_Laboro_dia_domingo_descanso='No'
                
                str_laboro_dia_feriado='No'
                laboro_dia_feriado=lista_clientes[i].laboro_dia_feriado
                if laboro_dia_feriado==True:
                     str_laboro_dia_feriado='Si'
                     
                

                lista=[lista_clientes[i].pk,
                        lista_clientes[i].Colaborador.Colaborador_nombre ,
                        lista_clientes[i].Colaborador.Colaborador_apellido,
                        lista_clientes[i].Colaborador.Cargo,
                        lista_clientes[i].Empresa.Codigo_cliente,
                        lista_clientes[i].Empresa.nombre_empresa,
                        str(lista_clientes[i].Dia_entrada),
                        str(lista_clientes[i].Dia_salida),
                        lista_clientes[i].Quien_agrego_Jornada,
                        minutos_Trabajads ,
                        Minutos_Trabajads_Jornada_Laboral, 
                        Minutos_Extras_Diurnos,
                        Minutos_Extras_Noctuno,
                        Minutos_Laborales_extras,
                        Minutos_Tardia,
                        Minutos_Faltantes_turno,
                        Minutos_llego_temprano,
                        Minutos_extras_mixtas_nocturnas,
                        Minutos_extras_mixtas_diurnas,
                        Minutos_extras_diurnos_3h,
                        Minutos_extras_nocturnos_3h,
                        Minutos_de_extras_mixtas_diurnas_3hr,
                        Minutos_de_extras_mixtas_nocturnas_3hr,
                        str_Laboro_dia_domingo_descanso,
                        str_laboro_dia_feriado,
                        lista_clientes[i].Entrada,
                        lista_clientes[i].Salida,


                        
                        ]
                lista_final.append(lista)
        
        
            return render(request, "ver_jornada.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'agregado':existo, 'Mensaje':Mensaje , 'request':request.method ,'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores , 'inicio':str(request.POST['iniciall']), 'final':str(request.POST['finall'])})
        
             

        if 'inicial' in values:
            inicio=fun_convertir_string_date_a_fecha(request.POST['inicial'])
            final=fun_convertir_string_date_a_fecha(request.POST['final'])
            if nivel >=4:
                
                lista_Supervisor=Hoja_tiempo.objects.filter(Colaborador__pk=user_profile_obj.Colaborador.pk , Dia_entrada__range=(inicio, final))
                lista_clientes = Hoja_tiempo.objects.filter(Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk , Dia_entrada__range=(inicio, final)) | lista_Supervisor

            else:

                lista_clientes=Hoja_tiempo.objects.filter(Dia_entrada__range=(inicio, final))
            
            for i in range(len(lista_clientes)):
                minutos_Trabajads=fun_minutoss(lista_clientes[i].Minutos_Trabajads)
                Minutos_Trabajads_Jornada_Laboral=fun_minutoss(lista_clientes[i].Minutos_Trabajads_Jornada_Laboral)
                Minutos_Extras_Diurnos=fun_minutoss(lista_clientes[i].Minutos_Extras_Diurnos)
                Minutos_Extras_Noctuno=fun_minutoss(lista_clientes[i].Minutos_Extras_Noctuno)
                Minutos_Laborales_extras=fun_minutoss(lista_clientes[i].Minutos_Laborales_extras)
                Minutos_Tardia=fun_minutoss(lista_clientes[i].Minutos_Tardia)
                Minutos_Faltantes_turno=fun_minutoss(lista_clientes[i].Minutos_Faltantes_turno)
                Minutos_llego_temprano=fun_minutoss(lista_clientes[i].Minutos_llego_temprano)
                Minutos_extras_mixtas_nocturnas=fun_minutoss(lista_clientes[i].Minutos_extras_mixtas_nocturnas)
                Minutos_extras_mixtas_diurnas=fun_minutoss(lista_clientes[i].Minutos_extras_mixtas_diurnas)
                Minutos_extras_diurnos_3h=fun_minutoss(lista_clientes[i].Minutos_extras_diurnos_3h)
                Minutos_extras_nocturnos_3h=fun_minutoss(lista_clientes[i].Minutos_extras_nocturnos_3h)
                Minutos_de_extras_mixtas_diurnas_3hr=fun_minutoss(lista_clientes[i].Minutos_de_extras_mixtas_diurnas_3hr)
                Minutos_de_extras_mixtas_nocturnas_3hr=fun_minutoss(lista_clientes[i].Minutos_de_extras_mixtas_nocturnas_3hr)
                Laboro_dia_domingo_descanso=lista_clientes[i].Laboro_dia_domingo_descanso
                if Laboro_dia_domingo_descanso==True:
                     str_Laboro_dia_domingo_descanso='Si'
                else:
                     str_Laboro_dia_domingo_descanso='No'
                
                str_laboro_dia_feriado='No'
                laboro_dia_feriado=lista_clientes[i].laboro_dia_feriado
                if laboro_dia_feriado==True:
                     str_laboro_dia_feriado='Si'
                     
                

                lista=[lista_clientes[i].pk,
                        lista_clientes[i].Colaborador.Colaborador_nombre ,
                        lista_clientes[i].Colaborador.Colaborador_apellido,
                        lista_clientes[i].Colaborador.Cargo,
                        lista_clientes[i].Empresa.Codigo_cliente,
                        lista_clientes[i].Empresa.nombre_empresa,
                        str(lista_clientes[i].Dia_entrada),
                        str(lista_clientes[i].Dia_salida),
                        lista_clientes[i].Quien_agrego_Jornada,
                        minutos_Trabajads ,
                        Minutos_Trabajads_Jornada_Laboral, 
                        Minutos_Extras_Diurnos,
                        Minutos_Extras_Noctuno,
                        Minutos_Laborales_extras,
                        Minutos_Tardia,
                        Minutos_Faltantes_turno,
                        Minutos_llego_temprano,
                        Minutos_extras_mixtas_nocturnas,
                        Minutos_extras_mixtas_diurnas,
                        Minutos_extras_diurnos_3h,
                        Minutos_extras_nocturnos_3h,
                        Minutos_de_extras_mixtas_diurnas_3hr,
                        Minutos_de_extras_mixtas_nocturnas_3hr,
                        str_Laboro_dia_domingo_descanso,
                        str_laboro_dia_feriado,
                        lista_clientes[i].Entrada,
                        lista_clientes[i].Salida,


                        
                        ]
                lista_final.append(lista)
        
        
            return render(request, "ver_jornada.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'request':request.method ,'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores , 'inicio':str(request.POST['inicial']), 'final':str(request.POST['final'])})
        
   
def agregar_permisos(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        
        try:
            
            
            if nivel >=4:
                
                lista_supervisor= Colaboradores.objects.filter(pk=user_profile_obj.Colaborador.pk)
                lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk , Status='Activo') | lista_supervisor

            else:

                lista_clientes=Colaboradores.objects.filter(Status='Activo')

            
            for i in range(len(lista_clientes)):
                vacas= lista_clientes[i].Fecha_Ingreso
                
                permiso_objj=Permisos.objects.filter(Colaborador__pk=lista_clientes[i].pk, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
                time_incapacidad=datetime.now()
                antiguedad_colaborador=str_diferencia_fechas(vacas, time_incapacidad.date())
                time_incapacidad=datetime(time_incapacidad.year, time_incapacidad.month, 1)
                retroceder_2_years=fun_fecha_retrocediendo_anos(time_incapacidad.date(), 2)
                Incapacidad_obj=Permisos.objects.filter(Dia_inicio_permiso__gte=retroceder_2_years, Colaborador__pk=lista_clientes[i].pk, Tipo_permiso='Incapacidad', Estado_Permiso='Aprobado', Pagado_por_Empresa_o_CCSS='empresa')
                num_vacas_usada=0
                num_incapacidad=0
                for y in permiso_objj:
                    num_vacas_usada+=y.Dias_permiso
                
                for y in Incapacidad_obj:
                    num_incapacidad+=y.Dias_permiso

                Vacaciones_totales=calcular_dias_vacaciones(vacas,num_vacas_usada)
                Incapacidad_disponible=calcular_incapacidad_dias(vacas,num_incapacidad, lista_clientes[i])


                supervisor_instancia=Colaboradores.objects.get(pk=lista_clientes[i].pk)
                
                
                Vac_disponible=Vacaciones_totales - num_vacas_usada
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        Vac_disponible ,
                        
                        supervisor_instancia.Supervisor,
                        lista_clientes[i].imagen ,
                        Incapacidad_disponible,
                        antiguedad_colaborador


                        ##<td><img src="{{ MEDIA_URL }}{{  clientes.6 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        
                        ]
                lista_final.append(lista)
           
            
        except Exception as e:
            #print(e)
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            

        
        return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        
        try:
            
            if nivel >=4:
                
                lista_supervisor= Colaboradores.objects.filter(pk=user_profile_obj.Colaborador.pk)
                lista_clientes = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk , Status='Activo') | lista_supervisor

            else:

                lista_clientes=Colaboradores.objects.filter(Status='Activo')
            
            for i in range(len(lista_clientes)):
                vacas= lista_clientes[i].Fecha_Ingreso
                
                permiso_objj=Permisos.objects.filter(Colaborador__pk=lista_clientes[i].pk, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
                time_incapacidad=datetime.now()
                antiguedad_colaborador=str_diferencia_fechas(vacas, time_incapacidad.date())
                time_incapacidad=datetime(time_incapacidad.year, time_incapacidad.month, 1)
                retroceder_2_years=fun_fecha_retrocediendo_anos(time_incapacidad.date(), 2)
                Incapacidad_obj=Permisos.objects.filter(Dia_inicio_permiso__gte=retroceder_2_years, Colaborador__pk=lista_clientes[i].pk, Tipo_permiso='Incapacidad', Estado_Permiso='Aprobado', Pagado_por_Empresa_o_CCSS='empresa')
                num_vacas_usada=0
                num_incapacidad=0
                for y in permiso_objj:
                    num_vacas_usada+=y.Dias_permiso
                
                for y in Incapacidad_obj:
                    num_incapacidad+=y.Dias_permiso

                Vacaciones_totales=calcular_dias_vacaciones(vacas,num_vacas_usada)
                Incapacidad_disponible=calcular_incapacidad_dias(vacas,num_incapacidad)

                supervisor_instancia=Colaboradores.objects.get(pk=lista_clientes[i].pk)
                
                
                Vac_disponible=Vacaciones_totales - num_vacas_usada
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        Vac_disponible ,
                        
                        supervisor_instancia.Supervisor,
                        lista_clientes[i].imagen ,
                        Incapacidad_disponible,
                        antiguedad_colaborador


                        ##<td><img src="{{ MEDIA_URL }}{{  clientes.6 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        
                        ]
                lista_final.append(lista)
           
            
        except Exception as e:
           
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            

        
        values= list(request.POST.keys())
        archivos=list(request.FILES.keys())
        #print(request.POST)
        #print(request.FILES)
        
            
        if 'colaborador' not in values:
           
            Mensaje='Error.! No Agregaste un Colaborador, Por favor asigna un Colaborador en la Asignacion de Permiso.'
            return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


        
        dia_inicio=request.POST["dia_inicio"]
        colaborador=int(request.POST["colaborador"])
        dia_final=request.POST["dia_final"]
        tipo_Permiso=request.POST["Tipo_Permiso"]
        dias=int(request.POST["Dias"])
        motivo=request.POST["motivo"]
       
        date_dia_inicio=datetime.strptime(dia_inicio, '%Y-%m-%d')
        date_dia_final=datetime.strptime(dia_final, '%Y-%m-%d')
        dia_resta=date_dia_final-date_dia_inicio
        if dia_resta.days >0 and dia_resta.days >= dias-1 :
            a=1

        elif  dia_resta.days ==0 and dia_inicio == dia_final: 
            a=1 
              
        else:
            Mensaje='Error.! Escribistes mas dias de permiso o el rango de fecha seleccionado, Por favor Agrega correctamente la fecha y dias Asignacion de Permiso.'
            return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje , 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})     
        
        if es_admin:
            quien_agrego_Jornada='Administrador'
        else:
            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

        if tipo_Permiso=='Vacaciones':
             
            colaborador_permiso=Colaboradores.objects.get(pk=colaborador)
            vacas= colaborador_permiso.Fecha_Ingreso
            permiso_objj=Permisos.objects.filter(Colaborador__pk=colaborador_permiso.pk, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
            num_vacas_usada=0
            for y in permiso_objj:
                    num_vacas_usada+=y.Dias_permiso
            Vacaciones_totales=calcular_dias_vacaciones(vacas,num_vacas_usada)
            Vac_disponible=Vacaciones_totales - num_vacas_usada
            if Vac_disponible>=dias:
                 #creat solicitud de permiso
                
                

                
    
                
                if 'archivo' in archivos:
                    colaborador_id=colaborador_permiso.pk
                
                    archivo_imagen = request.FILES["archivo"]
                    # Generar un nuevo nombre de archivo utilizando el nombre original
                    nombre_original, extension = os.path.splitext(archivo_imagen.name)
                    empresa='GoCleaning/'
                    subpath=empresa+'Permisos/Archivos_Vacaciones/'
                    # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
                    nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta

                    archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
            
                    # Utiliza FileSystemStorage para guardar el archivo en la subcarpeta
                   
                    created= Permisos.objects.get_or_create(Documento_permiso=archivo_guardado,Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                    

                else:
                     bool_archivo=False
                     created= Permisos.objects.get_or_create(Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                

                if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permisos'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Permisos, Tipo de Permiso: '+tipo_Permiso+' , Inicio: '+str(dia_inicio)+' Final: '+str(dia_final)+' Colaborador: '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' Nro Ident.: '+colaborador_permiso.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                            
    
                

                Mensaje='Gestion de Dias Vacaciones realizada con exito!. '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' del '+dia_inicio+' al '+dia_final+' por cantidad de dias: '+str(dias)
                return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 
            
            else:
                Mensaje='Error.! No hay Dias Vacaciones disponibles para este permiso, Por favor Agrega correctamente la fecha y dias Asignacion de Permiso.'
                return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'existo', 'agregado':'existo', 'Mensaje': Mensaje})     
                 
        elif tipo_Permiso=='Incapacidad':
            colaborador_permiso=Colaboradores.objects.get(pk=colaborador)
            

            if 'archivo' in archivos:
                    colaborador_id=colaborador_permiso.pk
                
                    archivo_imagen = request.FILES["archivo"]
                    # Generar un nuevo nombre de archivo utilizando el nombre original
                    nombre_original, extension = os.path.splitext(archivo_imagen.name)
                    empresa='GoCleaning/'
                    subpath=empresa+'Permisos/Archivos_Incapacidad/'
                    # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
                    nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta

                    archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
        
                    # Utiliza FileSystemStorage para guardar el archivo en la subcarpeta
                   
                    created= Permisos.objects.get_or_create(Documento_permiso=archivo_guardado,Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                    

            else:
                     bool_archivo=False
                     created= Permisos.objects.get_or_create(Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                
            if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permisos'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Permisos, Tipo de Permiso: '+tipo_Permiso+' , Inicio: '+str(dia_inicio)+' Final: '+str(dia_final)+' Colaborador: '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' Nro Ident.: '+colaborador_permiso.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                   
            
            Mensaje='Gestion de Dias Incapacidad realizada con exito!. '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' del '+dia_inicio+' al '+dia_final+' por cantidad de dias: '+str(dias)
            return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 
        
        elif tipo_Permiso=='Incapacidad con Caja Seguro Social':
            tipo_Permiso='Incapacidad'
            colaborador_permiso=Colaboradores.objects.get(pk=colaborador)
            

            if 'archivo' in archivos:
                    colaborador_id=colaborador_permiso.pk
                
                    archivo_imagen = request.FILES["archivo"]
                    # Generar un nuevo nombre de archivo utilizando el nombre original
                    nombre_original, extension = os.path.splitext(archivo_imagen.name)
                    empresa='GoCleaning/'
                    subpath=empresa+'Permisos/Archivos_Incapacidad/'
                    # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
                    nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta

                    archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
        
                    # Utiliza FileSystemStorage para guardar el archivo en la subcarpeta
                   
                    created= Permisos.objects.get_or_create(Pagado_por_Empresa_o_CCSS='Caja del Seguro Social',Documento_permiso=archivo_guardado,Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                    

            else:
                     bool_archivo=False
                     created= Permisos.objects.get_or_create(Pagado_por_Empresa_o_CCSS='Caja del Seguro Social',Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                
            if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permisos'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Permisos, Tipo de Permiso: '+tipo_Permiso+' , Inicio: '+str(dia_inicio)+' Final: '+str(dia_final)+' Colaborador: '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' Nro Ident.: '+colaborador_permiso.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                   
            
            Mensaje='Gestion de Dias Incapacidad con Caja Seguro Social realizada con exito!. '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' del '+dia_inicio+' al '+dia_final+' por cantidad de dias: '+str(dias)
            return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 
        
        else:
            colaborador_permiso=Colaboradores.objects.get(pk=colaborador)
            
            if 'archivo' in archivos:
                    colaborador_id=colaborador_permiso.pk
                
                    archivo_imagen = request.FILES["archivo"]
                    # Generar un nuevo nombre de archivo utilizando el nombre original
                    nombre_original, extension = os.path.splitext(archivo_imagen.name)
                    empresa='GoCleaning/'
                    subpath=empresa+'Permisos/Archivos_Licencias/'
                    # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
                    nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta

                    archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
        
                    # Utiliza FileSystemStorage para guardar el archivo en la subcarpeta
                   
                    created= Permisos.objects.get_or_create(Documento_permiso=archivo_guardado,Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                    

            else:
                     bool_archivo=False
                     created= Permisos.objects.get_or_create(Dia_inicio_permiso=dia_inicio,Dia_fin_permiso=dia_final,Dias_permiso=dias, Colaborador=colaborador_permiso,Tipo_permiso=tipo_Permiso, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                
            if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permisos'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Permisos, Tipo de Permiso: '+tipo_Permiso+' , Inicio: '+str(dia_inicio)+' Final: '+str(dia_final)+' Colaborador: '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' Nro Ident.: '+colaborador_permiso.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                   
            
            Mensaje='Gestion de Licencia Paga realizada con exito!. '+colaborador_permiso.Colaborador_nombre+' '+colaborador_permiso.Colaborador_apellido+' del '+dia_inicio+' al '+dia_final+' por cantidad de dias: '+str(dias)+' Motivo: '+motivo
            return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 

def ver_permisos(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        

        if nivel >=4:
                
                lista_supervisor= Permisos.objects.filter(Colaborador__pk=user_profile_obj.Colaborador.pk)
                lista_clientes = Permisos.objects.filter(Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk ) | lista_supervisor

        else:

                lista_clientes=Permisos.objects.all()


        for i in range(len(lista_clientes)):
            
            lista=[lista_clientes[i].pk,
                   lista_clientes[i].Colaborador.Colaborador_nombre+' '+lista_clientes[i].Colaborador.Colaborador_apellido,
                   lista_clientes[i].Colaborador.Cargo,
                   lista_clientes[i].Colaborador.Supervisor,
                   lista_clientes[i].Dia_inicio_permiso,
                   lista_clientes[i].Dia_fin_permiso,
                   lista_clientes[i].Dias_permiso,
                   lista_clientes[i].Tipo_permiso,
                   lista_clientes[i].Comentario_Permiso,
                   lista_clientes[i].Quien_agrego_Jornada,
                   lista_clientes[i].Estado_Permiso,
                   
                   lista_clientes[i].Documento_permiso,
                   lista_clientes[i].Aprobado_por
                   ]
            
                    
                        
            lista_final.append(lista)
        
        
        return render(request, "ver_permisos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys())
        archivos=list(request.FILES.keys())
        if 'Borrar' in values:
             a_borrar=Permisos.objects.get(pk=int(request.POST["Borrar"]))

             if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permiso'
                                                sUB_Tipo_seguimiento=' Eliminar '
                                                comment=' Eliminar Permiso, '+'Tipo Permiso: '+a_borrar.Tipo_permiso+' , Dia Inicio: '+str(a_borrar.Dia_inicio_permiso)+' Fin: '+str(a_borrar.Dia_fin_permiso)+' Colaborador: '+a_borrar.Colaborador.Colaborador_nombre+' '+a_borrar.Colaborador.Colaborador_apellido+' Nro Ident.: '+a_borrar.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
             
             a_borrar.delete()

             return  redirect('ver-permisos/')
        if 'Editar' in values:
            a_editar=Permisos.objects.get(pk=int(request.POST["Editar"]))
            lista=[a_editar.pk,
                   a_editar.Colaborador.Colaborador_nombre+' '+a_editar.Colaborador.Colaborador_apellido,
                   a_editar.Colaborador.Cargo,
                   a_editar.Colaborador.Supervisor,
                   a_editar.Dia_inicio_permiso,
                   a_editar.Dia_fin_permiso,
                   a_editar.Dias_permiso,
                   a_editar.Tipo_permiso,
                   a_editar.Comentario_Permiso,
                   a_editar.Quien_agrego_Jornada,
                   a_editar.Estado_Permiso,
                   
                   ]
            if a_editar.Estado_Permiso=='Pendiente':
                return render(request, "editar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
            else:
                Mensaje='Error.! Estado de este Permiso se encuentra Finalizado, Por favor asigne Otro de Permiso o Vacaciones.'
                return render(request, "editar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        if 'pk'in values:
            dia_inicio=request.POST["dia_inicio"]
           
            dia_final=request.POST["dia_final"]
        
            dias=int(request.POST["Dias"])
            motivoo=''
        
       
            date_dia_inicio=datetime.strptime(dia_inicio, '%Y-%m-%d')
            date_dia_final=datetime.strptime(dia_final, '%Y-%m-%d')
            dia_resta=date_dia_final-date_dia_inicio
            
            if es_admin:
                Quien_agrego_Jornada='Administrador'
            else:
                Quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
            
            if dia_resta.days >0 and dia_resta.days >= dias-1 :
                a=1

            elif  dia_resta.days ==0 and dia_inicio == dia_final: 
                a=1 
              
            else:
                Mensaje='Error.! Escribistes mas dias de permiso o el rango de fecha seleccionado, Por favor Agrega correctamente la fecha y dias Asignacion de Permiso.'
                return render(request, "mi_template.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje , 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})     

            created = Permisos.objects.get(pk=int(request.POST["pk"]))
            Permisos.objects.filter(pk=created.pk).update(Dia_inicio_permiso=dia_inicio, Dia_fin_permiso=dia_final, Dias_permiso=dias, Quien_agrego_Jornada=Quien_agrego_Jornada)

            if 'Tipo_Permiso' in values:
                Tipo_Permiso=request.POST["Tipo_Permiso"]
                Permisos.objects.filter(pk=created.pk).update(Tipo_Permiso=Tipo_Permiso)
                motivoo+='Se cambio permiso a ->'+ Tipo_Permiso+' / '
        
            if 'motivo' in values:
                motivo=request.POST["motivo"]
                Permisos.objects.filter(pk=created.pk).update(Comentario_Permiso=motivo)
                motivoo+='Se cambio motivo a ->'+ motivo+' / '
            if "archivo1" in archivos: 
                if request.FILES['archivo1']:
                    save_path = os.path.join(settings.MEDIA_ROOT, 'Permisos\\'+request.FILES["archivo1"].name)

                    with open(save_path, "wb") as output_file:

                        for chunk in request.FILES["archivo1"].chunks():

                            output_file.write(chunk)

                    bool_archivo=True
                    archivo = request.FILES['archivo1']
                    
                    subcarpeta = 'Permisos\\'    
                   
                    Permisos.objects.filter(pk=created.pk).update( Documento_permiso=subcarpeta+archivo.name) 
                ##print('se grabo uno ya existente') 
            
            if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permiso'
                                                sUB_Tipo_seguimiento=' Editar '
                                                comment= motivoo+' Dia Inicio: '+str(created.Dia_inicio_permiso)+' Fin: '+str(created.Dia_fin_permiso)+' Colaborador: '+created.Colaborador.Colaborador_nombre+' '+created.Colaborador.Colaborador_apellido+' Nro Ident.: '+created.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
             
            return  redirect('ver-permisos/')
         
def editar_permisos(request, searched='1'):
    
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]

        values= list(request.GET.keys())
        if 'searched' in values:
            searched=request.GET['searched']
        try:
                lista_clientes=Permisos.objects.get(pk=int(searched))
        except:
            Mensaje='Error.! Estado de este Permiso no Existe, Por favor asigne Otro de Permiso o Vacaciones.'
            return render(request, "editar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

             
        lista=[lista_clientes.pk,
                   lista_clientes.Colaborador.Colaborador_nombre+' '+lista_clientes.Colaborador.Colaborador_apellido,
                   lista_clientes.Colaborador.Cargo,
                   lista_clientes.Colaborador.Supervisor,
                   lista_clientes.Dia_inicio_permiso,
                   lista_clientes.Dia_fin_permiso,
                   lista_clientes.Dias_permiso,
                   lista_clientes.Tipo_permiso,
                   lista_clientes.Comentario_Permiso,
                   lista_clientes.Quien_agrego_Jornada,
                   lista_clientes.Estado_Permiso,
                   
                   ]
        if lista_clientes.Estado_Permiso=='Pendiente':
            return render(request, "editar_permisos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        else:
            Mensaje='Error.! Estado de este Permiso se encuentra Finalizado, Por favor asigne Otro de Permiso o Vacaciones.'
            return render(request, "editar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

             
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())
        if 'Borrar' in values:
            a_borrar=Permisos.objects.get(pk=int(request.POST["Borrar"]))
            if True: #guardar Novedades
                        

                                                tipo_seguimiento='Permiso'
                                                sUB_Tipo_seguimiento=' Eliminar '
                                                comment=' Eliminar Permiso, '+'Tipo Permiso: '+a_borrar.Tipo_permiso+' , Dia Inicio: '+str(a_borrar.Dia_inicio_permiso)+' Fin: '+str(a_borrar.Dia_fin_permiso)+' Colaborador: '+a_borrar.Colaborador.Colaborador_nombre+' '+a_borrar.Colaborador.Colaborador_apellido+' Nro Ident.: '+a_borrar.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
             
            a_borrar.delete()
            return  redirect('ver-permisos/')
        if 'Editar' in values:
            a_editar=Permisos.objects.get(pk=int(request.POST["Editar"]))
            lista=[a_editar.pk,
                   a_editar.Colaborador.Colaborador_nombre+' '+a_editar.Colaborador.Colaborador_apellido,
                   a_editar.Colaborador.Cargo,
                   a_editar.Colaborador.Supervisor,
                   a_editar.Dia_inicio_permiso,
                   a_editar.Dia_fin_permiso,
                   a_editar.Dias_permiso,
                   a_editar.Tipo_permiso,
                   a_editar.Comentario_Permiso,
                   a_editar.Quien_agrego_Jornada,
                   a_editar.Estado_Permiso,
                   
                   ]
            if lista_clientes.Estado_Permiso=='Pendiente':
                return render(request, "editar_permisos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
            else:
                Mensaje='Error.! Estado de este Permiso se encuentra Finalizado, Por favor asigne Otro de Permiso o Vacaciones.'
                return render(request, "editar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def validar_permisos(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        
        lista_clientes=Permisos.objects.filter(Estado_Permiso__icontains='Pendiente')
        for i in range(len(lista_clientes)):
            vacas= lista_clientes[i].Colaborador.Fecha_Ingreso 
            permiso_objj=Permisos.objects.filter(Colaborador__pk=lista_clientes[i].Colaborador.pk, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
            time_incapacidad=datetime.now()
            antiguedad_colaborador=str_diferencia_fechas(vacas, time_incapacidad.date())
            time_incapacidad=datetime(time_incapacidad.year, time_incapacidad.month, 1)
            retroceder_2_years=fun_fecha_retrocediendo_anos(time_incapacidad.date(), 2)
            Incapacidad_obj=Permisos.objects.filter(Dia_inicio_permiso__gte=retroceder_2_years, Colaborador__pk=lista_clientes[i].Colaborador.pk, Tipo_permiso='Incapacidad', Estado_Permiso='Aprobado', Pagado_por_Empresa_o_CCSS='empresa')
            num_vacas_usada=0
            num_incapacidad=0
            for y in permiso_objj:
                    num_vacas_usada+=y.Dias_permiso
          
            for y in Incapacidad_obj:
                    num_incapacidad+=y.Dias_permiso

            Vacaciones_totales=calcular_dias_vacaciones(vacas,num_vacas_usada)
            Incapacidad_disponible=calcular_incapacidad_dias(vacas,num_incapacidad, lista_clientes[i].Colaborador)
            Vac_disponible=Vacaciones_totales - num_vacas_usada


            lista=[lista_clientes[i].pk,
                   lista_clientes[i].Colaborador.Colaborador_nombre+' '+lista_clientes[i].Colaborador.Colaborador_apellido,
                   lista_clientes[i].Colaborador.Cargo,
                   lista_clientes[i].Colaborador.Supervisor,
                   lista_clientes[i].Colaborador.Departamento,
                   lista_clientes[i].Colaborador.Sueldo,
                   Vac_disponible,
                   lista_clientes[i].Dia_inicio_permiso,
                   lista_clientes[i].Dia_fin_permiso,
                   lista_clientes[i].Dias_permiso,
                   lista_clientes[i].Tipo_permiso,
                   lista_clientes[i].Comentario_Permiso,
                   lista_clientes[i].Quien_agrego_Jornada,
                   lista_clientes[i].Estado_Permiso,
                   
                   lista_clientes[i].Documento_permiso,
                   Incapacidad_disponible
                   

                   ]
                       
                        
            lista_final.append(lista)
        
        
        return render(request, "validar_permisos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys())
        if 'Aprobar' in values:
             
             if es_admin:
                            aprobado_por='Administrador'
             else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

             a_borrar=Permisos.objects.get(pk=int(request.POST["Aprobar"]))
             Permisos.objects.filter(pk=a_borrar.pk).update(Estado_Permiso='Aprobado', Aprobado_por=aprobado_por)
             if a_borrar.Tipo_permiso=='Vacaciones':
                colaborador_pk=a_borrar.Colaborador.pk
                Colaboradores.objects.filter(pk=colaborador_pk).update(Vacaciones_usadas=a_borrar.Dias_permiso)

             return  redirect('validar-permisos')
        if 'Rechazar' in values:
             if es_admin:
                            aprobado_por='Administrador'
             else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

             a_borrar=Permisos.objects.get(pk=int(request.POST["Rechazar"]))
             Permisos.objects.filter(pk=a_borrar.pk).update(Estado_Permiso='Cancelado',Aprobado_por=aprobado_por)
           
        return redirect('validar-permisos')

def agregar_acreedores(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        
        try:
            
            lista_clientes=Colaboradores.objects.all()
            for i in range(len(lista_clientes)):
                
                
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Departamento ,
                        lista_clientes[i].Supervisor,
                        lista_clientes[i].Sueldo,
                        lista_clientes[i].imagen,

                        #<td><img src="{{ MEDIA_URL }}{{  clientes.7 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        ]
                lista_final.append(lista)
           
            
        except:
            #print('dio error')
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)

        return render(request, "agregar_prestamos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        
        try:
            
            lista_clientes=Colaboradores.objects.all()
            for i in range(len(lista_clientes)):
                
                
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Departamento ,
                        lista_clientes[i].Supervisor,
                        lista_clientes[i].Sueldo
                        
                        ]
                lista_final.append(lista)
           
            
        except:
            #print('dio error')
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            

        
        values= list(request.POST.keys())
        archivos = list(request.FILES.keys())
        #print(request.POST)
        #print(request.FILES)
        
            
        if 'colaborador' not in values:
           
            Mensaje='Error.! No Agregaste un Colaborador, Por favor asigna un Colaborador en la Asignacion de Acreedores.'
            return render(request, "agregar_prestamos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


        
        dia_inicio=request.POST["dia_inicio"]
        date_dia_inicio=datetime.strptime(dia_inicio, '%Y-%m-%d')
        ahora= datetime.now()
        ahora=datetime(2020,12,1)
        dia_resta=date_dia_inicio - ahora
        if dia_resta.days<1:
            Mensaje='Error.! Selecciona fecha inicio en el futuro, Por favor Agrega correctamente la fecha  Asignacion de Acreeditores.'
            return render(request, "agregar_prestamos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje , 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})     

        
             
        colaborador=int(request.POST["colaborador"])
        el_colaborador=Colaboradores.objects.get(pk=colaborador)
        sueldo_colaborador=el_colaborador.Sueldo
        mensual_o_Fijo_al_mes=request.POST["Mensual_o_Fijo_al_mes"] #Monto Total---o----Descontar mensual
        cuotas_mensuales=int(request.POST["meses"])
        tipo_Permiso=request.POST["Tipo_Permiso"]
        motivo=request.POST["motivo"]
        
        if es_admin:
                quien_agrego_Jornada='Administrador'
        else:
                quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
        if 'acreedor_otros' in values:
            acreedor_otros=request.POST["acreedor_otros"]
        
            if acreedor_otros=='':
                acreedor_otros='Empresa'
        else:
            acreedor_otros='Empresa'

        if cuotas_mensuales<=0:
            Mensaje='Error.! Selecciona una cantidad de meses mayor a 0 cuotas, Por favor Agrega correctamente los cuotas a   Asignacion de Acreeditores.'
            return render(request, "agregar_prestamos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje , 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})     


        # empezar aqui la funcion de fecha final
        # generar_Q_actual
        Q_inicio=generar_Q_actual(dia_inicio) 
        date_dia_inicio=fun_calcular_dia_pago(Q_inicio)
        Q_final=Q_inicio
        for i in range(cuotas_mensuales-1):
            Q_final=fun_subir_quater(Q_final)
        
        fecha_final_date=fun_calcular_dia_pago(Q_final)
            
       
        descuento=float(request.POST["descuento"])
        if mensual_o_Fijo_al_mes=='Monto Total':
            total_deuda=descuento
            total_cobro_mensual=(descuento/cuotas_mensuales)
        else:
            total_deuda=descuento*cuotas_mensuales
            total_cobro_mensual=descuento

        if   tipo_Permiso=='Hipotecario':
            if total_cobro_mensual*2 >  sueldo_colaborador*0.3:
                Mensaje='Error.! Selecciona una cantidad a descontar no mayor a 30% de sueldo bruto para deduccion Hipotecaria, Por favor Agrega correctamente el descuento en la Asignacion de Acreeditores.'
                return render(request, "agregar_prestamos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje , 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})     
        elif total_cobro_mensual*2 >  sueldo_colaborador*0.2:
            Mensaje='Error.! Selecciona una cantidad a descontar no mayor a 20% de sueldo bruto para deduccion Prestamo u Otras deduciones, Por favor Agrega correctamente el descuento en la Asignacion de Acreeditores.'
            return render(request, "agregar_prestamos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje , 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})     
    
        if 'archivo' in archivos :
            archivo_imagen = request.FILES["archivo"]
            nombre_original, extension = os.path.splitext(archivo_imagen.name)
            empresa='GoCleaning/'
            subpath=empresa+'Colaborador/Acreedores/'
            searched=str(el_colaborador.pk)
            colaborador_id=el_colaborador.Colaborador_nombre+'_CIP_'+el_colaborador.Nro_Identificacion+'_'+searched
            colaborador_id=colaborador_id.replace(' ','_')
            # Generar un nuevo nombre de archivo utilizando el nombre original sin la extensión
            nombre_archivo = f'{subpath}{slugify(nombre_original)}_{colaborador_id}{extension}'  # Cambia 'carpeta' por el nombre de tu subcarpeta
            nombre_archivo=nombre_archivo.replace(' ','_')
            archivo_guardado = default_storage.save(nombre_archivo, archivo_imagen)
            #archivo_url = default_storage.url(archivo_guardado)
            created= Acreedores.objects.get_or_create(Documento_permiso=archivo_guardado,Dia_inicio_cobro=date_dia_inicio,Dia_fin_cobro=fecha_final_date,Meses_de_cobro=cuotas_mensuales,Monto_total=total_deuda,Monto_mensual= total_cobro_mensual, Colaborador=el_colaborador,Tipo_acreeditor=tipo_Permiso,Nombre_acreeditor= acreedor_otros, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
            

        else:
                     bool_archivo=False
                     created= Acreedores.objects.get_or_create(Dia_inicio_cobro=date_dia_inicio,Dia_fin_cobro=fecha_final_date,Meses_de_cobro=cuotas_mensuales,Monto_total=total_deuda,Monto_mensual= total_cobro_mensual, Colaborador=el_colaborador,Tipo_acreeditor =tipo_Permiso,Nombre_acreeditor= acreedor_otros, Comentario_Permiso=motivo, Estado_Permiso='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada)
                    
        if True: #guardar Novedades
                        

                                                tipo_seguimiento='Acreedores'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Acreedores, Tipo de acreedores: '+tipo_Permiso+' , Inicio: '+str(date_dia_inicio)+' Final: '+str(fecha_final_date)+' Colaborador: '+el_colaborador.Colaborador_nombre+' '+el_colaborador.Colaborador_apellido+' Nro Ident.: '+el_colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                   
                     
                

        Mensaje='Gestion de Reduccion Sueldo por Acreeditores realizada con exito!. '+el_colaborador.Colaborador_nombre+' '+el_colaborador.Colaborador_apellido+' del '+str(date_dia_inicio)+' al '+str(fecha_final_date)+' por cantidad de $: '+str(total_cobro_mensual)+' Mensuales'
        return render(request, "agregar_permiso.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 

def ver_acreedores(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_final=[]
        lista_clientes=Acreedores.objects.all()
        for i in range(len(lista_clientes)):
            
            lista=[lista_clientes[i].pk,
                   lista_clientes[i].Colaborador.Colaborador_nombre+' '+lista_clientes[i].Colaborador.Colaborador_apellido,
                   lista_clientes[i].Colaborador.Cargo,
                   lista_clientes[i].Colaborador.Departamento,
                   lista_clientes[i].Colaborador.Sueldo,
                   lista_clientes[i].Dia_inicio_cobro,
                   lista_clientes[i].Dia_fin_cobro,

                   lista_clientes[i].Meses_de_cobro,
                   lista_clientes[i].cuotas_restante,

                   lista_clientes[i].Monto_mensual,

                   lista_clientes[i].Monto_total,
                   lista_clientes[i].dinero_pagado,
                   

                   lista_clientes[i].Nombre_acreeditor,
                   lista_clientes[i].Comentario_Permiso,
                   lista_clientes[i].Quien_agrego_Jornada,
                   lista_clientes[i].Estado_Permiso,
                   
                   lista_clientes[i].Documento_permiso,
                   lista_clientes[i].Aprobado_por
                   ]
            
            


               
            
                

                        
                        
            lista_final.append(lista)
        
        
        return render(request, "ver_acreedores.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys())
        archivos=list(request.FILES.keys())
        if 'Borrar' in values:
             a_borrar=Acreedores.objects.get(pk=int(request.POST["Borrar"]))
             if True: #guardar Novedades
                        

                                                tipo_seguimiento='Acreedores'
                                                sUB_Tipo_seguimiento=' Eliminar '
                                                comment=' Eliminar Acreedores, '+'Tipo Permiso: '+a_borrar.Tipo_acreeditor+' , Dia Inicio: '+str(a_borrar.Dia_inicio_cobro)+' Fin: '+str(a_borrar.Dia_fin_cobro)+' Colaborador: '+a_borrar.Colaborador.Colaborador_nombre+' '+a_borrar.Colaborador.Colaborador_apellido+' Nro Ident.: '+a_borrar.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
             
             a_borrar.delete()
             return  redirect('ver-acreedores/')
        if 'Aprobar' in values:
            a_editar=Acreedores.objects.get(pk=int(request.POST["Aprobar"]))
            a_editar.Estado_Permiso='Aprobado'
            a_editar.save()
            if True: #guardar Novedades
                                                tipo_seguimiento='Acreedores'
                                                sUB_Tipo_seguimiento=' Aprobar '
                                                comment=' Aprobar Acreedores a: '+a_editar.Colaborador.Colaborador_nombre+ a_editar.Colaborador.Colaborador_apellido+' monto mensual'+str(round(a_editar.Monto_mensual,2))
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
         

        if 'Rechazar' in values:
            a_editar=Acreedores.objects.get(pk=int(request.POST["Rechazar"]))
            a_editar.Estado_Permiso='Rechazar'
            a_editar.save()   
            if True: #guardar Novedades
                                                tipo_seguimiento='Acreedores'
                                                sUB_Tipo_seguimiento=' Rechazar '
                                                comment=' Rechazar Acreedores a: '+a_editar.Colaborador.Colaborador_nombre+ a_editar.Colaborador.Colaborador_apellido+' monto mensual'+str(round(a_editar.Monto_mensual,2))
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                 
       
        return  redirect('ver-acreedores/')
         
def motor_planilla(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     

    if request.method=='GET':
        try:    
            lista_final=[]
            palabra_a_excluir = "Administrativo"
            lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
            lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
            lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
            
            lista_clientes=Acreedores.objects.all()

            #palabra_a_excluir = "excluir_palabra"

            # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
            #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
            for i in range(len(lista_colaboradores)):
                
                lista=[lista_colaboradores[i].pk,
                    lista_colaboradores[i].Nro_Identificacion,
                    lista_colaboradores[i].Colaborador_nombre,
                    lista_colaboradores[i].Colaborador_apellido,
                    lista_colaboradores[i].Cargo,
                    lista_colaboradores[i].Departamento,
                    lista_colaboradores[i].Supervisor
                    ]
                
                            
                lista_final.append(lista)
            
            
            return render(request, "motor_planilla.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla})
        except Exception as e:
            print("Se produjo una excepción:", type(e).__name__, "-", e)
            # Imprimir la información de la traza de la excepción
            traceback.print_exc()
            print(traceback.print_exc(), 'print')
            print("Archivo:", e.__traceback__.tb_frame.f_code.co_filename)
            print("Línea:", e.__traceback__.tb_lineno)
    
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Borrar' in values:
             a_borrar=Acreedores.objects.get(pk=int(request.POST["Borrar"]))
             if True: #guardar Novedades
                        

                                                tipo_seguimiento='Acreedores'
                                                sUB_Tipo_seguimiento=' Eliminar '
                                                comment=' Eliminar Acreedores, '+'Tipo Permiso: '+a_borrar.Tipo_acreeditor+' , Dia Inicio: '+str(a_borrar.Dia_inicio_cobro)+' Fin: '+str(a_borrar.Dia_fin_cobro)+' Colaborador: '+a_borrar.Colaborador.Colaborador_nombre+' '+a_borrar.Colaborador.Colaborador_apellido+' Nro Ident.: '+a_borrar.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
             
             a_borrar.delete()
             
             return  redirect('ver-acreedores/')
        if 'Aprobar' in values:
            a_editar=Acreedores.objects.get(pk=int(request.POST["Aprobar"]))
            a_editar.Estado_Permiso='Aprobado'
            a_editar.save()

        if 'Rechazar' in values:
            a_editar=Acreedores.objects.get(pk=int(request.POST["Rechazar"]))
            a_editar.Estado_Permiso='Rechazar'
            a_editar.save()           
       
        return  redirect('ver-acreedores/')


def motor_planilla_p1(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())

        if 'mes' in values: #planilla sacar periodo 
            Quater=request.POST["quincena"]
            month=request.POST["mes"]
            year=request.POST["year"]
            planilla=Quater+'-'+month+'-'+year
            empresa_id=1
            try:
                created = Cerrar_Planilla.objects.get(Empresa_id=empresa_id, Periodo=planilla)
                bool_existe_planilla=True
                return redirect('pagina_planilla_creada')

            except:
                bool_existe_planilla=False
                

            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
        
        # #print(request.FILES['archivo'])
        
       
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
         
        if 'planilla' in values or 'mes' in values:
            if 'planilla' in values :
                planilla=request.POST["planilla"]
                lista_planilla=planilla.split('-')
                Quater=lista_planilla[0]
                Quater=Quater.replace('Q','')
                Quater=int(Quater)
                mes=int(lista_planilla[1])
                year=int(lista_planilla[2])
                if Quater==1:
                    inicio_corte=26
                    final_corte=10
                    fecha_pago=15
                    if mes==1:
                        mes_inicial=12
                        year_inicial=year-1
                    else:
                        mes_inicial=mes-1
                        year_inicial=year
                
                else:
                    inicio_corte=11
                    final_corte=25
                    mes_inicial=mes
                    year_inicial=year
                

                fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
                fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

                fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
                fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

                
            #### fecha de comparacion terminadas

            ###rechazar o aprobar
            if 'Rechazar' in values:
                 if es_admin:
                            aprobado_por='Administrador'
                 else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

                 rechazar_permiso=Permisos.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 tipo_permiso=rechazar_permiso.Tipo_permiso
                 if tipo_permiso== 'Vacaciones':
                      if permiso_aprobado_Q=='Aprobado':
                        dias=rechazar_permiso.Dias_permiso
                        colaborador_actualizar=Colaboradores.objects.get(pk=rechazar_permiso.Colaborador.pk)
                        vacas_usadas=colaborador_actualizar.Vacaciones_usadas
                        vacas_usadas-=dias
                        colaborador_actualizar.Vacaciones_usadas=vacas_usadas
                        colaborador_actualizar.save()
                 


                 rechazar_permiso.save()
                 if True: #guardar Novedades
                                                tipo_seguimiento='Permisos'
                                                sUB_Tipo_seguimiento=' Rechazar '
                                                comment=' Rechazar Permisos a: '+rechazar_permiso.Colaborador.Colaborador_nombre+' '+ rechazar_permiso.Colaborador.Colaborador_apellido+' Tipo Permiso: '+rechazar_permiso.Tipo_permiso
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
              

            elif 'Aprobar' in values:
                 if es_admin:
                            aprobado_por='Administrador'
                 else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                 rechazar_permiso=Permisos.objects.get(pk=int(request.POST["Aprobar"]))
                 rechazar_permiso.Estado_Permiso='Aprobado'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 rechazar_permiso.save()
                 tipo_permiso=rechazar_permiso.Tipo_permiso
                 if tipo_permiso== 'Vacaciones':
                      dias=rechazar_permiso.Dias_permiso
                      colaborador_actualizar=Colaboradores.objects.get(pk=rechazar_permiso.Colaborador.pk)
                      vacas_usadas=colaborador_actualizar.Vacaciones_usadas
                      vacas_usadas+=dias
                      colaborador_actualizar.Vacaciones_usadas=vacas_usadas
                      colaborador_actualizar.save()
                 
                 if True: #guardar Novedades
                                                tipo_seguimiento='Permisos'
                                                sUB_Tipo_seguimiento=' Aprobar '
                                                comment=' Aprobar Permisos a: '+rechazar_permiso.Colaborador.Colaborador_nombre+' '+ rechazar_permiso.Colaborador.Colaborador_apellido+' Tipo Permiso: '+rechazar_permiso.Tipo_permiso
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
              

            lista_permisos=Permisos.objects.all()
            siguiente_bool=True
            lista_ausencia=[]
            for permisos in lista_permisos:
                dia_inicio_permiso=permisos.Dia_inicio_permiso
                dia_fin_permiso=permisos.Dia_fin_permiso
                '''#print(dia_inicio_permiso,dia_fin_permiso)
                #print('inicio',fecha_inicial_corte.date(),'final', fecha_final_corte.date())
                #print('*/********')'''
                
                dias = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_corte.date(), fecha_final_corte.date())
                if dias>0:
                    
                    tipo_permiso=permisos.Tipo_permiso
                    estado_permiso=permisos.Estado_Permiso
                    if estado_permiso=='Pendiente':
                         siguiente_bool=False
                    
                    aprobado_por=permisos.Aprobado_por
                    documento_permiso=permisos.Documento_permiso
                    nombre=permisos.Colaborador.Colaborador_nombre+' '+permisos.Colaborador.Colaborador_apellido
                    cargo=permisos.Colaborador.Cargo
                    dpto=permisos.Colaborador.Departamento
                    motivo=permisos.Comentario_Permiso

                    lista=[permisos.pk,
                                    nombre,
                                    cargo,
                                    dpto,
                                    dia_inicio_permiso,
                                    dia_fin_permiso,
                                    motivo,
                                    estado_permiso,
                                    documento_permiso,
                                    aprobado_por,
                                    tipo_permiso,
                                    permisos.Colaborador.imagen

                                    #<td><img src="{{ MEDIA_URL }}{{  clientes.11 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                    ]
                
                    lista_ausencia.append(lista)
                 
            
        return render(request, "motor_planilla_1.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})

def motor_planilla_p2(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
            #### fecha de comparacion terminadas

            ###rechazar o aprobar
            if 'Rechazar' in values:
                 if es_admin:
                            aprobado_por='Administrador'
                 else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

                 rechazar_permiso=Acreedores.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 
                 rechazar_permiso.save()
                 
            elif 'Aprobar' in values:
                 rechazar_permiso=Acreedores.objects.get(pk=int(request.POST["Aprobar"]))
                 rechazar_permiso.Estado_Permiso='Aprobado'
                 rechazar_permiso.Aprobado_por='Marco Jimenez'
                 rechazar_permiso.save()
                 

           
            siguiente_bool=True
            lista_ausencia=[]
            fecha_pago_date = datetime(year, mes, fecha_pago)
            #print(fecha_pago_date,'fecha_pago_date')
            lista_permisos = Acreedores.objects.filter(Dia_inicio_cobro__lte = fecha_pago_date.date(), Dia_fin_cobro__gte=fecha_pago_date.date())

            for permisos in lista_permisos:
                dia_inicio_permiso=permisos.Dia_inicio_cobro
                dia_fin_permiso=permisos.Dia_fin_cobro
                '''#print(dia_inicio_permiso,dia_fin_permiso)
                #print('corte',fecha_pago_date.date(),'corte', )
                #print(Quater==1 and dia_inicio_permiso<=fecha_pago_date.date() and fecha_pago_date.date()<=dia_fin_permiso)
                #print(Quater==1)
                #print(dia_inicio_permiso<=fecha_pago_date.date())
                #print(fecha_pago_date.date()<=dia_fin_permiso)
                #print('*/********')'''
                if dia_inicio_permiso<=fecha_pago_date.date() and fecha_pago_date.date()<=dia_fin_permiso:
                    
                    tipo_acreedor=permisos.Tipo_acreeditor
                    nombre_acreedor=permisos.Nombre_acreeditor
                    estado_acreedor=permisos.Estado_Permiso
                    monto_mensual=permisos.Monto_mensual
                    if estado_acreedor=='Pendiente':
                         siguiente_bool=False
                    
                    aprobado_por=permisos.Aprobado_por
                    documento_permiso=permisos.Documento_permiso
                    nombre=permisos.Colaborador.Colaborador_nombre+' '+permisos.Colaborador.Colaborador_apellido
                    cargo=permisos.Colaborador.Cargo
                    dpto=permisos.Colaborador.Departamento
                    motivo=permisos.Comentario_Permiso

                    lista=[permisos.pk,
                                    nombre,
                                    cargo,
                                    dpto,
                                    dia_inicio_permiso,
                                    dia_fin_permiso,
                                    motivo,
                                    estado_acreedor,
                                    documento_permiso,
                                    aprobado_por,
                                    
                                    monto_mensual,
                                    tipo_acreedor,
                                    nombre_acreedor,
                                    permisos.Colaborador.imagen

                                    #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.13 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                                    

                                    ]
                
                    lista_ausencia.append(lista)
                    #print('guarde')
                 
          
        return render(request, "motor_planilla_2.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})

def motor_planilla_p3(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion1=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.Ausencias_Aprobada=True
                           jornada.Ausencias_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
            if 'Cambiar' in values:
                if request.POST["hora_entrada"]!='' and request.POST["hora_salida"]!='':
                    jornada=Hoja_tiempo.objects.get(pk=int(request.POST["Cambiar"])) 
                    hr_entrada=request.POST["hora_entrada"]
                    hr_salida=request.POST["hora_salida"]

                    fecha_entrada=jornada.Dia_entrada
                    fecha_salida=jornada.Dia_salida
                    
                    entrada=str(fecha_entrada)+' '+hr_entrada
                    salida=str(fecha_salida)+' '+hr_salida
                    entradas_y_salidas.append([entrada,salida])
                    fecha_entrada1 = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                    fecha_salida1 = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                    tiempo_trabajado = fecha_salida1 -fecha_entrada1
                    tiempo_trabajado=tiempo_trabajado.total_seconds()
                    if tiempo_trabajado < 1 :
                        error=True
                        msj_Error='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                        
                        
                    elif tiempo_trabajado>=86400:
                        error=True
                        msj_Error='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'

                    if error==False:
                        lista_FERIADOS=Dias_Feriados.objects.all()
                        feriados=[]
                        jornada_semanal=48
                        for i in lista_FERIADOS:
                            feriados.append(i.Dia_Feriado)

                        categoria_empleado=jornada.Colaborador.Departamento
                        hora_entrada_contrato=jornada.Colaborador.Hora_entrada
                        hora_salida_contrato=jornada.Colaborador.Hora_salida
                        jornada_diaria=jornada.Colaborador.Jornada_diaria
                        jornada_semanal=jornada.Colaborador.Jornada_semanal
                        hora_de_inicio_almuerzo=jornada.Colaborador.Inicio_Hora_Almuerzo
                        if hora_de_inicio_almuerzo!=23:
                            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                        else:
                            hora_de_final_almuerzo=0
                        Almuerzo=jornada.Colaborador.Almuerzo_bool
                        dia_descanso_1=jornada.Colaborador.Dia_descanso_1
                        dia_descanso_2=jornada.Colaborador.Dia_descanso_2
                        tipo_de_jornada=jornada.Colaborador.Tipo_Jornada



                        if categoria_empleado=='Ruta':

                            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                        elif tipo_de_jornada=='Nocturna':

                            resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                        else:
                            resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                        for i in resultados:
                            dia_entrada= i[0]
                            hr_entrada = i[1]
                            dia_salida = i[2]
                            hr_salida = i[3]
                            minutos_trabajados = i[4]
                            minutos_trabajadas_jornada_laboral = i[5]
                            minutos_extras_diurnos=i[6]
                            minutos_extras_nocturnos = i[7]
                            horas_laborales_extras = i[8]
                            minutos_de_tardia = i[9]
                            min_faltante_de_turno = i[10]
                            min_llego_temprano  =i[11]
                            minutos_de_extras_mixtas_nocturnas=i[12]
                            minutos_de_extras_mixtas_diurnas=i[13]
                            minutos_extras_diurnos_3hr  =i[14]
                            minutos_extras_nocturnos_3hr =i[15]
                            minutos_de_extras_mixtas_diurnas_3hr = i[16]
                            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                            laboro_dia_domingo_descanso= i[18]
                            laboro_dia_feriado=i[19]


                       
                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                        Hoja_tiempo.objects.filter(pk=jornada.pk).update(Ausencias_Aprobada=False,Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida, Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                

                else:
                    error=True
                    msj_Error='Alguna hora de entrada o salida esta faltando, Reintente por Favor.'

                 

            lista_produccion =Hoja_tiempo.objects.all()
            lista_tiempo=lista_produccion.exclude(Colaborador__Departamento__icontains=palabra_a_excluir)
            siguiente_bool=True
            lista_ausencia_final=[]
            fin_cierre=True
            iter_dias=fecha_inicial_corte.date()
            while fin_cierre:
                lista_ausencia=lista_tiempo.filter(Dia_entrada=iter_dias)
                if len(lista_ausencia)>0:
                     for ausencia in lista_ausencia:
                        faltante=ausencia.Minutos_Faltantes_turno
                        bool_ausencia=ausencia.Ausencias_Aprobada
                        
                        if bool_ausencia==False and faltante>0:
                            siguiente_bool=False
                        if faltante>0:
                             lista=[ausencia.pk,
                                    ausencia.Colaborador.Colaborador_nombre+' '+ausencia.Colaborador.Colaborador_apellido,
                                    ausencia.Colaborador.Cargo,
                                    ausencia.Colaborador.Departamento,
                                    ausencia.Empresa.Codigo_cliente,
                                    ausencia.Empresa.nombre_empresa,
                                    str(ausencia.Dia_entrada),
                                    str(ausencia.Dia_salida),
                                    fun_minutoss(ausencia.Minutos_Faltantes_turno),
                                    ausencia.Quien_agrego_Jornada,
                                    ausencia.Entrada,
                                    ausencia.Salida,
                                    ausencia.Ausencias_Aprobada,
                                    ausencia.Ausencias_Aprobadas_por,
                                    ausencia.Colaborador.imagen

                                    #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                     
                                    ] 
                             lista_ausencia_final.append(lista)
                iter_dias+= timedelta(days=1)
                if iter_dias==fecha_final_corte.date():
                    fin_cierre=False            
                
            if error:
                 a=1
                 #print('render con msj error')
                 #print(msj_Error)
                
                
        
        return render(request, "motor_planilla_3.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion1),'admin':len(lista_administrativo), 'produccion':len(lista_produccion1),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})
    
def motor_planilla_p4(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion1=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.HR_3_Aprobada=True
                           jornada.HR_3_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
            if 'Cambiar' in values:
                if request.POST["hora_entrada"]!='' and request.POST["hora_salida"]!='':
                    jornada=Hoja_tiempo.objects.get(pk=int(request.POST["Cambiar"])) 
                    hr_entrada=request.POST["hora_entrada"]
                    hr_salida=request.POST["hora_salida"]

                    fecha_entrada=jornada.Dia_entrada
                    fecha_salida=jornada.Dia_salida
                    
                    entrada=str(fecha_entrada)+' '+hr_entrada
                    salida=str(fecha_salida)+' '+hr_salida
                    entradas_y_salidas.append([entrada,salida])
                    fecha_entrada1 = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                    fecha_salida1 = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                    tiempo_trabajado = fecha_salida1 -fecha_entrada1
                    tiempo_trabajado=tiempo_trabajado.total_seconds()
                    if tiempo_trabajado < 1 :
                        error=True
                        msj_Error='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                        
                        
                    elif tiempo_trabajado>=86400:
                        error=True
                        msj_Error='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'

                    if error==False:
                        lista_FERIADOS=Dias_Feriados.objects.all()
                        feriados=[]
                        jornada_semanal=48
                        for i in lista_FERIADOS:
                            feriados.append(i.Dia_Feriado)

                        categoria_empleado=jornada.Colaborador.Departamento
                        hora_entrada_contrato=jornada.Colaborador.Hora_entrada
                        hora_salida_contrato=jornada.Colaborador.Hora_salida
                        jornada_diaria=jornada.Colaborador.Jornada_diaria
                        jornada_semanal=jornada.Colaborador.Jornada_semanal
                        hora_de_inicio_almuerzo=jornada.Colaborador.Inicio_Hora_Almuerzo
                        if hora_de_inicio_almuerzo!=23:
                            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                        else:
                            hora_de_final_almuerzo=0
                        Almuerzo=jornada.Colaborador.Almuerzo_bool
                        dia_descanso_1=jornada.Colaborador.Dia_descanso_1
                        dia_descanso_2=jornada.Colaborador.Dia_descanso_2
                        tipo_de_jornada=jornada.Colaborador.Tipo_Jornada



                        if categoria_empleado=='Ruta':

                            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                        elif tipo_de_jornada=='Nocturna':

                            resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                        else:
                            resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                        for i in resultados:
                            dia_entrada= i[0]
                            hr_entrada = i[1]
                            dia_salida = i[2]
                            hr_salida = i[3]
                            minutos_trabajados = i[4]
                            minutos_trabajadas_jornada_laboral = i[5]
                            minutos_extras_diurnos=i[6]
                            minutos_extras_nocturnos = i[7]
                            horas_laborales_extras = i[8]
                            minutos_de_tardia = i[9]
                            min_faltante_de_turno = i[10]
                            min_llego_temprano  =i[11]
                            minutos_de_extras_mixtas_nocturnas=i[12]
                            minutos_de_extras_mixtas_diurnas=i[13]
                            minutos_extras_diurnos_3hr  =i[14]
                            minutos_extras_nocturnos_3hr =i[15]
                            minutos_de_extras_mixtas_diurnas_3hr = i[16]
                            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                            laboro_dia_domingo_descanso= i[18]
                            laboro_dia_feriado=i[19]


                       
                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                         
                        Hoja_tiempo.objects.filter(pk=jornada.pk).update(HR_3_Aprobada=False,Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida, Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                

                else:
                    error=True
                    msj_Error='Alguna hora de entrada o salida esta faltando, Reintente por Favor.'

                 
            
            lista_produccion =Hoja_tiempo.objects.all()
            lista_tiempo=lista_produccion.exclude(Colaborador__Departamento__icontains=palabra_a_excluir)
            siguiente_bool=True
            lista_ausencia_final=[]
            lista_horas_extras_3 = lista_tiempo.annotate(diferencia=Abs(F('Minutos_Trabajads') - F('Minutos_Trabajads_Jornada_Laboral'), output_field=FloatField())
                                                            ).filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()),Minutos_Trabajads__gt=F('Minutos_Trabajads_Jornada_Laboral'),diferencia__gt=180)
           
            if len(lista_horas_extras_3)>0:
                for ausencia in lista_horas_extras_3:
                        

                        extras_3hr=ausencia.Minutos_extras_diurnos_3h+ausencia.Minutos_extras_nocturnos_3h+ausencia.Minutos_de_extras_mixtas_diurnas_3hr+ausencia.Minutos_de_extras_mixtas_nocturnas_3hr



                        bool_ausencia=ausencia.HR_3_Aprobada
                        
                        if bool_ausencia==False and extras_3hr>0:
                            siguiente_bool=False
                        if extras_3hr>0:
                             lista=[ausencia.pk,
                                    ausencia.Colaborador.Colaborador_nombre+' '+ausencia.Colaborador.Colaborador_apellido,
                                    ausencia.Colaborador.Cargo,
                                    ausencia.Colaborador.Departamento,
                                    ausencia.Empresa.Codigo_cliente,
                                    ausencia.Empresa.nombre_empresa,
                                    str(ausencia.Dia_entrada),
                                    str(ausencia.Dia_salida),
                                    extras_3hr,
                                    ausencia.Quien_agrego_Jornada,
                                    ausencia.Entrada,
                                    ausencia.Salida,
                                    ausencia.HR_3_Aprobada,
                                    ausencia.HR_3_Aprobadas_por,
                                    ausencia.Colaborador.imagen

                                    #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                     
                                    ] 
                             lista_ausencia_final.append(lista)
                       
                
            if error:
                 a=1
                 #print('render con msj error')
                 ##print(msj_Error)
                
                
        
        return render(request, "motor_planilla_4.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion1),'admin':len(lista_administrativo), 'produccion':len(lista_produccion1),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})
 
def motor_planilla_p9(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        lista_ajustes=[]
        for i in lista_colaboradores:
            lista=[i.pk,
                    i.Colaborador_nombre,
                    i.Colaborador_apellido,
                    i.Cargo,
                    i.Departamento,
                    i.Supervisor,
                    i.Sueldo
                    ]
            lista_ajustes.append(lista)
             
             
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        if 'Activo1' in values:
            colaborador=Colaboradores.objects.get(pk=int(request.POST["colaborador1"]))
            tipo_Ajuste=request.POST["tipo_Ajuste"]
            concepto_Ajuste=request.POST["concepto_Ajuste"]
            descripcion=request.POST["descripcion"]
            monto=float(request.POST["monto"])
            Retener=request.POST["Retener"]
            
            if es_admin:
                quien_agrego_Jornada='Administrador'
            else:
                quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
            if Retener=='No':
                retener_bool=False
            else:
                 retener_bool=True
            planilla=request.POST["planilla"]
            try:
                created= Ajuste_Planilla.objects.get_or_create(Monto=monto, Colaborador=colaborador,Etapa=planilla,Tipo_Ajuste=tipo_Ajuste, Concepto_Ajuste=concepto_Ajuste,Comentario=descripcion,Retencion_Iva=retener_bool,Quien_agrego_Jornada=quien_agrego_Jornada)
                if True: #guardar Novedades
                        

                                                tipo_seguimiento='Ajuste Planilla'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Ajuste  Planilla, Tipo de Ajuste: '+tipo_Ajuste+' , Quincena: '+planilla+' Concepto  : '+concepto_Ajuste+' Colaborador: '+colaborador.Colaborador_nombre+' '+colaborador.Colaborador_apellido+' Nro Ident.: '+colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
        
            
            except:
                 a=1



        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      if es_admin:
                            aprobado_por='Administrador'
                      else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                            
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Ajuste_Planilla.objects.get(pk=int(id))
                           jornada.Aprobado_bool=True
                           jornada.Aprobado_por=aprobado_por
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            if 'Rechazar' in values:
                 if es_admin:
                            aprobado_por='Administrador'
                 else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

                 rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 
                 rechazar_permiso.save()

            elif 'Aprobar' in values:
                 if es_admin:
                            aprobado_por='Administrador'
                 else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

                 rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Aprobar"]))
                 rechazar_permiso.Estado_Permiso='Aprobado'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 rechazar_permiso.save()
            
            
            
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
               
            
            lista_AJUSTE=Ajuste_Planilla.objects.filter(Etapa=request.POST["planilla"])
            siguiente_bool=True
            lista_ausencia_final=[]

            for i in lista_AJUSTE:
                if i.Aprobado_bool==False:
                     siguiente_bool=False
                     
                lista=[i.pk,
                        i.Estado_Permiso,
                        i.Colaborador.Colaborador_nombre+' '+i.Colaborador.Colaborador_apellido,
                        i.Colaborador.Cargo,
                        i.Colaborador.Departamento,
                        i.Monto,
                        i.Tipo_Ajuste,
                        i.Concepto_Ajuste,
                        i.Comentario,
                        i.Retencion_Iva,
                        i.Quien_agrego_Jornada,
                        i.Aprobado_por,
                        i.Aprobado_bool,
                        i.Colaborador.imagen

                        #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.13 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.2 }}</td>
                           ]

                lista_ausencia_final.append(lista)

            


            if error:
                 a=1
                 #print('render con msj error')
                 ##print(msj_Error)
                
                
        
        return render(request, "motor_planilla_9.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool,'lista_ajustes':lista_ajustes})

def motor_planilla_p5(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        lista_ajustes=[]
             
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        


        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
            if es_admin:
                            aprobado_por='Administrador'
            else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      

                      for id in  lista_ausencia_aprobar:
                           jornada= Generar_Horario_Aministrativo.objects.get(pk=int(id))
                           jornada.Aprobado_bool=True
                           jornada.Aprobado_por=aprobado_por
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            if 'Rechazar' in values:
                 rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 
                 rechazar_permiso.save()

            elif 'GENERAR' in values and 'switch_aprobar' not in values:
                trabajador_obj=Colaboradores.objects.get(pk=int(request.POST["GENERAR"]))
                Fecha_Ingreso=trabajador_obj.Fecha_Ingreso
                Hora_entrada=trabajador_obj.Hora_entrada
                Hora_salida=trabajador_obj.Hora_salida
               
                lista_descanso  =  [   trabajador_obj.Dia_descanso_1,  trabajador_obj.Dia_descanso_2  ]
                if fecha_inicial_corte.date()>Fecha_Ingreso:
                    
                    #'inicial corte es mayor que cuando entro',fecha_inicial_corte.date(), Fecha_Ingreso )
                    fecha_inicial_generar=fecha_inicial_corte.date()

                elif fecha_inicial_corte.date()<=Fecha_Ingreso:
                    
                    fecha_inicial_generar=Fecha_Ingreso
                

                obj_si_hay_permiso_fecha_generar=Permisos.objects.filter(Colaborador__pk=trabajador_obj.pk, Estado_Permiso='Aprobado')
                
                lista_persimo_trabj=[]
                if len(obj_si_hay_permiso_fecha_generar)>0:
                     
                     for permisos in obj_si_hay_permiso_fecha_generar:
                        
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_generar, fecha_final_corte.date())
                        
                        if diass>0 and permisos.Estado_Permiso=='Aprobado':
                            
                            lista_persimo_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                         
                lista_persimo_trabj_final=[]
                
                if len(lista_persimo_trabj)>0:
                     for dia_d_per in lista_persimo_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_persimo_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

                #print(lista_persimo_trabj_final)                   
               
                lista_feriados_obj=Dias_Feriados.objects.filter(Dia_Feriado__range=(fecha_inicial_generar, fecha_final_corte.date()))  
                lista_feriados=[]
                if len(lista_feriados_obj)>0:
                     for yy in lista_feriados_obj:
                          lista_feriados.append(yy.Dia_Feriado)
                
                iter_inicio=True
                fecha_iterador=fecha_inicial_generar
                dias_trabajados=0
                permisos_tomados=0
                lista_horarios=[]
                
                while iter_inicio:
                    saber_dia=fecha_iterador.weekday()
                    
                    

                    if fecha_iterador in lista_feriados:
                        a=1
                        

                    elif saber_dia in lista_descanso:
                        a=1
                    
                    elif fecha_iterador in lista_persimo_trabj_final:
                        permisos_tomados+=1
                       
                        
                        a=1
                    else:
                        # se guarda la lista de horarios
                        dia_entradita=str(fecha_iterador)+' '+Hora_entrada
                        dia_salidita=str(fecha_iterador)+' '+Hora_salida
                        lista_horarios.append([dia_entradita,dia_salidita])
                        a=1
                        dias_trabajados+=1


                    if fecha_iterador==fecha_final_corte.date():
                        iter_inicio=False
                    
                    else:
                        fecha_iterador+=timedelta(days=1)
                        
                  
                #hacer jornadas de ese trabajador veamos lo que necesitan 
                            
                #Aquiii
                
                empresa_info=Info_Clientes.objects.get(pk=int(1))
                hora_entrada_contrato = trabajador_obj.Hora_entrada
                hora_salida_contrato = trabajador_obj.Hora_salida
                jornada_diaria = trabajador_obj.Jornada_diaria
                Almuerzo=trabajador_obj.Almuerzo_bool
                hora_de_inicio_almuerzo=trabajador_obj.Inicio_Hora_Almuerzo
                if hora_de_inicio_almuerzo!=23:
                    hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                else:
                    hora_de_final_almuerzo=0
                dia_descanso_1=trabajador_obj.Dia_descanso_1
                dia_descanso_2=trabajador_obj.Dia_descanso_2
                categoria_empleado=trabajador_obj.Departamento #si sale ruta
                tipo_de_jornada=trabajador_obj.Tipo_Jornada # 'Npcturna' ya sabes a donde va
        
                feriados=lista_feriados
                jornada_semanal=48
        
             
        
                ##print(categoria_empleado, colaborador_info.Colaborador_nombre)
                if categoria_empleado=='Ruta':
                    resultados = calcular_minutos_trabajados_diario_ruta(lista_horarios,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                elif tipo_de_jornada=='Nocturna':
                    resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(lista_horarios,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                else:
                    resultados = calcular_minutos_trabajados_diario_horas(lista_horarios,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                for i in resultados:
                    dia_entrada= i[0]
                    hr_entrada = i[1]
                    dia_salida = i[2]
                    hr_salida = i[3]
                    minutos_trabajados = i[4]
                    minutos_trabajadas_jornada_laboral = i[5]
                    minutos_extras_diurnos=i[6]
                    minutos_extras_nocturnos = i[7]
                    horas_laborales_extras = i[8]
                    minutos_de_tardia = i[9]
                    min_faltante_de_turno = i[10]
                    min_llego_temprano  =i[11]
                    minutos_de_extras_mixtas_nocturnas=i[12]
                    minutos_de_extras_mixtas_diurnas=i[13]
                    minutos_extras_diurnos_3hr  =i[14]
                    minutos_extras_nocturnos_3hr =i[15]
                    minutos_de_extras_mixtas_diurnas_3hr = i[16]
                    minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                    laboro_dia_domingo_descanso= i[18]
                    laboro_dia_feriado=i[19]
                    if es_admin:
                        quien_agrego_Jornada='Administrador'
                    else:
                        quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                    '''ver_si_hay_mismo_dia=Hoja_tiempo.objects.filter(Colaborador_id=colaborador_info.pk)
                    ver_si_hay_mismo_dia=Hoja_tiempo.objects.filter(Dia_entrada__icontains=dia_entrada)'''
                    try:
                 
                        created = Hoja_tiempo.objects.get(Dia_entrada=dia_entrada,Colaborador_id=trabajador_obj.pk)
                        Hoja_tiempo.objects.filter(pk=created.pk).update(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= trabajador_obj,Empresa=empresa_info,  Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                        if True: #guardar Novedades
                                                tipo_seguimiento='Jornada '
                                                sUB_Tipo_seguimiento=' Modificar '
                                                comment=' Modificar Jornada  Paso 5: '+str(dia_entrada)+' '+str(hr_entrada)+' Salida: '+str(dia_salida)+' '+str(hr_salida)+' Colaborador: '+trabajador_obj.Colaborador_nombre+' '+trabajador_obj.Colaborador_apellido+' Nro Ident.: '+trabajador_obj.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                            
                        ##print('se grabo uno ya existente')
                    except ObjectDoesNotExist:
                         #crear nuevo dia
                        created = Hoja_tiempo.objects.create(Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida,Colaborador= trabajador_obj,Empresa=empresa_info,  Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                        
                        
                        ##print('se grabo uno nuevo')

                #grabar el modelo Generar_Horario_Aministrativo
                
                try:
                        
                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

                        created = Generar_Horario_Aministrativo.objects.get(Periodo=planilla,Colaborador_id=trabajador_obj.pk)
                        Generar_Horario_Aministrativo.objects.filter(pk=created.pk).update(Dias_Trabajados=dias_trabajados,Dias_Permiso=permisos_tomados,Periodo=planilla,Estado_Generacion='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada,Aprobado_por='Sin_Aprobaciones',Aprobado_bool=False)
                        ##print('se grabo uno ya existente')

                except ObjectDoesNotExist:
                         #crear nuevo dia
                       
                        created = Generar_Horario_Aministrativo.objects.create(Colaborador=trabajador_obj,Dias_Trabajados=dias_trabajados,Dias_Permiso=permisos_tomados,Periodo=planilla,Estado_Generacion='Pendiente',Quien_agrego_Jornada=quien_agrego_Jornada,Aprobado_por='Sin_Aprobaciones',Aprobado_bool=False)
                        ##print('se grabo uno nuevo')
            
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
               
            
            lista_Adm=Colaboradores.objects.filter(Status__icontains='Activo',Departamento__icontains='Administrativo', Fecha_Ingreso__lte=fecha_final_corte.date())
            
            siguiente_bool=True
            lista_ausencia_final=[]

            for i in lista_Adm:
                try:
                    
                   
                    lista_horario_administrativo=Generar_Horario_Aministrativo.objects.get(Colaborador__pk=i.pk, Periodo=planilla)
                    
                    dias=lista_horario_administrativo.Dias_Trabajados
                    dias_permiso=lista_horario_administrativo.Dias_Permiso
                    
                    Status=lista_horario_administrativo.Estado_Generacion
                    aprobado_bool=lista_horario_administrativo.Aprobado_bool
                    quien_agrego_Jornada=lista_horario_administrativo.Quien_agrego_Jornada
                    aprobado_por=lista_horario_administrativo.Aprobado_por
                    pk_generear_horario=lista_horario_administrativo.pk

                    if aprobado_bool==False:
                        siguiente_bool=False
                
            
                except Exception as e:
                    
                    #print('Execp')
                    #print(e)
                    dias=0
                    dias_permiso=0
                    siguiente_bool=False
                    Status='Pendiente'
                    aprobado_por='Sin_Aprobaciones'
                    quien_agrego_Jornada='N/A #'
                    aprobado_bool=False
                    pk_generear_horario=0

                #saber si hay permisos en esas fechas que esten aprobadas
                
                lista_permisos=[]  
                tipos_permiso=[] 
                obj_si_hay_permiso_fecha=Permisos.objects.filter(Colaborador__pk=i.pk)
                
                if len(obj_si_hay_permiso_fecha)>0:
                     #si hay datos
                     for permisos in obj_si_hay_permiso_fecha:
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_corte.date(), fecha_final_corte.date())
                        if diass>0 and permisos.Estado_Permiso=='Aprobado':
                            lista_permisos.append(' Inicio: '+str(dia_inicio_permiso)+' Final: '+str(dia_fin_permiso))
                            tipos_permiso.append(permisos.Tipo_permiso)
                            
                             

                else:
                    bool_permiso=False
                    fecha='Sin Permisos'
                

                Permiso_string=''
                tipo_permiso_string=''
                if len(lista_permisos)==0:
                    Permiso_string='Sin Permiso en este Q.'  
                else:
                    for dd in   lista_permisos:
                        Permiso_string+=dd+'\n'
                

                if len(tipos_permiso)==0:
                    tipo_permiso_string='Sin T Permiso en este Q.'  
                else:
                    for dd in   tipos_permiso:
                        tipo_permiso_string+=dd+'\n'
                     
                     
                lista=[i.pk,
                       
                        dias,
                        i.Colaborador_nombre+' '+i.Colaborador_apellido,
                        
                        i.Cargo,
                        i.Departamento,
                        tipo_permiso_string,
                        
                        Permiso_string,
                        dias_permiso,
                        quien_agrego_Jornada,
                        aprobado_por,
                        aprobado_bool,
                        pk_generear_horario,
                        i.imagen

                        #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.12 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                     

                
                       
                       ]  
                      

                lista_ausencia_final.append(lista)   

                 

            if error:
                 a=1
                 #print('render con msj error')
                 ##print(msj_Error)
                
                
        
        return render(request, "motor_planilla_5.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool,'lista_ajustes':lista_ajustes})

def motor_planilla_p6(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        lista_ajustes=[]
             
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        

        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
            
            if es_admin:
                            aprobado_por='Administrador'
            else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Generar_Horario_Aministrativo.objects.get(pk=int(id))
                           jornada.Aprobado_bool=True
                           jornada.Aprobado_por=aprobado_por
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            if 'Rechazar' in values:
                 rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 
                 rechazar_permiso.save()

            
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
               
            
            lista_Adm=Colaboradores.objects.filter(Departamento__icontains='Administrativo')
            siguiente_bool=True
            lista_ausencia_final=[]

            
            if error:
                 a=1
                 #print('render con msj error')
                 ##print(msj_Error)
                
                
        
        return render(request, "motor_planilla_6.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool,'lista_ajustes':lista_ajustes})

def motor_planilla_p7(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.Ausencias_Aprobada=True
                           jornada.Ausencias_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
            if 'Cambiar' in values:
                if request.POST["hora_entrada"]!='' and request.POST["hora_salida"]!='':
                    jornada=Hoja_tiempo.objects.get(pk=int(request.POST["Cambiar"])) 
                    hr_entrada=request.POST["hora_entrada"]
                    hr_salida=request.POST["hora_salida"]

                    fecha_entrada=jornada.Dia_entrada
                    fecha_salida=jornada.Dia_salida
                    
                    entrada=str(fecha_entrada)+' '+hr_entrada
                    salida=str(fecha_salida)+' '+hr_salida
                    entradas_y_salidas.append([entrada,salida])
                    fecha_entrada1 = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                    fecha_salida1 = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                    tiempo_trabajado = fecha_salida1 -fecha_entrada1
                    tiempo_trabajado=tiempo_trabajado.total_seconds()
                    if tiempo_trabajado < 1 :
                        error=True
                        msj_Error='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                        
                        
                    elif tiempo_trabajado>=86400:
                        error=True
                        msj_Error='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'

                    if error==False:
                        lista_FERIADOS=Dias_Feriados.objects.all()
                        feriados=[]
                        jornada_semanal=48
                        for i in lista_FERIADOS:
                            feriados.append(i.Dia_Feriado)

                        categoria_empleado=jornada.Colaborador.Departamento
                        hora_entrada_contrato=jornada.Colaborador.Hora_entrada
                        hora_salida_contrato=jornada.Colaborador.Hora_salida
                        jornada_diaria=jornada.Colaborador.Jornada_diaria
                        jornada_semanal=jornada.Colaborador.Jornada_semanal
                        hora_de_inicio_almuerzo=jornada.Colaborador.Inicio_Hora_Almuerzo
                        if hora_de_inicio_almuerzo!=23:
                            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                        else:
                            hora_de_final_almuerzo=0
                        Almuerzo=jornada.Colaborador.Almuerzo_bool
                        dia_descanso_1=jornada.Colaborador.Dia_descanso_1
                        dia_descanso_2=jornada.Colaborador.Dia_descanso_2
                        tipo_de_jornada=jornada.Colaborador.Tipo_Jornada



                        if categoria_empleado=='Ruta':

                            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                        elif tipo_de_jornada=='Nocturna':

                            resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                        else:
                            resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                        for i in resultados:
                            dia_entrada= i[0]
                            hr_entrada = i[1]
                            dia_salida = i[2]
                            hr_salida = i[3]
                            minutos_trabajados = i[4]
                            minutos_trabajadas_jornada_laboral = i[5]
                            minutos_extras_diurnos=i[6]
                            minutos_extras_nocturnos = i[7]
                            horas_laborales_extras = i[8]
                            minutos_de_tardia = i[9]
                            min_faltante_de_turno = i[10]
                            min_llego_temprano  =i[11]
                            minutos_de_extras_mixtas_nocturnas=i[12]
                            minutos_de_extras_mixtas_diurnas=i[13]
                            minutos_extras_diurnos_3hr  =i[14]
                            minutos_extras_nocturnos_3hr =i[15]
                            minutos_de_extras_mixtas_diurnas_3hr = i[16]
                            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                            laboro_dia_domingo_descanso= i[18]
                            laboro_dia_feriado=i[19]

                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                        
                         
                        Hoja_tiempo.objects.filter(pk=jornada.pk).update(Ausencias_Aprobada=False,Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida, Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                

                else:
                    error=True
                    msj_Error='Alguna hora de entrada o salida esta faltando, Reintente por Favor.'

                 

            lista_tiempo=Hoja_tiempo.objects.filter(Colaborador__Departamento='Administrativo')
            siguiente_bool=True
            lista_ausencia_final=[]
            fin_cierre=True
            iter_dias=fecha_inicial_corte.date()
            while fin_cierre:
                lista_ausencia=lista_tiempo.filter(Dia_entrada=iter_dias)
                if len(lista_ausencia)>0:
                     for ausencia in lista_ausencia:
                        faltante=ausencia.Minutos_Faltantes_turno
                        bool_ausencia=ausencia.Ausencias_Aprobada
                        
                        if bool_ausencia==False and faltante>0:
                            siguiente_bool=False
                        if faltante>0:
                             lista=[ausencia.pk,
                                    ausencia.Colaborador.Colaborador_nombre+' '+ausencia.Colaborador.Colaborador_apellido,
                                    ausencia.Colaborador.Cargo,
                                    ausencia.Colaborador.Departamento,
                                    ausencia.Empresa.Codigo_cliente,
                                    ausencia.Empresa.nombre_empresa,
                                    str(ausencia.Dia_entrada),
                                    str(ausencia.Dia_salida),
                                    fun_minutoss(ausencia.Minutos_Faltantes_turno),
                                    ausencia.Quien_agrego_Jornada,
                                    ausencia.Entrada,
                                    ausencia.Salida,
                                    ausencia.Ausencias_Aprobada,
                                    ausencia.Ausencias_Aprobadas_por,
                                    ausencia.Colaborador.imagen

                        #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                           
                                    ] 
                             lista_ausencia_final.append(lista)
                iter_dias+= timedelta(days=1)
                if iter_dias==fecha_final_corte.date():
                    fin_cierre=False            
                
            if error:
                 a=1
                 #print('render con msj error')
                 #print(msj_Error)
                
                
        
        return render(request, "motor_planilla_7.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})
 
def motor_planilla_p8(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.HR_3_Aprobada=True
                           jornada.HR_3_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
            if 'Cambiar' in values:
                if request.POST["hora_entrada"]!='' and request.POST["hora_salida"]!='':
                    jornada=Hoja_tiempo.objects.get(pk=int(request.POST["Cambiar"])) 
                    hr_entrada=request.POST["hora_entrada"]
                    hr_salida=request.POST["hora_salida"]

                    fecha_entrada=jornada.Dia_entrada
                    fecha_salida=jornada.Dia_salida
                    
                    entrada=str(fecha_entrada)+' '+hr_entrada
                    salida=str(fecha_salida)+' '+hr_salida
                    entradas_y_salidas.append([entrada,salida])
                    fecha_entrada1 = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                    fecha_salida1 = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                    tiempo_trabajado = fecha_salida1 -fecha_entrada1
                    tiempo_trabajado=tiempo_trabajado.total_seconds()
                    if tiempo_trabajado < 1 :
                        error=True
                        msj_Error='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                        
                        
                    elif tiempo_trabajado>=86400:
                        error=True
                        msj_Error='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'

                    if error==False:
                        lista_FERIADOS=Dias_Feriados.objects.all()
                        feriados=[]
                        jornada_semanal=48
                        for i in lista_FERIADOS:
                            feriados.append(i.Dia_Feriado)

                        categoria_empleado=jornada.Colaborador.Departamento
                        hora_entrada_contrato=jornada.Colaborador.Hora_entrada
                        hora_salida_contrato=jornada.Colaborador.Hora_salida
                        jornada_diaria=jornada.Colaborador.Jornada_diaria
                        jornada_semanal=jornada.Colaborador.Jornada_semanal
                        hora_de_inicio_almuerzo=jornada.Colaborador.Inicio_Hora_Almuerzo
                        if hora_de_inicio_almuerzo!=23:
                            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                        else:
                            hora_de_final_almuerzo=0
                        Almuerzo=jornada.Colaborador.Almuerzo_bool
                        dia_descanso_1=jornada.Colaborador.Dia_descanso_1
                        dia_descanso_2=jornada.Colaborador.Dia_descanso_2
                        tipo_de_jornada=jornada.Colaborador.Tipo_Jornada



                        if categoria_empleado=='Ruta':

                            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                        elif tipo_de_jornada=='Nocturna':

                            resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                        else:
                            resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                        for i in resultados:
                            dia_entrada= i[0]
                            hr_entrada = i[1]
                            dia_salida = i[2]
                            hr_salida = i[3]
                            minutos_trabajados = i[4]
                            minutos_trabajadas_jornada_laboral = i[5]
                            minutos_extras_diurnos=i[6]
                            minutos_extras_nocturnos = i[7]
                            horas_laborales_extras = i[8]
                            minutos_de_tardia = i[9]
                            min_faltante_de_turno = i[10]
                            min_llego_temprano  =i[11]
                            minutos_de_extras_mixtas_nocturnas=i[12]
                            minutos_de_extras_mixtas_diurnas=i[13]
                            minutos_extras_diurnos_3hr  =i[14]
                            minutos_extras_nocturnos_3hr =i[15]
                            minutos_de_extras_mixtas_diurnas_3hr = i[16]
                            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                            laboro_dia_domingo_descanso= i[18]
                            laboro_dia_feriado=i[19]


                       
                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido 
                        Hoja_tiempo.objects.filter(pk=jornada.pk).update(HR_3_Aprobada=False,Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida, Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                

                else:
                    error=True
                    msj_Error='Alguna hora de entrada o salida esta faltando, Reintente por Favor.'

                 
            
            lista_tiempo=Hoja_tiempo.objects.filter(Colaborador__Departamento='Administrativo')
            siguiente_bool=True
            lista_ausencia_final=[]
            fin_cierre=True
            iter_dias=fecha_inicial_corte.date()
            while fin_cierre:
                lista_ausencia=lista_tiempo.filter(Dia_entrada=iter_dias)
                if len(lista_ausencia)>0:
                     for ausencia in lista_ausencia:
                        

                        extras_3hr=ausencia.Minutos_extras_diurnos_3h+ausencia.Minutos_extras_nocturnos_3h+ausencia.Minutos_de_extras_mixtas_diurnas_3hr+ausencia.Minutos_de_extras_mixtas_nocturnas_3hr



                        bool_ausencia=ausencia.HR_3_Aprobada
                        
                        if bool_ausencia==False and extras_3hr>0:
                            siguiente_bool=False
                        if extras_3hr>0:
                             lista=[ausencia.pk,
                                    ausencia.Colaborador.Colaborador_nombre+' '+ausencia.Colaborador.Colaborador_apellido,
                                    ausencia.Colaborador.Cargo,
                                    ausencia.Colaborador.Departamento,
                                    ausencia.Empresa.Codigo_cliente,
                                    ausencia.Empresa.nombre_empresa,
                                    str(ausencia.Dia_entrada),
                                    str(ausencia.Dia_salida),
                                    extras_3hr,
                                    ausencia.Quien_agrego_Jornada,
                                    ausencia.Entrada,
                                    ausencia.Salida,
                                    ausencia.HR_3_Aprobada,
                                    ausencia.HR_3_Aprobadas_por,
                                    ausencia.Colaborador.imagen

                        #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                           
                                    ] 
                             lista_ausencia_final.append(lista)
                iter_dias+= timedelta(days=1)
                if iter_dias==fecha_final_corte.date():
                    fin_cierre=False            
                
            if error:
                 a=1
                 #print('render con msj error')
                 ##print(msj_Error)
                
                
        
        return render(request, "motor_planilla_8.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})
 
def motor_planilla_p10(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'Confirmar_Planilla' in values:
            quater=request.POST["Confirmar_Planilla"]
            empresa_id=1
            try:
                created = Cerrar_Planilla.objects.get(Empresa_id=empresa_id, Periodo=quater)
            except:
                created = Cerrar_Planilla.objects.create(Empresa_id=empresa_id, Periodo=quater)


            if True: #Actualizar acreedores 
                lista_acreedores=Acreedores_quincena.objects.filter( Periodo_Cobro = quater , Tipo_Operacion='Planilla' , Realizo_Cobreo=False )
                if len(lista_acreedores)>0:
                    for acreedore_obj in lista_acreedores:
                        
                            monto_abonado = acreedore_obj.Monto_periodo
                            obj_principal= acreedore_obj.Acreedores
                            #actualizar
                            obj_principal.dinero_pagado=obj_principal.dinero_pagado+monto_abonado
                            obj_principal.cuotas_restante = acreedore_obj.Nro_Cuota
                            obj_principal.save()
                            acreedore_obj.Realizo_Cobreo=True
                            acreedore_obj.save()
                    

            if True: #guardar Novedades
                                                tipo_seguimiento='Planilla '
                                                sUB_Tipo_seguimiento=' Cerrar Planilla '
                                                comment=' Planilla Cerrada exitosamente en Periodo: '+quater
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                 


            return redirect('pagina_planilla_cerrada') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            QQ=Quater+'-'+lista_planilla[1]
            Quater=Quater.replace('Q','')
            
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            
            lista_xiii=['Q1-12','Q1-4','Q1-8']
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_date=datetime(year, mes, fecha_pago)
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.HR_3_Aprobada=True
                           jornada.HR_3_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### Aqui en empieza calculo
            #### 1 sacar dias trabajados y dias vacaciones 
            # 2 sacar horas extras semanales 
            #sacar ausencia
            #sacar feriados con dias libres
            #esto dara en salario bruto
            lista_ausencia_final=[]
            siguiente_bool=False
            bool_fecha_ingreso_quincena =False
            lista_Colaboradores_obj=Colaboradores.objects.filter(Status='Activo',  Fecha_Ingreso__lte=fecha_final_corte.date())
            for colaborador_obj in lista_Colaboradores_obj:
                Fecha_Ingreso=colaborador_obj.Fecha_Ingreso
                hr_jornada_semanal=colaborador_obj.Jornada_semanal
                colab_hr_jorn_diaria=colaborador_obj.Jornada_diaria
                sueldo_mensual=colaborador_obj.Sueldo
                sueldo_quincena=sueldo_mensual/2
                sueldo_semanal=sueldo_mensual*12/52
                sueldo_hr=sueldo_semanal/hr_jornada_semanal
                sueldo_min=sueldo_hr/60
                sueldo_diario_vacas=sueldo_semanal/7
                if colaborador_obj.Departamento=='Ruta':
                    sueldo_diario=sueldo_semanal/7
                else:

                    sueldo_diario=sueldo_hr*colab_hr_jorn_diaria

                #print(sueldo_mensual,sueldo_quincena,sueldo_diario,sueldo_hr,sueldo_min)
                lista_descanso  =  [   colaborador_obj.Dia_descanso_1,  colaborador_obj.Dia_descanso_2  ]

                if fecha_inicial_corte.date()>Fecha_Ingreso:
                    #'inicial corte es mayor que cuando entro',fecha_inicial_corte.date(), Fecha_Ingreso )
                     fecha_inicial_generar=fecha_inicial_corte.date()
                elif fecha_inicial_corte.date()<=Fecha_Ingreso:
                     fecha_inicial_generar=Fecha_Ingreso
                     bool_fecha_ingreso_quincena=True

                #necesitamos empeza con la planilla con el rango de fecha exactas
                lista_hoja_tiempo_trabajador=Hoja_tiempo.objects.filter(Colaborador__pk=colaborador_obj.pk, Dia_entrada__range=(fecha_inicial_generar, fecha_final_corte.date()))

                obj_si_hay_permiso_fecha_generar=Permisos.objects.filter(Colaborador__pk=colaborador_obj.pk, Estado_Permiso='Aprobado')
                
                lista_vacas_trabj=[]
                lista_incap_trabj=[]
                lista_incap_trabj_caja_paga=[]
                lista_lic_pag_trabj=[]
                if len(obj_si_hay_permiso_fecha_generar)>0:
                     #si hay datos
                     for permisos in obj_si_hay_permiso_fecha_generar:
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_generar , fecha_final_corte.date())
                        if diass>0 :
                            if permisos.Tipo_permiso=='Vacaciones':
                                lista_vacas_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                            elif permisos.Tipo_permiso=='Incapacidad' and  permisos.Pagado_por_Empresa_o_CCSS=='empresa':
                                lista_incap_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                            elif permisos.Tipo_permiso=='Incapacidad':
                                lista_incap_trabj_caja_paga.append([dia_inicio_permiso,dia_fin_permiso])
                            else:
                                lista_lic_pag_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                
                lista_vacas_trabj_final=[] #lista con los dias de vacaciones o permisos
                lista_incap_trabj_final=[]
                lista_lic_p_trabj_final=[]
                lista_incap_trabj_caja_paga_final=[]

                if len(lista_vacas_trabj)>0:
                     for dia_d_per in lista_vacas_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_vacas_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

                if len(lista_incap_trabj)>0:
                     for dia_d_per in lista_incap_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_incap_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)
               
                if len(lista_lic_pag_trabj)>0:
                     for dia_d_per in lista_lic_pag_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_lic_p_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

                if len(lista_incap_trabj_caja_paga)>0:
                     for dia_d_per in lista_incap_trabj_caja_paga:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_incap_trabj_caja_paga_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)                      
                
                lista_feriados_obj=Dias_Feriados.objects.filter(Dia_Feriado__range=(fecha_inicial_generar, fecha_final_corte.date()))  
                lista_feriados=[]

                if len(lista_feriados_obj)>0:
                     for yy in lista_feriados_obj:
                          lista_feriados.append(yy.Dia_Feriado)
                
                iter_inicio=True
                fecha_iterador=fecha_inicial_generar
                dias_trabajados=0
                dias_trabajados_compl=0
                dias_trabajados_no_compl=0
                dias_traba_feriados=0
                dias_trabaja_descanso=0
                dias_trabj_fer_con_descanso=0
                dias_trabajo_hr_regulares_Adicionales=0
                vacaciones=0
                incapacidad=0
                incapacidad_caja=0
                licenc_paga=0
                dia_ausencia=0
                dia_descanso=0
                
                ###Minutos
                min_ausencia=0
                min_ausencia_ruta=0
                min_dias_trabj_fer_con_descanso=0
                min_dias_trabaja_descanso=0
                min_dias_traba_feriados=0
                min_dias_trabajo_hr_regulares_Adicionales=0
                min_totales_trabajados=0

                #hr_extras
                hr_extras_diurnas=0
                hr_extras_nocturn=0
                hr_extra_mixta_diu=0
                hr_extra_mixta_noc=0

                hr_extra_diurna_3h=0
                hr_extra_noctur_3h=0
                hr_extra_mix_diu_3h=0
                hr_extra_mix_noc_3h=0
                #feriado
                hr_extra_feriado_diur=0
                hr_extra_feriado_noct=0
                hr_extra_feriado_mix_diur=0
                hr_extra_feriado_mix_noct=0

                hr_extra_feriado_diur_3h=0
                hr_extra_feriado_noct_3h=0
                hr_extra_feriado_mix_diu_3h=0
                hr_extra_feriado_mix_noc_3h=0
                #dia descanso domingo
                hr_extra_descanso_diur=0
                hr_extra_descanso_noct=0
                hr_extra_descanso_mix_diur=0
                hr_extra_descanso_mix_noct=0

                hr_extra_descanso_diur_3h=0
                hr_extra_descanso_noct_3h=0
                hr_extra_descanso_mix_diu_3h=0
                hr_extra_descanso_mix_noc_3h=0

                #bonos y reduciones con o sin impuesto
                bonos_con_impuesto=0
                bonos_sin_impuesto=0

                duduciones_con_impuesto=0
                deduciones_sin_impuesto=0
                # Acreedores
                acredores_hipotecario=0
                cuotas_acredores_hipotecario=0
                acredores_empresa=0
                cuotas_acredores_empresa=0

                #formula Acreedores
                if True: 
                    lista_acree=Acreedores.objects.filter(Colaborador__pk=colaborador_obj.pk, Estado_Permiso='Aprobado',Dia_inicio_cobro__lte=fecha_pago_date.date(),Dia_fin_cobro__gte=fecha_pago_date.date())
                    if len(lista_acree)>0:
                         for acreedores_obj in lista_acree:
                            tipo_acreeditor=acreedores_obj.Tipo_acreeditor
                            monto_mensual_acree=acreedores_obj.Monto_mensual
                            cuotas_restante_acre=acreedores_obj.cuotas_restante
                            if tipo_acreeditor=='Empresa':
                                acredores_empresa+=monto_mensual_acree
                                cuotas_acredores_empresa=cuotas_restante_acre+1
                            elif tipo_acreeditor=='Hipotecario':
                                acredores_hipotecario+=monto_mensual_acree
                                cuotas_acredores_hipotecario=cuotas_restante_acre+1
                            else:
                                acredores_hipotecario+=monto_mensual_acree
                                cuotas_acredores_empresa=cuotas_restante_acre+1

                #formula Bonos y reduciones              
                if True:
                    lista_ajuste_planilla=Ajuste_Planilla.objects.filter(Colaborador__pk=colaborador_obj.pk, Etapa=planilla, Aprobado_bool=True, Estado_Permiso='Aprobado')
                    if len(lista_ajuste_planilla)>0:
                         for ajustes in lista_ajuste_planilla:
                            tipo_Ajuste=ajustes.Tipo_Ajuste
                            retencion_Iva=ajustes.Retencion_Iva
                            monto=ajustes.Monto
                            if tipo_Ajuste=='Suma':
                                if retencion_Iva:
                                    bonos_con_impuesto+=monto
                                else:
                                    bonos_sin_impuesto+= monto
                            else:
                                if retencion_Iva:
                                    duduciones_con_impuesto+=monto
                                else:
                                    deduciones_sin_impuesto+= monto
                                    




                ## vamos a crear una funcion que de un numero que acumule los feriados de la semana para cuando arranque el programa.
                if   colaborador_obj.Departamento=='Ruta':
                    num_hr_acumuladas_en_semana=fun_num_hr_acumuladas_en_semana_antes_que_empieza_Ruta(fecha_iterador,colaborador_obj)
                    num_hr_extras_acumuladas_en_semana_=0
                else:
                    num_hr_extras_acumuladas_en_semana_=fun_num_hr_extras_acumuladas_en_semana_antes_que_empieza(fecha_iterador,colaborador_obj)
                    num_hr_acumuladas_en_semana=fun_num_hr_acumuladas_en_semana_antes_que_empieza(fecha_iterador,colaborador_obj)
                    limite_hr_semanales=540

                lista_cliente_periodo=[]

                ##print('num_hr_extras_acumuladas_en_semana_',num_hr_extras_acumuladas_en_semana_)
                if   colaborador_obj.Departamento=='Ruta':
                    lista_calculo_dia_ruta = calculo_planilla_dia_Ruta(num_hr_acumuladas_en_semana, colaborador_obj.pk , hr_jornada_semanal, fecha_iterador, fecha_final_corte , lista_vacas_trabj_final, lista_descanso , lista_feriados , lista_incap_trabj_final , lista_lic_p_trabj_final , lista_incap_trabj_caja_paga_final)
                    
                    dias_trabj_fer_con_descanso=lista_calculo_dia_ruta[0]

                    min_dias_trabj_fer_con_descanso =lista_calculo_dia_ruta[1]
                    min_dias_traba_feriados =lista_calculo_dia_ruta[2]

                    dias_trabaja_descanso =lista_calculo_dia_ruta[3]
                    min_dias_trabaja_descanso =lista_calculo_dia_ruta[4]

                    min_totales_trabajados =lista_calculo_dia_ruta[5]
                    dias_trabajados =lista_calculo_dia_ruta[6]

                    min_ausencia_ruta =lista_calculo_dia_ruta[7]
                    min_dias_trabajo_hr_regulares_Adicionales  = lista_calculo_dia_ruta[8]
                    hr_extras_diurnas =lista_calculo_dia_ruta[9]

                    dias_traba_feriados =lista_calculo_dia_ruta[10]
                    dia_ausencia =lista_calculo_dia_ruta[11]
                    lista_cliente_periodo =lista_calculo_dia_ruta[12]
                    vacaciones= lista_calculo_dia_ruta[13]
        
                    incapacidad= lista_calculo_dia_ruta[14]
                    licenc_paga= lista_calculo_dia_ruta[15]
                    incapacidad_caja=lista_calculo_dia_ruta[16]


                else:

                    while iter_inicio:
                        
                        saber_dia=fecha_iterador.weekday()
                        if saber_dia==0:
                            num_hr_extras_acumuladas_en_semana_=0
                            num_hr_acumuladas_en_semana=0
                        try:
                            


                            lista_si_trabajo_ese_dia=lista_hoja_tiempo_trabajador.get(Dia_entrada=fecha_iterador)
                            bool_trabajo=True
                        except:
                            bool_trabajo=False


                        if bool_trabajo:
                            #hay que sacar si trabajo domingo
                            # si trabajo completo su jornada 
                            #si trabajo feriados
                            trabj_feriad=lista_si_trabajo_ese_dia.laboro_dia_feriado
                            trabj_descanso=lista_si_trabajo_ese_dia.Laboro_dia_domingo_descanso
                            trabajo_en_hrs=lista_si_trabajo_ese_dia.Minutos_Trabajads_Jornada_Laboral #min que trabajo en jornada normal
                            trabajo_en_hrs_adicionales=lista_si_trabajo_ese_dia.Minutos_Laborales_extras
                            
                            num_hr_acumuladas_en_semana+=lista_si_trabajo_ese_dia.Minutos_Trabajads
                            lista_cliente_periodo.append([lista_si_trabajo_ese_dia.Empresa.pk, num_hr_acumuladas_en_semana])

                            

                            if trabj_feriad and trabj_descanso:
                                dias_trabj_fer_con_descanso+=1
                                min_dias_trabj_fer_con_descanso+=trabajo_en_hrs + trabajo_en_hrs_adicionales

                                resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                hr_extra_feriado_diur+= resultado_hr_extras[1]
                                hr_extra_feriado_noct+= resultado_hr_extras[2]
                                hr_extra_feriado_mix_diur+=resultado_hr_extras[3]
                                hr_extra_feriado_mix_noct+=resultado_hr_extras[4]

                                hr_extra_feriado_diur_3h+=resultado_hr_extras[5]
                                hr_extra_feriado_noct_3h+=resultado_hr_extras[6]
                                hr_extra_feriado_mix_diu_3h+=resultado_hr_extras[7]
                                hr_extra_feriado_mix_noc_3h+=resultado_hr_extras[8]

                                #descanso
                                hr_extra_descanso_diur+= resultado_hr_extras[1]
                                hr_extra_descanso_noct+= resultado_hr_extras[2]
                                hr_extra_descanso_mix_diur+=resultado_hr_extras[3]
                                hr_extra_descanso_mix_noct+=resultado_hr_extras[4]

                                hr_extra_descanso_diur_3h+=resultado_hr_extras[5]
                                hr_extra_descanso_noct_3h+=resultado_hr_extras[6]
                                hr_extra_descanso_mix_diu_3h+=resultado_hr_extras[7]
                                hr_extra_descanso_mix_noc_3h+=resultado_hr_extras[8]


                            elif trabj_feriad:
                                dias_traba_feriados+=1
                                min_dias_traba_feriados+=trabajo_en_hrs +  trabajo_en_hrs_adicionales

                                resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                hr_extra_feriado_diur+= resultado_hr_extras[1]
                                hr_extra_feriado_noct+= resultado_hr_extras[2]
                                hr_extra_feriado_mix_diur+=resultado_hr_extras[3]
                                hr_extra_feriado_mix_noct+=resultado_hr_extras[4]

                                hr_extra_feriado_diur_3h+=resultado_hr_extras[5]
                                hr_extra_feriado_noct_3h+=resultado_hr_extras[6]
                                hr_extra_feriado_mix_diu_3h+=resultado_hr_extras[7]
                                hr_extra_feriado_mix_noc_3h+=resultado_hr_extras[8]

                            elif trabj_descanso:
                                if lista_si_trabajo_ese_dia.Colaborador.Departamento=='Administrativo' and saber_dia !=6:
                                    dias_trabajo_hr_regulares_Adicionales+=1
                                    min_dias_trabajo_hr_regulares_Adicionales+=trabajo_en_hrs + trabajo_en_hrs_adicionales
                                    resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                    num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                    hr_extras_diurnas+= resultado_hr_extras[1]
                                    hr_extras_nocturn+= resultado_hr_extras[2]
                                    hr_extra_mixta_diu+=resultado_hr_extras[3]
                                    hr_extra_mixta_noc+=resultado_hr_extras[4]

                                    hr_extra_diurna_3h+=resultado_hr_extras[5]
                                    hr_extra_noctur_3h+=resultado_hr_extras[6]
                                    hr_extra_mix_diu_3h+=resultado_hr_extras[7]
                                    hr_extra_mix_noc_3h+=resultado_hr_extras[8]
                                else:     
                                    dias_trabaja_descanso+=1
                                    min_dias_trabaja_descanso+=trabajo_en_hrs + trabajo_en_hrs_adicionales
                                    resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                    num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                    hr_extra_descanso_diur+= resultado_hr_extras[1]
                                    hr_extra_descanso_noct+= resultado_hr_extras[2]
                                    hr_extra_descanso_mix_diur+=resultado_hr_extras[3]
                                    hr_extra_descanso_mix_noct+=resultado_hr_extras[4]

                                    hr_extra_descanso_diur_3h+=resultado_hr_extras[5]
                                    hr_extra_descanso_noct_3h+=resultado_hr_extras[6]
                                    hr_extra_descanso_mix_diu_3h+=resultado_hr_extras[7]
                                    hr_extra_descanso_mix_noc_3h+=resultado_hr_extras[8]

                                
                            else:  
                                
                                hrs_en_contrato= colaborador_obj.Jornada_diaria *60
                                min_dias_trabajo_hr_regulares_Adicionales+=trabajo_en_hrs_adicionales
                                
                                if trabajo_en_hrs>=hrs_en_contrato:
                                    dias_trabajados_compl+=1
                                    #Estudio de Hora extras 
                                    resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                    num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]
                                    hr_extras_diurnas+= resultado_hr_extras[1]
                                    hr_extras_nocturn+= resultado_hr_extras[2]
                                    hr_extra_mixta_diu+=resultado_hr_extras[3]
                                    hr_extra_mixta_noc+=resultado_hr_extras[4]
                                    hr_extra_diurna_3h+=resultado_hr_extras[5]
                                    hr_extra_noctur_3h+=resultado_hr_extras[6]
                                    hr_extra_mix_diu_3h+=resultado_hr_extras[7]
                                    hr_extra_mix_noc_3h+=resultado_hr_extras[8]
                                    

                                else:
                                    dias_trabajados_no_compl+=1
                                    min_ausencia+=lista_si_trabajo_ese_dia.Minutos_Faltantes_turno
                                    #print(min_ausencia,'min_ausencia')
                                dias_trabajados+=1
                                
                        elif fecha_iterador in  lista_vacas_trabj_final:
                            vacaciones+=1
                        
                        elif saber_dia in lista_descanso  :
                            dia_descanso+=1
                        
                            
                        elif fecha_iterador in lista_feriados :
                            dias_trabajados+=1
                            dias_trabajados_compl+=1   
                        
                        elif fecha_iterador in  lista_incap_trabj_final:
                            incapacidad+=1
                        elif fecha_iterador in lista_incap_trabj_caja_paga_final:
                            incapacidad_caja+=1
                        
                        elif fecha_iterador in  lista_lic_p_trabj_final:
                            licenc_paga+=1

                        
                        
                        else:
                            # no fue a trabajar 
                            if colaborador_obj.Departamento!='Ruta':

                                if colaborador_obj.Jornada_Laboral_Equitativa_Semanal == False:

                                    lista_estudiar_planificacion= Planificacion.objects.filter(Colaborador__pk=colaborador_obj.pk, Dia_Inicio_Planificacion__lte=fecha_iterador , Dia_Salidad_Planificacion__gte=fecha_iterador )
                            #lista_estudiar_planificacion=lista_colaboradores_filtrados.filter(Colaborador__pk=id_col)
                                
                                    if len(lista_estudiar_planificacion)>0:
                                        #si hay datos y se elegira la ultima
                                        u=len(lista_estudiar_planificacion)-1
                                        lista_datos_importantes=fun_saber_datos_depende_dia_para_hoja_tiempo(lista_estudiar_planificacion[u], saber_dia ) #lista con la ultima de planificacion, dia de la semana
                                        
                                        
                                        #[Cliente,hora_entrada_contrato,hora_salida_contrato,jornada_diaria, Almuerzo,hora_de_inicio_almuerzo, dia_descanso, tipo_de_jornada]
                                    
                                        jornada_semanal=48

                                        #saber si es dia de descanso para marcarlo como dia de descanso

                                        #sino es dia de descanso pues pedir toda la info para crear 1 dia unico 

                                    
                                    
                                        jornada_diaria =lista_datos_importantes[3]
                                        if jornada_diaria!=colab_hr_jorn_diaria:
                                            min_ausencia+=jornada_diaria*60
                                        else:
                                            dia_ausencia+=1

                                    
                                    else:   
                                        dia_ausencia+=1
                                else:   
                                    dia_ausencia+=1
                        


                        if saber_dia==6 and num_hr_acumuladas_en_semana  <  hr_jornada_semanal*60:

                            min_ausencia_ruta += hr_jornada_semanal*60 - num_hr_acumuladas_en_semana
                            
                        

                        if fecha_iterador==fecha_final_corte.date():
                            iter_inicio=False
                        
                        else:
                            fecha_iterador+=timedelta(days=1)


                ###aQUI TERMINA WHILE
                        
                if  colaborador_obj.Departamento=='Ruta' and min_ausencia_ruta>0:
                    min_ausencia=min_ausencia_ruta
                      
                '''
                #print(colaborador_obj.Colaborador_nombre)   
                #print('trabajo  la quincena completa',dia_ausencia==0)  
                #print('dias_trabajados',dias_trabajados)
                #print('dias_trabajados_compl',dias_trabajados_compl)
                #print('dias_trabajados_no_compl',dias_trabajados_no_compl)
                #print('dias_trabajo_hr_regulares_Adicionales',dias_trabajo_hr_regulares_Adicionales)
            
                
                #print('vacaciones',vacaciones)
                #print('incapacidad',incapacidad)
                #print('licenc_paga',licenc_paga)
                #print('dia_descanso',dia_descanso   )'''

                #hr extras o feriado domingo

                '''#print('dias_trabj_fer_con_descanso',dias_trabj_fer_con_descanso,' en dolares es : +', (min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr)
                #print('dias_traba_feriados',dias_traba_feriados,' en dolares es : +', (min_dias_traba_feriados/60)*2.5* sueldo_hr)
                #print('dias_trabaja_descanso',dias_trabaja_descanso,' en dolares es : +', (min_dias_trabaja_descanso/60)*1.5* sueldo_hr)
                #print('min_dias_trabajo_hr_regulares_Adicionales',min_dias_trabajo_hr_regulares_Adicionales,' en dolares es : +', (min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr)
                ''' 
                ##deducciones monetarias
                ##print('min_ausencia',min_ausencia,'en dolares es: -',min_ausencia*sueldo_min)
                ##print('dia_ausencia',dia_ausencia,'en dolares es: -',dia_ausencia*sueldo_diario)

                # horas extras
                ''' 
                #print('***************\n*****************')
                #print('hr_extras_diurnas',hr_extras_diurnas,' en dolares es : +', (hr_extras_diurnas/60)*1.25* sueldo_hr)
                #print('hr_extras_nocturn',hr_extras_nocturn,' en dolares es : +', (hr_extras_nocturn/60)*1.5* sueldo_hr)
                #print('hr_extra_mixta_diu',hr_extra_mixta_diu,' en dolares es : +', (hr_extra_mixta_diu/60)*1.5* sueldo_hr)
                #print('hr_extra_mixta_noc',hr_extra_mixta_noc,' en dolares es : +', (hr_extra_mixta_noc/60)*1.75* sueldo_hr)
                #print('********************************')
                #print('hr_extra_diurna_3h',hr_extra_diurna_3h,' en dolares es : +', (hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr)
                #print('hr_extra_noctur_3h',hr_extra_noctur_3h,' en dolares es : +', (hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr)
                #print('hr_extra_mix_diu_3h',hr_extra_mix_diu_3h,' en dolares es : +', (hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr)
                #print('hr_extra_mix_noc_3h',hr_extra_mix_noc_3h,' en dolares es : +', (hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr)
                #print('**************Extra Feriado******************')
                #print('hr_extra_feriado_diur',hr_extra_feriado_diur,' en dolares es : +', (hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr)
                #print('hr_extra_feriado_noct',hr_extra_feriado_noct,' en dolares es : +', (hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr)
                #print('hr_extra_feriado_mix_diur',hr_extra_feriado_mix_diur,' en dolares es : +', (hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr)
                #print('hr_extra_feriado_mix_noct',hr_extra_feriado_mix_noct,' en dolares es : +', (hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr)
                #print('********************************')
                #print('hr_extra_feriado_diur_3h',hr_extra_feriado_diur_3h,' en dolares es : +', (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr)
                #print('hr_extra_feriado_noct_3h',hr_extra_feriado_noct_3h,' en dolares es : +', (hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr)
                #print('hr_extra_feriado_mix_diu_3h',hr_extra_feriado_mix_diu_3h,' en dolares es : +', (hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr)
                #print('hr_extra_feriado_mix_noc_3h',hr_extra_feriado_mix_noc_3h,' en dolares es : +', (hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr)
                #print('**************Extra Descanso******************')
                #print('hr_extra_descanso_diur',hr_extra_descanso_diur,' en dolares es : +', (hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr)
                #print('hr_extra_descanso_noct',hr_extra_descanso_noct,' en dolares es : +', (hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr)
                #print('hr_extra_descanso_mix_diur',hr_extra_descanso_mix_diur,' en dolares es : +', (hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr)
                #print('hr_extra_descanso_mix_noct',hr_extra_descanso_mix_noct,' en dolares es : +', (hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr)
                #print('********************************')
                #print('hr_extra_descanso_diur_3h',hr_extra_descanso_diur_3h,' en dolares es : +', (hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr)
                #print('hr_extra_descanso_noct_3h',hr_extra_descanso_noct_3h,' en dolares es : +', (hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr)
                #print('hr_extra_descanso_mix_diu_3h',hr_extra_descanso_mix_diu_3h,' en dolares es : +', (hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr)
                #print('hr_extra_descanso_mix_noc_3h',hr_extra_descanso_mix_noc_3h,' en dolares es : +', (hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr)

                
                #print('***************\nAcreedores y Bonos\n*****************')
                #print('bonos_con_impuesto',bonos_con_impuesto)
                #print('bonos_sin_impuesto',bonos_sin_impuesto)
                #print('duduciones_con_impuesto',duduciones_con_impuesto)
                #print('deduciones_sin_impuesto',deduciones_sin_impuesto)
                #print('********************************')
                #print('acredores_hipotecario',acredores_hipotecario,'cuotas_acredores_hipotecario',cuotas_acredores_hipotecario)
                #print('acredores_empresa',acredores_empresa,'cuotas_acredores_empresa',cuotas_acredores_empresa )
                '''
                ##print('***************\nTotales\n*****************')
                if colaborador_obj.Departamento=='Ruta':
                    sueldo_base=sueldo_quincena - ( incapacidad*sueldo_diario +licenc_paga*sueldo_diario  + sueldo_diario_vacas*vacaciones + incapacidad_caja*sueldo_diario)
                elif bool_fecha_ingreso_quincena:
                    sueldo_base= (dias_trabajados*sueldo_diario)- ( incapacidad*sueldo_diario +licenc_paga*sueldo_diario + sueldo_diario_vacas*vacaciones)
                else:
                    sueldo_base=sueldo_quincena - ( incapacidad*sueldo_diario +licenc_paga*sueldo_diario + sueldo_diario_vacas*vacaciones + incapacidad_caja*sueldo_diario)
                ##print('Sueldo Quincenal: +',sueldo_base)
                if sueldo_base<=0:
                        sueldo_base=0

                extra_time_total=(hr_extras_diurnas/60)*1.25* sueldo_hr+(hr_extras_nocturn/60)*1.5* sueldo_hr+(hr_extra_mixta_diu/60)*1.5* sueldo_hr+(hr_extra_mixta_noc/60)*1.75* sueldo_hr+(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr+(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr+(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr+(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr+(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr+(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr+(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr+(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr+(hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr+(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr+(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr+(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr+(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr+(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr+(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr+(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr+(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr+(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr+(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr+ (hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr
                '''
                #print('Total SobreTiempo : +', extra_time_total)
                #print('dias_trabj_fer_con_descanso : +', (min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr)
                #print('dias_traba_feriados: +', (min_dias_traba_feriados/60)*2.5* sueldo_hr)
                #print('dias_trabaja_descanso: +', (min_dias_trabaja_descanso/60)*1.5* sueldo_hr)
                #print('Vacaciones : +', vacaciones*sueldo_diario)
                #print('Incapacidad : +', incapacidad*sueldo_diario)
                #print('Incapacidad : +', licenc_paga*sueldo_diario)
                #print( 'bonos_con_impuesto: +',bonos_con_impuesto)
                '''
                if colaborador_obj.Departamento=='Ruta':
                    ##print('sueldo bruto')

                    sueldo_bruto=sueldo_base+(min_dias_trabaja_descanso/60)*1.5* sueldo_hr+(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr+ (min_dias_traba_feriados/60)*2.5* sueldo_hr+extra_time_total+incapacidad*sueldo_diario+  licenc_paga*sueldo_diario+bonos_con_impuesto+(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                    '''#print(sueldo_bruto,sueldo_base+(min_dias_trabaja_descanso/60)*1.5* sueldo_hr+(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr+ (min_dias_traba_feriados/60)*2.5* sueldo_hr+extra_time_total+incapacidad*sueldo_diario+licenc_paga*sueldo_diario+bonos_con_impuesto+(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr)
                    #print('sueldo_base',sueldo_base)
                    #print('sueldo_quincena',sueldo_quincena)
                    #print('dias_trabajados   ',dias_trabajados,sueldo_diario)
                     
                    #print('extra_time_total', extra_time_total)
                    #print('min_dias_trabajo_hr_regulares_Adicionales', min_dias_trabajo_hr_regulares_Adicionales, '/60* sueldo_hr')
                    #print('min_dias_trabaja_descanso',min_dias_trabaja_descanso,'/60','*1.5')'''
                else:
                    sueldo_bruto=sueldo_base+(min_dias_trabaja_descanso/60)*1.5* sueldo_hr+(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr+ (min_dias_traba_feriados/60)*2.5* sueldo_hr+ extra_time_total+incapacidad*sueldo_diario+licenc_paga*sueldo_diario+bonos_con_impuesto+(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                '''
                #print('sueldo_bruto: + ',sueldo_bruto)
                #print('***************\Ajustes\n*****************')
                #print('min_ausencia: -',min_ausencia*sueldo_min)
                #print('dia_ausencia: -',dia_ausencia*sueldo_diario)
                #print('deduccion con impuesto: -',duduciones_con_impuesto)
                # sueldo a sacar en cuenta para seeguro social
                #print('***************\Sueldo bruto a calcular\n*****************')
                '''
                
                
                sueldo_cal_deduciones=sueldo_bruto- min_ausencia*sueldo_min - dia_ausencia*sueldo_diario - duduciones_con_impuesto 

                if sueldo_cal_deduciones<=0:
                    sueldo_cal_deduciones=0
                ##print('sueldo_cal_deduciones',sueldo_cal_deduciones)
                ##print('***************\n Reducciones de ley\n*****************')
                

                
                seguro_social=sueldo_cal_deduciones*0.0975
                
                ##print('seguro_social: -',seguro_social)
                ##print('seguro_educacion: -',sueldo_cal_deduciones*0.0125)
               
                ####Sacar el ISLR ###
                ### 11.000 Año o mesno 0 dolares 
                ### mas 11.000 año o mas entre 50.000 un 15%
                #### un 50.000 25%
                
                ##print('total_deduciones: - ',total_deduciones)
                ##print('***************\n Bonos por debajo la mesa\n*****************')
                ##print('bonos sin impuesto: + ',bonos_sin_impuesto)
                total_bonos_sin_impuesto=bonos_sin_impuesto
                
                ##print('***************\n Final de datos \n*****************')
                
                ##print('sueldo_neto: +', sueldo_neto, colaborador_obj.Colaborador_nombre)
                ##print('total_bonos_sin_impuesto: +', total_bonos_sin_impuesto)
                lista_vacacioness=fun_vacaciones_calculo(vacaciones,sueldo_diario_vacas)
                vacaciones_bruto,vacaciones_ss,vacaciones_se,vacaciones_ilsr,total_vacas_deducciones,vacaciones_neto,vacaciones_ss_patron,vacaciones_se_patron,vacacioones_total_patron =lista_vacacioness[0],lista_vacacioness[1],lista_vacacioness[2],lista_vacacioness[3],lista_vacacioness[4],lista_vacacioness[5],lista_vacacioness[6],lista_vacacioness[7],lista_vacacioness[8]

                decimo_xii_quincena=(sueldo_cal_deduciones+vacaciones_bruto)/12
                seg_social_decimo=decimo_xii_quincena*0.0725
                seg_social_decimo_patron=decimo_xii_quincena*0.1075
                islr_decimo_xiii=0
                seguro_social_patrono=sueldo_cal_deduciones*0.1225
                seguro_educacional_patrono=sueldo_cal_deduciones*0.015


                # Sacar  islr quincenal correcto
                sueldo_vacas_quincena=vacaciones_bruto+sueldo_cal_deduciones
                if sueldo_vacas_quincena> 0:  
                    porcen_sueldo=sueldo_cal_deduciones / sueldo_vacas_quincena
                else:
                    porcen_sueldo =0

                if sueldo_vacas_quincena> 0:  
                    porcen_vacas=vacaciones_bruto / sueldo_vacas_quincena
                else:
                    porcen_vacas =0
                
                #

                islr_calculo=sueldo_vacas_quincena*2*13
                islr=0
                islr_25=0
                islr_15=0
                if islr_calculo>50000:
                    islr_25=(islr_calculo-50000)*0.25
                if islr_calculo>11000 and islr_calculo > 50000:
                    islr_15=5850
                elif islr_calculo>11000 and islr_calculo<=50000:
                     islr_15=(islr_calculo-11000)*0.15
                
                if islr_25+islr_15 >0:
                    islr=(islr_15+islr_25)/26
                
                vacaciones_ilsr=islr*porcen_vacas
                islr=islr*porcen_sueldo

                ##print('ISLR: -',islr)
               
                total_dedu_ley=seguro_social+sueldo_cal_deduciones*0.0125 + islr# falta islr
                '''#print('Total Deduccion legales: - ',total_dedu_ley)#islr esta en 0
                #print('Acreddores Hipotecario: - ', acredores_hipotecario) #cuotas_acredores_hipotecario=0
                #print('acredores_empresa: - ', acredores_empresa) #cuotas_acredores_empresa=0
                #print('bono reducion sin impouesto: - ',deduciones_sin_impuesto)
                #print('***************\n Total Deducciones\n*****************')
                '''
                total_deduciones=total_dedu_ley+acredores_hipotecario+acredores_empresa+deduciones_sin_impuesto
                sueldo_neto=sueldo_cal_deduciones-total_deduciones

                if acredores_hipotecario + acredores_empresa > 0 and acredores_hipotecario + acredores_empresa <= sueldo_cal_deduciones:
                    #HACER FUNCION para guardar y actualizar datos
                    fun_guardar_datos_en_acreedores_cuotas(colaborador_obj.pk,planilla,fecha_pago_date.date(),sueldo_cal_deduciones)




                islr_calculo_xiii=decimo_xii_quincena*2*12*13
                
                islr_25=0
                islr_15=0
                if islr_calculo_xiii>50000:
                    islr_25=(islr_calculo_xiii-50000)*0.25
                if islr_calculo_xiii>11000 and islr_calculo_xiii > 50000:
                    islr_15=5850
                elif islr_calculo_xiii>11000 and islr_calculo_xiii<=50000:
                     islr_15=(islr_calculo_xiii-11000)*0.15
                
                if islr_25+islr_15 >0:
                    islr_decimo_xiii=(islr_15+islr_25)/(13*24)

                decimo_xiii_quincena_neto=decimo_xii_quincena-islr_decimo_xiii-seg_social_decimo
                Pago_XIII_periodo_Bruto=0
                Pago_XIII_periodo_Seguro_Social=0
    
                Pago_XIII_periodo_ISLR=0
                

                Pago_XIII_periodo_Neto=0
                Deduccion_XIII_periodo_Seguro_social_patron=0

                #print(' QQ in lista_xiii',  QQ in lista_xiii, QQ,lista_xiii)
                if QQ in lista_xiii:
                    lista_buscar_decimo=fun_lista_buscar_decimo(QQ,year)
                    lista_decimo_xiii=fun_calculo_decimo_planilla(colaborador_obj.pk,lista_buscar_decimo)
                    Pago_XIII_periodo_Bruto= lista_decimo_xiii[0]+decimo_xii_quincena
                    Pago_XIII_periodo_Seguro_Social=lista_decimo_xiii[1]+seg_social_decimo
                    Pago_XIII_periodo_ISLR=lista_decimo_xiii[2]+islr_decimo_xiii
                    Pago_XIII_periodo_Neto=lista_decimo_xiii[3]+decimo_xiii_quincena_neto
                    Deduccion_XIII_periodo_Seguro_social_patron=lista_decimo_xiii[4]+seg_social_decimo_patron
                    decimo_xii_quincena, seg_social_decimo, islr_decimo_xiii, decimo_xiii_quincena_neto, seg_social_decimo_patron = 0 , 0 , 0 , 0, 0

                prima_antiguedad=0
                if colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
                    prima_antiguedad=(sueldo_cal_deduciones + vacaciones_bruto )/52
                
                riesgo_profesional=(sueldo_cal_deduciones + vacaciones_bruto )*0.021
                vacaciones_acumuladas_patron=( sueldo_cal_deduciones )/11
                vacaciones_acumuladas_patron*=1.1375
                
                totales_patronales=vacaciones_acumuladas_patron+riesgo_profesional+prima_antiguedad+seguro_social_patrono+seguro_educacional_patrono+seg_social_decimo_patron+vacacioones_total_patron +Deduccion_XIII_periodo_Seguro_social_patron+decimo_xii_quincena
                total_general_sueldo=totales_patronales+total_bonos_sin_impuesto+sueldo_cal_deduciones+Pago_XIII_periodo_Bruto+vacaciones_bruto
                #totales_patronales=totales_patronales
                #Total_general_sueldo=total_general_sueldo
                #ruta se suma el sueldo bruto las jornadas laborales y adminsitrativo por debajo la mesa
                #a partir cuanto se quita la quincena islr sobre renta


                ##print('***************\n*****************')
                #aqui se graba la info de trabajador
                try:
                    created=Panilla_por_periodo_quincenal.objects.get(Colaborador__pk=colaborador_obj.pk,Periodo=planilla)
                    #save
                    if True:
                        created.Periodo=planilla
                        created.Colaborador=colaborador_obj
                        created.Trabajo_quincena_sin_falta=dia_ausencia==0
                        created.Dias_Trabajado=dias_trabajados
                        created.Dias_Trabajado_Completo=dias_trabajados_compl
                        created.Dias_trabajados_incompleto=dias_trabajados_no_compl
                        created.Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales
                        created.Dias_Vacaciones=vacaciones
                        created.Dias_Incapacidad=incapacidad+incapacidad_caja
                        created.Dias_Licencia_Paga=licenc_paga
                        created.Dias_Descanso=dia_descanso
                        created.Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso
                        created.Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        created.Dias_Trabajo_Feriado=min_dias_traba_feriados
                        created.Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        created.Dias_Trabajo_Descanso=min_dias_trabaja_descanso
                        created.Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        created.Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales
                        created.Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                        created.Sueldo_quincenal=sueldo_quincena
                        created.Sueldo_Diario=sueldo_diario
                        created.Sueldo_HR=sueldo_hr
                        created.Sueldo_MIN=sueldo_min
                        created.MIN_Ausencia=min_ausencia
                        created.Pago_MIN_Ausencia=min_ausencia*sueldo_min
                        created.Dia_ausencia=dia_ausencia
                        created.Pago_Dia_ausencia=dia_ausencia*sueldo_diario
                        created.HR_extras_diurnas=hr_extras_diurnas
                        created.Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr
                        created.HR_extras_nocturnas=hr_extras_nocturn
                        created.Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr
                        created.HR_extras_diurnas_mixta=hr_extra_mixta_diu
                        created.Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr
                        created.HR_extras_nocturnas_mixta=hr_extra_mixta_noc
                        created.Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr
                        created.HR_extras_diurnas_3h=hr_extra_diurna_3h
                        created.Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr
                        created.HR_extras_nocturnas_3h=hr_extra_noctur_3h
                        created.Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr
                        created.HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h
                        created.Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr
                        created.HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h
                        created.Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr
                        created.HR_extras_diurnas_Feriado=hr_extra_feriado_diur

                        created.Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr
                        created.HR_extras_nocturnas_Feriado=hr_extra_feriado_noct
                        created.Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr
                        created.HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur
                        created.Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr
                        created.HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct
                        created.Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr
   
                        created.HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h
                        created.Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr
                        created.HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h
                        created.Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        created.HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h
                        created.Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        created.HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h
                        created.Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr
                        created.HR_extras_diurnas_descanso=hr_extra_descanso_diur
                        created.Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr
                        created.HR_extras_nocturnas_descanso=hr_extra_descanso_noct
                        created.Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr
                        created.HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur
                        created.Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr
                        created.HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct
                        created.Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr
                        #+3h
                        created.HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h
                        created.Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr
                        created.HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h
                        created.Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        created.HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h
                        created.Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        created.HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h
                        created.Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr
                        #deducciones
                        created.Pago_Bono_con_Impuesto=bonos_con_impuesto
                        created.Pago_Bono_sin_Impuesto=bonos_sin_impuesto

                        #deduciones
                        created.Deduccion_con_Impuesto=duduciones_con_impuesto
                        created.Deduccion_sin_Impuesto=deduciones_sin_impuesto
                        created.Descuento_Acreedores_Hipotecario=acredores_hipotecario
                        created.Descuento_Acreedores_Empresa=acredores_empresa
                        #Totales 
                        created.Sueldo_base_quincenal=sueldo_base
                        created.Pago_Total_Sobretiempo_quincenal=extra_time_total
                        created.Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        created.Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        created.Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        created.Pago_Vacaciones=vacaciones_bruto
                        created.Pago_Incapacidad=incapacidad*sueldo_diario
                        created.Pago_Licencia_paga= licenc_paga*sueldo_diario
                        created.Sueldo_Bruto=sueldo_bruto
                        
                        #  vacaciones_bruto        
                        created.Pago_quincena_despues_descuento=sueldo_cal_deduciones

                        created.Deduccion_Seguro_Social=seguro_social
                        created.Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125
                        created.Deduccion_ISLR=islr
                        created.Total_deduciones_Ley= total_dedu_ley
                        created.Total_deduciones_quinceas=total_deduciones
                        created.Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto
                        created.Pago_Sueldo_neto=sueldo_neto
                        #patrono
                        
                        created.Decimo_xiii_quincena_Bruto=decimo_xii_quincena
                        created.Deduccion_Seg_social_decimo=seg_social_decimo
                        created.Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii
                        created.Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto
                        created.Deduccion_Seg_social_Patron=seguro_social_patrono
                        created.Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron
                        created.Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono
                        created.Prima_Antiguedad_Patron=prima_antiguedad
                        created.Riesgo_Profesional_Patron=riesgo_profesional
                        created.Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron
                        created.Fecha_pago_quincena
                        created.Totales_patronales=totales_patronales
                        created.Total_general_sueldo=total_general_sueldo
                        # Vacaciones numeros
                        created.Vacaciones_Seguro_Social=vacaciones_ss
                        created.Vacaciones_Seguro_educacion=vacaciones_se
                        created.Vacaciones_ISLR=vacaciones_ilsr
                        created.Deducion_Vacaciones_Totales=total_vacas_deducciones
                        created.Pago_Vacaciones_Neto=vacaciones_neto
                        created.Vacaciones_Seguro_Social_patron=vacaciones_ss_patron
                        created.Vacaciones_Seguro_educacion_patron=vacaciones_se_patron
                        created.Deducion_Vacaciones_Totales_patron=vacacioones_total_patron
                        #xiii si aplica pagar en quincena
                        created.Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto
                        created.Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social
                        created.Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR
                        created.Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto
                        created.Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron
                       
                        created.save()
                
                except:
                    created=Panilla_por_periodo_quincenal.objects.create(Colaborador=colaborador_obj,
                                                                         
                                                                         Periodo=planilla,
                                                                         Trabajo_quincena_sin_falta=dia_ausencia==0,
                         Dias_Trabajado=dias_trabajados
                        , Dias_Trabajado_Completo=dias_trabajados_compl
                        , Dias_trabajados_incompleto=dias_trabajados_no_compl
                        , Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales
                        , Dias_Vacaciones=vacaciones
                        , Dias_Incapacidad=incapacidad+incapacidad_caja
                        , Dias_Licencia_Paga=licenc_paga
                        , Dias_Descanso=dia_descanso
                        , Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso
                        , Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        , Dias_Trabajo_Feriado=min_dias_traba_feriados
                        , Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        , Dias_Trabajo_Descanso=min_dias_trabaja_descanso
                        , Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        , Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales
                        , Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                        , Sueldo_quincenal=sueldo_quincena
                        , Sueldo_Diario=sueldo_diario
                        , Sueldo_HR=sueldo_hr
                        , Sueldo_MIN=sueldo_min
                        , MIN_Ausencia=min_ausencia
                        , Pago_MIN_Ausencia=min_ausencia*sueldo_min
                        , Dia_ausencia=dia_ausencia
                        , Pago_Dia_ausencia=dia_ausencia*sueldo_diario
                        , HR_extras_diurnas=hr_extras_diurnas
                        , Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr
                        , HR_extras_nocturnas=hr_extras_nocturn
                        , Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr
                        , HR_extras_diurnas_mixta=hr_extra_mixta_diu
                        , Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr
                        , HR_extras_nocturnas_mixta=hr_extra_mixta_noc
                        , Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr
                        , HR_extras_diurnas_3h=hr_extra_diurna_3h
                        , Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr
                        , HR_extras_nocturnas_3h=hr_extra_noctur_3h
                        , Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr
                        , HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h
                        , Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr
                        , HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h
                        , Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr
                        , HR_extras_diurnas_Feriado=hr_extra_feriado_diur

                        , Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr
                        , HR_extras_nocturnas_Feriado=hr_extra_feriado_noct
                        , Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr
                        , HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur
                        , Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr
                        , HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct
                        , Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr
   
                        , HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h
                        , Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr
                        , HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h
                        , Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        , HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h
                        , Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        , HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h
                        , Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr
                        , HR_extras_diurnas_descanso=hr_extra_descanso_diur
                        , Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr
                        , HR_extras_nocturnas_descanso=hr_extra_descanso_noct
                        , Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr
                        , HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur
                        , Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr
                        , HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct
                        , Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr
                        #+3h
                        , HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h
                        , Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr
                        , HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h
                        , Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        , HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h
                        , Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        , HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h
                        , Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr
                        #deducciones
                        , Pago_Bono_con_Impuesto=bonos_con_impuesto
                        , Pago_Bono_sin_Impuesto=bonos_sin_impuesto

                        #deduciones
                        , Deduccion_con_Impuesto=duduciones_con_impuesto
                        , Deduccion_sin_Impuesto=deduciones_sin_impuesto
                        , Descuento_Acreedores_Hipotecario=acredores_hipotecario
                        , Descuento_Acreedores_Empresa=acredores_empresa
                        #Totales 
                        , Sueldo_base_quincenal=sueldo_base
                        , Pago_Total_Sobretiempo_quincenal=extra_time_total
                        , Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        , Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        , Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        , Pago_Vacaciones=vacaciones_bruto 
                        , Pago_Incapacidad=incapacidad*sueldo_diario
                        , Pago_Licencia_paga= licenc_paga*sueldo_diario
                        , Sueldo_Bruto=sueldo_bruto
                        
                        #          
                        , Pago_quincena_despues_descuento=sueldo_cal_deduciones

                        , Deduccion_Seguro_Social=seguro_social
                        ,  Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125
                        , Deduccion_ISLR=islr
                        , Total_deduciones_Ley= total_dedu_ley
                        , Total_deduciones_quinceas=total_deduciones
                        , Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto
                        , Pago_Sueldo_neto=sueldo_neto
                        #patron
                        , Decimo_xiii_quincena_Bruto=decimo_xii_quincena
                        , Deduccion_Seg_social_decimo=seg_social_decimo
                        , Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii
                        , Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto
                        , Deduccion_Seg_social_Patron=seguro_social_patrono
                        , Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron
                        , Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono
                        , Prima_Antiguedad_Patron=prima_antiguedad
                        , Riesgo_Profesional_Patron=riesgo_profesional
                        , Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron
                        , Fecha_pago_quincena=fecha_pago_date
                        , Totales_patronales=totales_patronales
                        , Total_general_sueldo=total_general_sueldo
                        , Vacaciones_Seguro_Social=vacaciones_ss
                        , Vacaciones_Seguro_educacion=vacaciones_se
                        , Vacaciones_ISLR=vacaciones_ilsr
                        , Deducion_Vacaciones_Totales=total_vacas_deducciones
                        , Pago_Vacaciones_Neto=vacaciones_neto
                        , Vacaciones_Seguro_Social_patron=vacaciones_ss_patron
                        , Vacaciones_Seguro_educacion_patron=vacaciones_se_patron
                        , Deducion_Vacaciones_Totales_patron=vacacioones_total_patron
                        #xiii pago en quincena
                        , Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto
                        , Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social
                        , Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR
                        , Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto
                        , Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron
                        )
                   

                ##### Hacer comparativo por cliente  ###
                lista_cliente_periodo_indiv=[]
                lista_final_clientess=[]
                #print('lista_cliente_periodo')
                #print(lista_cliente_periodo)
                #print('lista_cliente_periodo')
                
                for cliente in lista_cliente_periodo:
                    num_cliente=cliente[0]
                    
                    if num_cliente not in lista_cliente_periodo_indiv:
                        lista_cliente_periodo_indiv.append(num_cliente)
                
                for cliente in lista_cliente_periodo_indiv:
                    sumando=0
                    
                    for zz in  lista_cliente_periodo:
                        if zz[0]== cliente:
                            sumando+=zz[1]
                    lista_final_clientess.append([cliente , sumando])
                
                #print(lista_final_clientess)

                total_minutos_colaborador=0
                for yy in lista_final_clientess:
                    total_minutos_colaborador+=yy[1]

                #print(total_minutos_colaborador)

                lista_cliente_porce=[]
                for yy in lista_final_clientess:
                    porcentaje=yy[1] /total_minutos_colaborador
                    lista_cliente_porce.append([yy[0],porcentaje] )
                
                #print(lista_cliente_porce)
                #cliente guarda info correcta por cliente
                
                for porcentaje in lista_cliente_porce:
                   cliente_obj=Info_Clientes.objects.get(pk=porcentaje[0])
                   porcentaj=porcentaje[1]
                   try:
                    created=Panilla_por_periodo_quincenal_clientes.objects.get(Colaborador__pk=colaborador_obj.pk,Periodo=planilla, Cliente__pk=cliente_obj.pk)
                    #save
                    if True:
                        created.Cliente=cliente_obj
                        created.Periodo=planilla
                        created.Colaborador=colaborador_obj
                        created.Trabajo_quincena_sin_falta=dia_ausencia==0
                        created.Dias_Trabajado=dias_trabajados * porcentaj
                        created.Dias_Trabajado_Completo=dias_trabajados_compl * porcentaj
                        created.Dias_trabajados_incompleto=dias_trabajados_no_compl * porcentaj
                        created.Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales * porcentaj
                        created.Dias_Vacaciones=vacaciones * porcentaj
                        created.Dias_Incapacidad=incapacidad+incapacidad_caja * porcentaj
                        created.Dias_Licencia_Paga=licenc_paga * porcentaj
                        created.Dias_Descanso=dia_descanso * porcentaj
                        created.Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso * porcentaj
                        created.Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        created.Dias_Trabajo_Feriado=min_dias_traba_feriados * porcentaj
                        created.Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        created.Dias_Trabajo_Descanso=min_dias_trabaja_descanso * porcentaj
                        created.Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        created.Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales * porcentaj
                        created.Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr * porcentaj
                        created.Sueldo_quincenal=sueldo_quincena * porcentaj
                        created.Sueldo_Diario=sueldo_diario * porcentaj
                        created.Sueldo_HR=sueldo_hr * porcentaj
                        created.Sueldo_MIN=sueldo_min * porcentaj
                        created.MIN_Ausencia=min_ausencia
                        created.Pago_MIN_Ausencia=min_ausencia*sueldo_min * porcentaj
                        created.Dia_ausencia=dia_ausencia * porcentaj
                        created.Pago_Dia_ausencia=dia_ausencia*sueldo_diario * porcentaj
                        created.HR_extras_diurnas=hr_extras_diurnas * porcentaj
                        created.Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas=hr_extras_nocturn * porcentaj
                        created.Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta=hr_extra_mixta_diu * porcentaj
                        created.Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta=hr_extra_mixta_noc * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_3h=hr_extra_diurna_3h * porcentaj
                        created.Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_3h=hr_extra_noctur_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_Feriado=hr_extra_feriado_diur * porcentaj

                        created.Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_Feriado=hr_extra_feriado_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr * porcentaj
   
                        created.HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h * porcentaj
                        created.Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_diurnas_descanso=hr_extra_descanso_diur * porcentaj
                        created.Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_descanso=hr_extra_descanso_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr * porcentaj
                        #+3h
                        created.HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h * porcentaj
                        created.Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr * porcentaj
                        #deducciones
                        created.Pago_Bono_con_Impuesto=bonos_con_impuesto * porcentaj
                        created.Pago_Bono_sin_Impuesto=bonos_sin_impuesto * porcentaj

                        #deduciones
                        created.Deduccion_con_Impuesto=duduciones_con_impuesto * porcentaj
                        created.Deduccion_sin_Impuesto=deduciones_sin_impuesto * porcentaj
                        created.Descuento_Acreedores_Hipotecario=acredores_hipotecario * porcentaj
                        created.Descuento_Acreedores_Empresa=acredores_empresa * porcentaj
                        #Totales 
                        created.Sueldo_base_quincenal=sueldo_base * porcentaj
                        created.Pago_Total_Sobretiempo_quincenal=extra_time_total * porcentaj
                        created.Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        created.Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        created.Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        created.Pago_Vacaciones=vacaciones_bruto  * porcentaj
                        created.Pago_Incapacidad=incapacidad*sueldo_diario * porcentaj
                        created.Pago_Licencia_paga= licenc_paga*sueldo_diario * porcentaj
                        created.Sueldo_Bruto=sueldo_bruto * porcentaj
                        
                        #          
                        created.Pago_quincena_despues_descuento=sueldo_cal_deduciones * porcentaj

                        created.Deduccion_Seguro_Social=seguro_social * porcentaj
                        created.Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125 * porcentaj
                        created.Deduccion_ISLR=islr * porcentaj
                        created.Total_deduciones_Ley= total_dedu_ley * porcentaj
                        created.Total_deduciones_quinceas=total_deduciones * porcentaj
                        created.Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto * porcentaj
                        created.Pago_Sueldo_neto=sueldo_neto * porcentaj
                        #patrono
                        
                        created.Decimo_xiii_quincena_Bruto=decimo_xii_quincena * porcentaj
                        created.Deduccion_Seg_social_decimo=seg_social_decimo * porcentaj
                        created.Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii * porcentaj
                        created.Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto * porcentaj
                        created.Deduccion_Seg_social_Patron=seguro_social_patrono * porcentaj
                        created.Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron * porcentaj
                        created.Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono * porcentaj
                        created.Prima_Antiguedad_Patron=prima_antiguedad * porcentaj
                        created.Riesgo_Profesional_Patron=riesgo_profesional * porcentaj
                        created.Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron * porcentaj
                        created.Fecha_pago_quincena=fecha_pago_date 
                        created.Totales_patronales=totales_patronales * porcentaj
                        created.Total_general_sueldo=total_general_sueldo * porcentaj
                        created.Porcentaje= porcentaj
                        #vacaciones
                        created.Vacaciones_Seguro_Social=vacaciones_ss* porcentaj
                        created.Vacaciones_Seguro_educacion=vacaciones_se* porcentaj
                        created.Vacaciones_ISLR=vacaciones_ilsr* porcentaj
                        created.Deducion_Vacaciones_Totales=total_vacas_deducciones* porcentaj
                        created.Pago_Vacaciones_Neto=vacaciones_neto* porcentaj
                        created.Vacaciones_Seguro_Social_patron=vacaciones_ss_patron* porcentaj
                        created.Vacaciones_Seguro_educacion_patron=vacaciones_se_patron* porcentaj
                        created.Deducion_Vacaciones_Totales_patron=vacacioones_total_patron* porcentaj
                        #decimo pago cliente en quincena
                        created.Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto* porcentaj
                        created.Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social* porcentaj
                        created.Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR* porcentaj
                        created.Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto* porcentaj
                        created.Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron* porcentaj
                        

                        created.save()
                
                   except:
                    created=Panilla_por_periodo_quincenal_clientes.objects.create(Colaborador=colaborador_obj,
                                                                         Cliente=cliente_obj,
                                                                         Periodo=planilla,
                                                                         Trabajo_quincena_sin_falta=dia_ausencia==0,
                         Dias_Trabajado=dias_trabajados * porcentaj
                        , Dias_Trabajado_Completo=dias_trabajados_compl * porcentaj
                        , Dias_trabajados_incompleto=dias_trabajados_no_compl * porcentaj 
                        , Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales * porcentaj
                        , Dias_Vacaciones=vacaciones * porcentaj
                        , Dias_Incapacidad=incapacidad+incapacidad_caja * porcentaj
                        , Dias_Licencia_Paga=licenc_paga * porcentaj
                        , Dias_Descanso=dia_descanso * porcentaj
                        , Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso * porcentaj
                        , Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        , Dias_Trabajo_Feriado=min_dias_traba_feriados * porcentaj
                        , Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        , Dias_Trabajo_Descanso=min_dias_trabaja_descanso * porcentaj
                        , Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        , Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales * porcentaj
                        , Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr * porcentaj
                        , Sueldo_quincenal=sueldo_quincena * porcentaj
                        , Sueldo_Diario=sueldo_diario * porcentaj
                        , Sueldo_HR=sueldo_hr * porcentaj
                        , Sueldo_MIN=sueldo_min * porcentaj
                        , MIN_Ausencia=min_ausencia * porcentaj
                        , Pago_MIN_Ausencia=min_ausencia*sueldo_min * porcentaj
                        , Dia_ausencia=dia_ausencia * porcentaj
                        , Pago_Dia_ausencia=dia_ausencia*sueldo_diario * porcentaj
                        , HR_extras_diurnas=hr_extras_diurnas * porcentaj
                        , Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr * porcentaj
                        , HR_extras_nocturnas=hr_extras_nocturn * porcentaj
                        , Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta=hr_extra_mixta_diu * porcentaj
                        , Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta=hr_extra_mixta_noc * porcentaj
                        , Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr * porcentaj
                        , HR_extras_diurnas_3h=hr_extra_diurna_3h * porcentaj
                        , Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_3h=hr_extra_noctur_3h * porcentaj
                        , Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h * porcentaj
                        , Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr * porcentaj
                        , HR_extras_diurnas_Feriado=hr_extra_feriado_diur * porcentaj

                        , Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_Feriado=hr_extra_feriado_noct * porcentaj
                        , Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur * porcentaj
                        , Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr * porcentaj
    
                        , HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h * porcentaj
                        , Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h * porcentaj
                        , Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h * porcentaj
                        , Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_diurnas_descanso=hr_extra_descanso_diur * porcentaj
                        , Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_descanso=hr_extra_descanso_noct * porcentaj
                        , Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur * porcentaj
                        , Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr * porcentaj
                        #+3h
                        , HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h * porcentaj
                        , Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h * porcentaj
                        , Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h * porcentaj
                        , Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr * porcentaj
                        #deducciones
                        , Pago_Bono_con_Impuesto=bonos_con_impuesto * porcentaj
                        , Pago_Bono_sin_Impuesto=bonos_sin_impuesto * porcentaj

                        #deduciones
                        , Deduccion_con_Impuesto=duduciones_con_impuesto * porcentaj
                        , Deduccion_sin_Impuesto=deduciones_sin_impuesto * porcentaj
                        , Descuento_Acreedores_Hipotecario=acredores_hipotecario * porcentaj
                        , Descuento_Acreedores_Empresa=acredores_empresa * porcentaj
                        #Totales 
                        , Sueldo_base_quincenal=sueldo_base * porcentaj
                        , Pago_Total_Sobretiempo_quincenal=extra_time_total * porcentaj
                        , Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        , Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        , Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        , Pago_Vacaciones=vacaciones_bruto * porcentaj
                        , Pago_Incapacidad=incapacidad*sueldo_diario * porcentaj
                        , Pago_Licencia_paga= licenc_paga*sueldo_diario * porcentaj
                        , Sueldo_Bruto=sueldo_bruto * porcentaj
                        
                        #          
                        , Pago_quincena_despues_descuento=sueldo_cal_deduciones * porcentaj

                        , Deduccion_Seguro_Social=seguro_social * porcentaj
                        ,  Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125 * porcentaj
                        , Deduccion_ISLR=islr * porcentaj
                        , Total_deduciones_Ley= total_dedu_ley * porcentaj
                        , Total_deduciones_quinceas=total_deduciones * porcentaj
                        , Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto * porcentaj
                        , Pago_Sueldo_neto=sueldo_neto * porcentaj
                        #patron
                        , Decimo_xiii_quincena_Bruto=decimo_xii_quincena * porcentaj
                        , Deduccion_Seg_social_decimo=seg_social_decimo * porcentaj
                        , Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii * porcentaj
                        , Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto * porcentaj
                        , Deduccion_Seg_social_Patron=seguro_social_patrono * porcentaj
                        , Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron * porcentaj
                        , Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono * porcentaj
                        , Prima_Antiguedad_Patron=prima_antiguedad * porcentaj
                        , Riesgo_Profesional_Patron=riesgo_profesional * porcentaj
                        , Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron * porcentaj
                        , Fecha_pago_quincena=fecha_pago_date
                        , Totales_patronales=totales_patronales * porcentaj
                        , Total_general_sueldo=total_general_sueldo * porcentaj
                        , Porcentaje= porcentaj
                        #vacas
                        , Vacaciones_Seguro_Social=vacaciones_ss* porcentaj
                        , Vacaciones_Seguro_educacion=vacaciones_se* porcentaj
                        , Vacaciones_ISLR=vacaciones_ilsr* porcentaj
                        , Deducion_Vacaciones_Totales=total_vacas_deducciones* porcentaj
                        , Pago_Vacaciones_Neto=vacaciones_neto* porcentaj
                        , Vacaciones_Seguro_Social_patron=vacaciones_ss_patron* porcentaj
                        , Vacaciones_Seguro_educacion_patron=vacaciones_se_patron* porcentaj
                        , Deducion_Vacaciones_Totales_patron=vacacioones_total_patron* porcentaj
                          #decimo pago cliente en quincena
                        , Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto* porcentaj
                        , Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social* porcentaj
                        , Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR* porcentaj
                        , Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto* porcentaj
                        , Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron* porcentaj
                        )
                   
           
            lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla)



            for dato_planilla in lista_planilla1:
                nombre=dato_planilla.Colaborador.Colaborador_nombre+' '+dato_planilla.Colaborador.Colaborador_apellido
                
                sueldo_sin_deducciones=dato_planilla.Pago_quincena_despues_descuento
                Hr_Extra=dato_planilla.Pago_Total_Sobretiempo_quincenal
                sueldo_base=sueldo_sin_deducciones-Hr_Extra

                vacaciones=dato_planilla.Pago_Vacaciones
                vacaciones_deduciones=dato_planilla.Deducion_Vacaciones_Totales
                Xiii_bruto=dato_planilla.Decimo_xiii_quincena_Bruto
                deduciones_ley=dato_planilla.Total_deduciones_Ley
                deducciones_Acreedores=dato_planilla.Descuento_Acreedores_Empresa+dato_planilla.Descuento_Acreedores_Hipotecario
                bonos_sin_ley=dato_planilla.Pago_total_bonos_sin_impuesto
                total_pagar=dato_planilla.Pago_Sueldo_neto
                
                lista=[nombre,
                       round(sueldo_base,2),
                       round(Hr_Extra,2),
                       round(sueldo_sin_deducciones,2),
                       round(vacaciones,2),
                       round(vacaciones_deduciones,2),
                       round(Xiii_bruto,2),
                        round(deduciones_ley,2),
                        round(deducciones_Acreedores,2),
                        round(bonos_sin_ley,2),
                        round(total_pagar,2),
                        dato_planilla.pk,
                        dato_planilla.Colaborador.imagen
                        #<td class="small"><img src="{{ MEDIA_URL }}{{  clientes.12 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.0 }}</td>
                                                    
                        ]

                lista_ausencia_final.append(lista)
                 
                
                
        
        return render(request, "motor_planilla_10.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool})
 
def ver_planilla_detalles(request, searched):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
    if request.method=='GET':
        
        
       
        
        planilla_det=Panilla_por_periodo_quincenal.objects.get(pk=int(searched))
        planilla=planilla_det.Periodo
        lista_sacar_planilla=planilla.split('-')
        Quater=lista_sacar_planilla[0]
        Quater=Quater.replace('Q','')
        Quater=int(Quater)
        mes=int(lista_sacar_planilla[1])
        year=int(lista_sacar_planilla[2])
        if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
        else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

        fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

        fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
        fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
        if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
        else:
                fecha_pago=15
            
        fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
        lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
        lista_ausencia_final=[]
       
    return render(request, "ver_planilla_detalle.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'detalle':planilla_det,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'lista_planilla':lista_planilla})

def ver_planilla_trabajadores(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        lista_final=[]
        palabra_a_excluir = "Administrativo"
        if nivel >3:
            lista_supervisor= Colaboradores.objects.filter(pk= user_profile_obj.Colaborador.pk )
            lista_colaboradores=Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk, Status__icontains='Activo') | lista_supervisor
        else:
            lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')


        lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
        lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
        lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

# Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
        for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)
        
        
        return render(request, "ver_planilla_colaborador.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'mes' in values: #planilla sacar periodo 
            Quater=request.POST["quincena"]
            month=request.POST["mes"]
            year=request.POST["year"]
            planilla=Quater+'-'+month+'-'+year
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                fecha_pago = calendar.monthrange(year, mes_inicial)[1]

        
            fecha_pago_date=datetime(year, mes, fecha_pago)    

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
            if nivel >3:
                lista_supervisor= Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk= user_profile_obj.Colaborador.pk , Periodo=planilla)
                lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla , Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk ) | lista_supervisor
            else:
                lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla)
            

            lista_ausencia_final=[]

            for dato_planilla in lista_planilla1:
                nombre=dato_planilla.Colaborador.Colaborador_nombre+' '+dato_planilla.Colaborador.Colaborador_apellido
                
                sueldo_sin_deducciones=dato_planilla.Pago_quincena_despues_descuento
                Hr_Extra=dato_planilla.Pago_Total_Sobretiempo_quincenal
                sueldo_base=sueldo_sin_deducciones-Hr_Extra

                deduciones_ley=dato_planilla.Total_deduciones_Ley
                deducciones_Acreedores=dato_planilla.Descuento_Acreedores_Empresa+dato_planilla.Descuento_Acreedores_Hipotecario
                bonos_sin_ley=dato_planilla.Pago_total_bonos_sin_impuesto
                total_pagar=dato_planilla.Pago_Sueldo_neto
                xiii=dato_planilla.Decimo_xiii_quincena_Bruto
                aporte_patronal= dato_planilla.Totales_patronales
                total_pago_con_aporte_pa=dato_planilla.Total_general_sueldo
                lista=[nombre,
                       round(sueldo_base,2),
                       round(Hr_Extra,2),
                       round(sueldo_sin_deducciones,2),
                        round(deduciones_ley,2),
                        round(deducciones_Acreedores,2),
                        round(bonos_sin_ley,2),
                        round(total_pagar,2),
                        round(xiii,2),
                        round(aporte_patronal,2),
                        round(total_pago_con_aporte_pa,2),

                        dato_planilla.pk,
                        dato_planilla.Colaborador.imagen
                        #<td class="small col-4"><img src="{{ MEDIA_URL }}{{  clientes.12 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.0 }}</td>
                        ]

                lista_ausencia_final.append(lista)
        
        return render(request, "ver_planilla_colaborador_POST.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,})
 
def ver_planilla_trabajadores_fechas(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        lista_final=[]
        palabra_a_excluir = "Administrativo"
       
        lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
        
        
        if nivel >3:
            lista_supervisor= Colaboradores.objects.filter(pk= user_profile_obj.Colaborador.pk )
            lista_colaboradores=Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk, Status__icontains='Activo') | lista_supervisor
        else:
            lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')

        lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

        lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

# Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
        for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)
        
        
        return render(request, "ver_planilla_colaborador_historico.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'inicial' in values: #planilla sacar periodo 
            inicio=str(request.POST["inicial"])
            final=str(request.POST["final"])
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
           
            
            if nivel >3:
                lista_supervisor= Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk= user_profile_obj.Colaborador.pk , Fecha_pago_quincena__gte=fecha_inicial_corte.date(), Fecha_pago_quincena__lte=fecha_final_corte.date())
                lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Fecha_pago_quincena__gte=fecha_inicial_corte.date(), Fecha_pago_quincena__lte=fecha_final_corte.date() , Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk ) | lista_supervisor
            else:
                lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Fecha_pago_quincena__gte=fecha_inicial_corte.date(), Fecha_pago_quincena__lte=fecha_final_corte.date())

            lista_ausencia_final=[]
            total_planilla=0
            numero_comprobante=0
            total_sueldo_sin_deducciones=0
            total_Hr_Extra=0
            total_deduciones_ley=0
            total_deducciones_Acreedores=0
            total_bonos_sin_ley=0
            total_sueldo_neto=0
            total_xiii=0
            total_aporte_patronal=0
            total_vacaciones=0

            for dato_planilla in lista_planilla1:
                nombre=dato_planilla.Colaborador.Colaborador_nombre+' '+dato_planilla.Colaborador.Colaborador_apellido
                
                sueldo_sin_deducciones=dato_planilla.Pago_quincena_despues_descuento
                Hr_Extra=dato_planilla.Pago_Total_Sobretiempo_quincenal
                sueldo_base=sueldo_sin_deducciones-Hr_Extra

                deduciones_ley=dato_planilla.Total_deduciones_Ley
                deducciones_Acreedores=dato_planilla.Descuento_Acreedores_Empresa+dato_planilla.Descuento_Acreedores_Hipotecario
                bonos_sin_ley=dato_planilla.Pago_total_bonos_sin_impuesto
                total_pagar=dato_planilla.Pago_Sueldo_neto
                xiii=dato_planilla.Decimo_xiii_quincena_Bruto
                aporte_patronal= dato_planilla.Totales_patronales
                total_pago_con_aporte_pa=dato_planilla.Total_general_sueldo
                vacaciones=dato_planilla.Pago_Vacaciones
                
                #sumatorias 
                total_planilla+=total_pago_con_aporte_pa
                total_sueldo_sin_deducciones+=sueldo_base
                total_Hr_Extra+=Hr_Extra
                total_deduciones_ley+=deduciones_ley
                total_deducciones_Acreedores+=deducciones_Acreedores
                total_bonos_sin_ley+=bonos_sin_ley
                total_sueldo_neto+=total_pagar
                total_xiii+=xiii
                total_aporte_patronal+=aporte_patronal
                total_vacaciones+=vacaciones


                numero_comprobante+=1


                lista=[nombre,
                       round(sueldo_base,2),
                       round(Hr_Extra,2),
                       round(sueldo_sin_deducciones,2),
                        round(deduciones_ley,2),
                        round(deducciones_Acreedores,2),
                        round(bonos_sin_ley,2),
                        round(total_pagar,2),
                        round(xiii,2),
                        round(aporte_patronal,2),
                        round(total_pago_con_aporte_pa,2),

                        dato_planilla.pk,
                         round(vacaciones,2),
                        dato_planilla.Fecha_pago_quincena,
                        dato_planilla.Colaborador.imagen
                        #<td class="small col-4"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.0 }}</td>
                        ]

                lista_ausencia_final.append(lista)
            
            lista_de_totales=[numero_comprobante,round(total_planilla,2), round(total_sueldo_sin_deducciones,2), round(total_Hr_Extra,2), round(total_deduciones_ley,2), round(total_deducciones_Acreedores,2), 
                              round(total_bonos_sin_ley,2), round(total_vacaciones,2), round(total_sueldo_neto,2), round(total_xiii,2), round(total_aporte_patronal,2),]

        return render(request, "ver_planilla_colaborador_historico_Post.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'lista_totales':lista_de_totales,'lista_planilla':lista_planilla,'inicio':inicio,'final':final})
 
def ver_planilla_cliente_fechas(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_final=[]
        
    lista_cliente=Info_Clientes.objects.all()
        
    if request.method=='GET':

        return render(request, "ver_clientes_fechas.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_cliente,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')
            lista_info_cliente=[]
            if 'cliente' in values:
                lista=request.POST.getlist('cliente')
                for i in lista:
                    lista_info_cliente.append(int(i))
                     
            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
            if 'cliente' in values:
                lista_planilla1=Panilla_por_periodo_quincenal_clientes.objects.filter(Fecha_pago_quincena__gte=fecha_inicial_corte.date(),Fecha_pago_quincena__lte=fecha_final_corte.date(),Cliente__pk__in=lista_info_cliente)
            else:
                lista_planilla1=Panilla_por_periodo_quincenal_clientes.objects.filter(Fecha_pago_quincena__gte=fecha_inicial_corte.date(), Fecha_pago_quincena__lte=fecha_final_corte.date())
            
            
           
            #lista_planilla1.filter()
            

            lista_ausencia_final=[]
            total_planilla=0
            numero_comprobante=0
            total_sueldo_sin_deducciones=0
            total_Hr_Extra=0
            total_deduciones_ley=0
            total_deducciones_Acreedores=0
            total_bonos_sin_ley=0
            total_sueldo_neto=0
            total_xiii=0
            total_aporte_patronal=0
            total_vacaciones=0
            lista_nombre_clientes=[]

            for dato_planilla in lista_planilla1:
                nombre=dato_planilla.Colaborador.Colaborador_nombre+' '+dato_planilla.Colaborador.Colaborador_apellido
                
                sueldo_sin_deducciones=dato_planilla.Pago_quincena_despues_descuento
                Hr_Extra=dato_planilla.Pago_Total_Sobretiempo_quincenal
                sueldo_base=sueldo_sin_deducciones-Hr_Extra

                deduciones_ley=dato_planilla.Total_deduciones_Ley
                deducciones_Acreedores=dato_planilla.Descuento_Acreedores_Empresa+dato_planilla.Descuento_Acreedores_Hipotecario
                bonos_sin_ley=dato_planilla.Pago_total_bonos_sin_impuesto
                total_pagar=dato_planilla.Pago_Sueldo_neto
                xiii=dato_planilla.Decimo_xiii_quincena_Bruto
                aporte_patronal= dato_planilla.Totales_patronales
                total_pago_con_aporte_pa=dato_planilla.Total_general_sueldo
                vacaciones=dato_planilla.Pago_Vacaciones
                name_cliente=dato_planilla.Cliente.nombre_empresa
                codigo_cliente=dato_planilla.Cliente.Codigo_cliente
                if codigo_cliente not in lista_nombre_clientes:
                    lista_nombre_clientes.append(codigo_cliente)
                
                #sumatorias 
                total_planilla+=total_pago_con_aporte_pa
                total_sueldo_sin_deducciones+=sueldo_base
                total_Hr_Extra+=Hr_Extra
                total_deduciones_ley+=deduciones_ley
                total_deducciones_Acreedores+=deducciones_Acreedores
                total_bonos_sin_ley+=bonos_sin_ley
                total_sueldo_neto+=total_pagar
                total_xiii+=xiii
                total_aporte_patronal+=aporte_patronal
                total_vacaciones+=vacaciones


                numero_comprobante+=1


                lista=[nombre,
                       round(sueldo_base,2),
                       round(Hr_Extra,2),
                       round(sueldo_sin_deducciones,2),
                        round(deduciones_ley,2),
                        round(deducciones_Acreedores,2),
                        round(bonos_sin_ley,2),
                        round(total_pagar,2),
                        round(xiii,2),
                        round(aporte_patronal,2),
                        round(total_pago_con_aporte_pa,2),

                        dato_planilla.pk,
                         round(vacaciones,2),
                        dato_planilla.Fecha_pago_quincena,
                        name_cliente,
                        codigo_cliente
                        ]

                lista_ausencia_final.append(lista)
            
            lista_de_totales=[numero_comprobante,round(total_planilla,2), round(total_sueldo_sin_deducciones,2), round(total_Hr_Extra,2), round(total_deduciones_ley,2), round(total_deducciones_Acreedores,2), 
                              round(total_bonos_sin_ley,2), round(total_vacaciones,2), round(total_sueldo_neto,2), round(total_xiii,2), round(total_aporte_patronal,2),]

            lista_Final_de_pago_cliente=fun_lista_Final_de_pago_cliente(lista_nombre_clientes,lista_ausencia_final) 
            #crear lista clientes especificos
        return render(request, "ver_cliente_fechas_POST.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_clientes':lista_cliente ,'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'lista_totales':lista_de_totales, 'lista_Final_de_pago_cliente':lista_Final_de_pago_cliente})


def txt_quincena(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_final=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_txt.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
    
    
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'mes' in values: #planilla sacar periodo 
            Quater=request.POST["quincena"]
            month=request.POST["mes"]
            year=request.POST["year"]
            planilla=Quater+'-'+month+'-'+year
            QQ=Quater+'-'+month
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            lista_xiii=['Q1-12','Q1-04','Q1-08']
            bool_xiii=False
            lista_buscar_decimo=[]
            Lista_quincena_no_general=[]
            lista_quincena_vacaciones=[]
            lista_xiii_no_general=[]
            lista_bonos=[]
            lista_status_general=[]
            string_transf=''
            string_transf_xiii=''
            string_transf_bonos=''
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            if True:

              lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla)
              monto_total_txt=0
              lineas=0
              monto_total_txt_xiii=0
              lineas_xiii=0
              monto_quincena_no_general=0
              lineas_quincena_no_general=0
              monto_quincena_vacaciones=0
              lineas_quincena_vacaciones=0
              monto_xiii_no_general=0
              lineas_xiii_no_general=0

              monto_bonos_txt=0
              lineas_bonos_txt=0

              monto_bonos_no_general=0
              lineas_bonos_no_general=0
              
              

              for pago in lista_planilla1:
                cedula= pago.Colaborador.Nro_Identificacion
                Nombre= pago.Colaborador.Colaborador_nombre+' '+pago.Colaborador.Colaborador_apellido
                colaborador_pk=pago.Colaborador.pk
                sueldo_neto=round(pago.Pago_Sueldo_neto,2)
                vacaciones_netas=round(pago.Pago_Vacaciones_Neto,2)
                bonos=round(pago.Pago_total_bonos_sin_impuesto,2)
                xiii=round(pago.Pago_XIII_periodo_Neto,2)
                num_cuenta=str(pago.Colaborador.Nro_cuenta) 
                banco_a_pagar=pago.Colaborador.Nombre_Banco
                tipo_pago=pago.Colaborador.Tipo_pago

                if banco_a_pagar=='Banco General (Panamá)':
                    monto_total_txt+=sueldo_neto
                    lineas+=1
                    string_transf+=cedula+'\t'+Nombre+'\t'+'71'+'\t'+str(num_cuenta)+'\t'+str(sueldo_neto)+'\t'+'C'+'\t'+'REF*TXT**'+planilla+'\n'
                    if xiii>0:
                        monto_total_txt_xiii+=xiii
                        lineas_xiii+=1
                        string_transf_xiii+=cedula+'\t'+Nombre+'\t'+'71'+'\t'+str(num_cuenta)+'\t'+str(xiii)+'\t'+'C'+'\t'+'REF*TXT**XIII**'+planilla+'\n'
                    if bonos>0:
                        monto_bonos_txt+=bonos
                        lineas_bonos_txt+=1
                        string_transf_bonos+=cedula+'\t'+Nombre+'\t'+'71'+'\t'+str(num_cuenta)+'\t'+str(bonos)+'\t'+'C'+'\t'+'REF*TXT**BONO/VIATICO**'+planilla+'\n'

                         
                else:
                    monto_quincena_no_general+=sueldo_neto
                    lineas_quincena_no_general+=1
                    Lista_quincena_no_general.append([lineas_quincena_no_general,cedula,Nombre,tipo_pago,banco_a_pagar,num_cuenta,sueldo_neto,'REF:Planilla '+planilla])
                    if xiii >0:
                        monto_xiii_no_general+=xiii
                        lineas_xiii_no_general+=1
                        lista_xiii_no_general.append([lineas_xiii_no_general,cedula,Nombre,tipo_pago,banco_a_pagar,num_cuenta,xiii,'REF:XIII en periodo '+planilla])

                    if bonos > 0:   
                        monto_bonos_no_general+=bonos
                        lineas_bonos_no_general+=1
                        lista_bonos.append([lineas_bonos_no_general,cedula,Nombre,tipo_pago,banco_a_pagar,num_cuenta,bonos,'REF: Bonos en periodo '+planilla])

                if vacaciones_netas > 0:   
                    monto_quincena_vacaciones+=vacaciones_netas
                    lineas_quincena_vacaciones+=1
                    lista_quincena_vacaciones.append([lineas_quincena_vacaciones,cedula,Nombre,tipo_pago,banco_a_pagar,num_cuenta,vacaciones_netas,'REF: Vacaciones en periodo '+planilla])
                
                

              empresa='GoCleaning/' 
              path=empresa+'archivos/' 

              nombre_archivo_quincena=path+'Macro_'+planilla+'.txt'  
              nombre_archivo_xiii=path+'Macro_XIII_'+planilla+'.txt'  
              nombre_archivo_bono=path+'Macro_BONO_VIATICO_'+planilla+'.txt'  
              nombre_archivo_excel=path+'Macros_Pagos_'+planilla+'.xlsx'

              archivo_quincena = BytesIO()
              archivo_quincena.write(string_transf.encode())
              archivo_quincena.seek(0)

              #save_path = os.path.join(settings.MEDIA_ROOT, nombre_archivo_quincena)

              #with open(archivo_quincena, 'w') as fo:
                #fo.write(string_transf)
              
              archivo_temporal = File(archivo_quincena, name=nombre_archivo_quincena)
              try:
           
            
                objetc_archivo = Archivos.objects.get(nombre='Archivo TXT MACRO')
                objetc_archivo.file=archivo_temporal
                objetc_archivo.save()
              except:
                  
                objetc_archivo = Archivos.objects.create(nombre='Archivo TXT MACRO',file=archivo_temporal)
              
              archivo_quincena.close()

            

            #guardar quincena
              archivo_xiii = BytesIO()
              archivo_xiii.write(string_transf_xiii.encode())
              archivo_xiii.seek(0)
              archivo_temporal = File(archivo_xiii, name=nombre_archivo_xiii)
              try:
                objetc_archivo = Archivos.objects.get(nombre='Archivo TXT MACRO XIII' )
                objetc_archivo.file=archivo_temporal
                objetc_archivo.save()
              except: 
                objetc_archivo = Archivos.objects.create(nombre='Archivo TXT MACRO XIII',file=archivo_temporal)
              archivo_xiii.close()

             


             

              archivo_bonos = BytesIO()
              archivo_bonos.write(string_transf_bonos.encode())
              archivo_bonos.seek(0)
              archivo_temporal = File(archivo_bonos, name=nombre_archivo_bono)
              try:
                objetc_archivo = Archivos.objects.get(nombre='Archivo TXT MACRO BONOS' )
                objetc_archivo.file=archivo_temporal
                objetc_archivo.save()
              except: 
                objetc_archivo = Archivos.objects.create(nombre='Archivo TXT MACRO BONOS',file=archivo_temporal)
              archivo_bonos.close()
            
              if True: #crear archivo excel con los que no son banco general
                    lista_status_general.append(['Tipo de Pago','Cantidad','Monto'])
                    lista_status_general.append(['Quincena Con Banco General',lineas,monto_total_txt])
                    lista_status_general.append(['Quincena Otros Bancos',lineas_quincena_no_general,monto_quincena_no_general])
                    lista_status_general.append(['XIII con Banco General',lineas_xiii,monto_total_txt_xiii])
                    lista_status_general.append(['XIII con Otros Bancos',lineas_xiii_no_general,monto_xiii_no_general])
                    lista_status_general.append(['Pago Vacaciones',lineas_quincena_vacaciones,monto_quincena_vacaciones])
                    lista_status_general.append(['Pago Bonos Banco General',lineas_bonos_txt,monto_bonos_txt])
                    lista_status_general.append(['Pago Bonos Otros Bancos',lineas_bonos_no_general,monto_bonos_no_general])
                    lista_status_general.append(['Totales',lineas_bonos_txt+lineas_bonos_no_general+lineas_quincena_vacaciones+lineas_xiii_no_general+lineas_xiii+lineas_quincena_no_general+lineas,
                                                 monto_bonos_txt+monto_bonos_no_general+monto_quincena_vacaciones+monto_xiii_no_general+monto_total_txt_xiii+monto_total_txt+monto_quincena_no_general])

                    #crear archivo
                    
                    wb= Workbook()
                    ws=wb.active
                    ws.title = "Status Generales"
                    for i in range(len(lista_status_general)):
            
                        ROW=i+1
                        for y in range(len(lista_status_general[i])):
                            COLUMN=y+1
                            valor=lista_status_general[i][y]
                            ws.cell(row=ROW, column=COLUMN,value=valor)

                    wb=funcion_status_generales(wb)  

                    if monto_quincena_no_general>0: # Quincena otros bancos
                        Lista_quincena_no_general.insert(0,['#','Nro. Identificacion','Colaborador','Tipo de Pago','Banco','Numero Cuenta','Monto a Pagar','Comentario'])
                        hoja_2 = wb.create_sheet(title="Quincena Otros bancos")
                        for i in range(len(Lista_quincena_no_general)):
            
                            ROW=i+1
                            for y in range(len(Lista_quincena_no_general[i])):
                                COLUMN=y+1
                                valor=Lista_quincena_no_general[i][y]
                                hoja_2.cell(row=ROW, column=COLUMN,value=valor) 
                        
                        wb=fun_otras_hojas(wb,'Quincena Otros bancos')

                    if monto_xiii_no_general>0: # XIII otros bancos
                        hoja_3 = wb.create_sheet(title="XIII Otros bancos")
                        lista_xiii_no_general.insert(0,['#','Nro. Identificacion','Colaborador','Tipo de Pago','Banco','Numero Cuenta','Monto a Pagar','Comentario'])
                        for i in range(len(lista_xiii_no_general)):
            
                            ROW=i+1
                            for y in range(len(lista_xiii_no_general[i])):
                                COLUMN=y+1
                                valor=lista_xiii_no_general[i][y]
                                hoja_3.cell(row=ROW, column=COLUMN,value=valor) 
                        
                        wb=fun_otras_hojas(wb,'XIII Otros bancos')

                    if monto_quincena_vacaciones>0: # vacaciones
                        lista_quincena_vacaciones.insert(0,['#','Nro. Identificacion','Colaborador','Tipo de Pago','Banco','Numero Cuenta','Monto a Pagar','Comentario'])
                        hoja_4 = wb.create_sheet(title="Vacaciones")
                        for i in range(len(lista_quincena_vacaciones)):
            
                            ROW=i+1
                            for y in range(len(lista_quincena_vacaciones[i])):
                                COLUMN=y+1
                                valor=lista_quincena_vacaciones[i][y]
                                hoja_4.cell(row=ROW, column=COLUMN,value=valor) 
                        wb=fun_otras_hojas(wb,'Vacaciones')

                    if monto_bonos_no_general>0: # Bonos
                        lista_bonos.insert(0,['#','Nro. Identificacion','Colaborador','Tipo de Pago','Banco','Numero Cuenta','Monto a Pagar','Comentario'])
                        hoja_5 = wb.create_sheet(title="Bonos no General")
                        for i in range(len(lista_bonos)):
            
                            ROW=i+1
                            for y in range(len(lista_bonos[i])):
                                COLUMN=y+1
                                valor=lista_bonos[i][y]
                                hoja_5.cell(row=ROW, column=COLUMN,value=valor) 

                        wb=fun_otras_hojas(wb,'Bonos no General')
                        
                    excel_buffer = BytesIO()
                    wb.save(excel_buffer)
                    nombre_archivo_excel=path+'Macros_Pagos_'+planilla+'.xlsx'
                    archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
                    try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo EXCEL MACRO COMPLETO' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
                    except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo EXCEL MACRO COMPLETO',file=archivo_temporal)
                    excel_buffer.close()

        
        return render(request, "ver_txt.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": 'Descargue TXT para pago de nomina quincela', 'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo_quincena ,'name_xiii':nombre_archivo_xiii, 'name_bonos':nombre_archivo_bono , 'name_xlsx':nombre_archivo_excel, 'request':request.method , 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def sipe_quincena(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=4:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_final=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            name=lista_colaboradores[i].Colaborador_nombre
            lastname=lista_colaboradores[i].Colaborador_apellido
            name= quitar_acentos(name)
            lastname=quitar_acentos(lastname)

            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_sipe.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'mes' in values: #planilla sacar periodo sipe
            
            month=request.POST["mes"]
            year=request.POST["year"]
            lista_Q=['Q1'+'-'+month+'-'+year,'Q2'+'-'+month+'-'+year]
            
            

            if True:
              lista_de_sipe=[]  
              lista_colaboradoress=[]

              lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo__in=lista_Q)
              for i in lista_planilla1:
                   if i.Colaborador.pk not in lista_colaboradoress:
                        lista_colaboradoress.append(i.Colaborador.pk)
              
              for trabajador in lista_colaboradoress:
                obj_trabajor=Colaboradores.objects.get(pk=trabajador)
                tipo_de_documento=obj_trabajor.Tipo_documento
                cedula= obj_trabajor.Nro_Identificacion
                numero_seguro_social=obj_trabajor.Nro_Seguro_Social
                Nombre=  quitar_acentos(obj_trabajor.Colaborador_nombre)
                apellido= quitar_acentos(obj_trabajor.Colaborador_apellido)
                
                hora_extra=0
                sueldo_neto=0
                islr=0
                decimo_tercer_mes=0
                vacaciones=0
                comisiones=0
                bonificacion=0
                combustible=0
                dieta=0
                salario_en_especies=0
                viatico=0
                gastos_representacion=0
                islr_gastos_representacion=0
                xiii_gp=0
                primas_de_produccion=0
                dividendo=0
                PDBI=0
                AG=0
                preaviso=0
                indemnizacion=0
                new_list=lista_planilla1.filter(Colaborador__pk=trabajador)

                for pago in new_list:
                
                
                    hora_extra+=round(pago.Pago_Total_Sobretiempo_quincenal,2)
                    sueldo_neto+=round(pago.Pago_quincena_despues_descuento-pago.Pago_Total_Sobretiempo_quincenal,2)
                    islr+=round(pago.Deduccion_ISLR+pago.Vacaciones_ISLR+pago.Pago_XIII_periodo_Seguro_Social,2)
                    decimo_tercer_mes+=round(pago.Pago_XIII_periodo_Bruto,2)
                    vacaciones+=round(pago.Pago_Vacaciones,2)
                #print('sipe',lista_Q , Nombre)
                lista_col_liquidacion=Liquidaciones.objects.filter(Periodo__in=lista_Q, Colaborador__pk=trabajador)
                for obj_liquidacion in lista_col_liquidacion:
                    vacaciones+=round(obj_liquidacion.Vacaciones_Provisionales_Brutas,2)
                    decimo_tercer_mes+=round(obj_liquidacion.Decimo_Provisional_Bruto,2)
               
                

                    

                lista=[ tipo_de_documento, cedula , numero_seguro_social, Nombre,apellido ,
                sueldo_neto ,hora_extra , islr , decimo_tercer_mes , vacaciones , comisiones , 
                bonificacion , combustible , dieta,salario_en_especies,viatico,gastos_representacion,
                islr_gastos_representacion,xiii_gp,primas_de_produccion,dividendo,PDBI, AG,
                preaviso,indemnizacion
                        ]

                lista_de_sipe.append(lista)

              lista_headers=['Tipo de Documento', 'Número de Documento', 'Numero de Seguro Social',  
       'Nombre', 'Apellido', 'Sueldo', 'HorasExtras', 'ImpuestoSobreRenta',    
       'DecimoTercerMes', 'Vacaciones', 'Comisiones', 'Bonificaciones',        
       'Combustible', 'Dieta', 'SalarioenEspecie', 'Viaticos',
       'GastodeRepresentacion', 'ImpuestoSobreRentaGastoRepresentacion',       
       'DecimoTercerMesGastoRepresentacion', 'PrimasdeProduccion', 'Dividendo',
       'ParticipacionBeneficioIngresos', 'GratificacionAguinaldo', 'Preaviso', 
       'Indemnizacion']
              
              lista_de_sipe.insert(0,lista_headers)
              
              
              wb= Workbook()
              ws=wb.active
              for i in range(len(lista_de_sipe)):
            
                ROW=i+1
                for y in range(len(lista_de_sipe[i])):
                    COLUMN=y+1
                    valor=lista_de_sipe[i][y]
                    ws.cell(row=ROW, column=COLUMN,value=valor)    

              
              ws.column_dimensions['A'].width = 20
              ws.column_dimensions['B'].width = 24
              ws.column_dimensions['C'].width = 25
              ws.column_dimensions['D'].width = 20
              ws.column_dimensions['E'].width = 20
              ws.column_dimensions['F'].width = 11
              ws.column_dimensions['H'].width = 20
              ws.column_dimensions['I'].width = 20

            empresa='GoCleaning/' 
            
            path=empresa+'archivos/'        
            
           
            nombre_archivo=path+'SIPE_'+month+'-'+year+'.xlsx'
            excel_buffer = BytesIO()

            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo SIPE' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo SIPE',file=archivo_temporal)
            
            excel_buffer.close()
             
            

        
        return render(request, "ver_sipe.html",{"name": 'Descargue Excel Del SIPE para pago de nomina quincela', 'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method , 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def reporte_quincena(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=4:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_finalL=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_finalL.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_reporte_colaborador_quincena.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
    
    
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        

        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
           
            lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Fecha_pago_quincena__gte=fecha_inicial_corte.date(), Fecha_pago_quincena__lte=fecha_final_corte.date())
            #lista_planilla1.filter(Fecha_pago_quincena__lte=fecha_final_corte.date())
            lista_colaboradores_1= []
            lista_archivo_excel = []
            lista_excel_Planilla=[]
            lista_excel_Vacaciones=[]
            lista_excel_XIII=[]
            lista_excel_Bonos=[]

            lista_Aporte_Patronal=[]
            lista_excel_Sipe_vs_AP=[]
            lista_excel_provisiones=[]
            Lista_EXCEL_Steph_asiento=[]


            for plan in lista_planilla1:
                 id_colaborador=  plan.Colaborador.pk
                 if id_colaborador not in lista_colaboradores_1 :
                      lista_colaboradores_1.append (id_colaborador) 
            
            for i in range (len(lista_colaboradores_1)) :
                lista_colaborador_rango = lista_planilla1.filter(Colaborador__pk=lista_colaboradores_1[i])
                Sueldo_base_quincenal = 0
                Pago_Dias_Trabajo_Feriado_descanso = 0
                Pago_Dias_Trabajo_Feriado = 0
                Pago_Dias_Trabajo_Descanso = 0
                Pago_Dias_Trabajo_HR_Regulares_Adicionales = 0
                Pago_Incapacidad = 0
                Pago_Licencia_paga = 0
                Pago_Total_Sobretiempo_quincenal = 0
                Pago_Bono_con_Impuesto = 0
                Pago_Dia_ausencia = 0
                Pago_MIN_Ausencia = 0
                Deduccion_con_Impuesto = 0
                Pago_quincena_despues_descuento = 0
                Deduccion_Seguro_Social = 0
                Deduccion_Seguro_Educacional = 0
                Deduccion_ISLR = 0
                Total_deduciones_Ley = 0
                Descuento_Acreedores_Hipotecario = 0
                Descuento_Acreedores_Empresa = 0
                Deduccion_sin_Impuesto = 0
                Pago_Sueldo_neto = 0
                Pago_total_bonos_sin_impuesto = 0
                Dias_Vacaciones = 0
                Pago_Vacaciones = 0
                Vacaciones_Seguro_Social = 0
                Vacaciones_Seguro_educacion = 0
                Vacaciones_ISLR = 0
                Deducion_Vacaciones_Totales = 0
                Pago_Vacaciones_Neto = 0

                Decimo_xiii_quincena_Bruto = 0
                Deduccion_Seg_social_decimo = 0
                Deduccion_ISLR_Decimmo_xiii = 0
                Decimo_xiii_quincena_Neto = 0
                
                Deduccion_Seg_social_Patron = 0
                Vacaciones_Seguro_Social_patron = 0
                Deduccion_Seguro_Educacional_Patron = 0
                Vacaciones_Seguro_educacion_patron = 0
                Deduccion_Seg_social_decimo_Patron = 0
                Prima_Antiguedad_Patron = 0
                Vacacionciones_Acumuladas_Patron = 0
                Riesgo_Profesional_Patron = 0
                Totales_patronales = 0
                Total_general_sueldo = 0

                #nuevo agregados
                Pago_XIII_periodo_Bruto = 0
                Pago_XIII_periodo_Seguro_Social = 0
                Pago_XIII_periodo_ISLR = 0
                Pago_XIII_periodo_Neto = 0
                Deduccion_XIII_periodo_Seguro_social_patron = 0

            # inicio de guardar datos por colaborador # 
                for plan_quincena in lista_colaborador_rango: 
                    Sueldo_base_quincenal += plan_quincena.Pago_quincena_despues_descuento - (plan_quincena.Pago_Dias_Trabajo_Feriado_descanso+plan_quincena.Pago_Dias_Trabajo_Feriado_descanso+plan_quincena.Pago_Dias_Trabajo_Descanso+plan_quincena.Pago_Dias_Trabajo_HR_Regulares_Adicionales+plan_quincena.Pago_Incapacidad+plan_quincena.Pago_Licencia_paga+plan_quincena.Pago_Total_Sobretiempo_quincenal+plan_quincena.Pago_Bono_con_Impuesto)+plan_quincena.Pago_Dia_ausencia+plan_quincena.Pago_MIN_Ausencia
                    Pago_Dias_Trabajo_Feriado_descanso  += plan_quincena.Pago_Dias_Trabajo_Feriado_descanso
                    Pago_Dias_Trabajo_Feriado  += plan_quincena.Pago_Dias_Trabajo_Feriado_descanso
                    Pago_Dias_Trabajo_Descanso  += plan_quincena.Pago_Dias_Trabajo_Descanso
                    Pago_Dias_Trabajo_HR_Regulares_Adicionales  += plan_quincena.Pago_Dias_Trabajo_HR_Regulares_Adicionales
                    Pago_Incapacidad  += plan_quincena.Pago_Incapacidad
                    Pago_Licencia_paga  += plan_quincena.Pago_Licencia_paga
                    Pago_Total_Sobretiempo_quincenal  += plan_quincena.Pago_Total_Sobretiempo_quincenal
                    Pago_Bono_con_Impuesto  += plan_quincena.Pago_Bono_con_Impuesto
                    Pago_Dia_ausencia  += plan_quincena.Pago_Dia_ausencia
                    Pago_MIN_Ausencia  += plan_quincena.Pago_MIN_Ausencia
                    Deduccion_con_Impuesto  += plan_quincena.Deduccion_con_Impuesto
                    Pago_quincena_despues_descuento  += plan_quincena.Pago_quincena_despues_descuento
                    Deduccion_Seguro_Social  += plan_quincena.Deduccion_Seguro_Social
                    Deduccion_Seguro_Educacional  += plan_quincena.Deduccion_Seguro_Educacional
                    Deduccion_ISLR  += plan_quincena.Deduccion_ISLR
                    Total_deduciones_Ley  += plan_quincena.Total_deduciones_Ley
                    Descuento_Acreedores_Hipotecario  += plan_quincena.Descuento_Acreedores_Hipotecario
                    Descuento_Acreedores_Empresa  += plan_quincena.Descuento_Acreedores_Empresa
                    Deduccion_sin_Impuesto  += plan_quincena.Deduccion_sin_Impuesto
                    Pago_Sueldo_neto  += plan_quincena.Pago_Sueldo_neto
                    Pago_total_bonos_sin_impuesto  += plan_quincena.Pago_total_bonos_sin_impuesto
                    Dias_Vacaciones+=plan_quincena.Dias_Vacaciones
                    Pago_Vacaciones  += plan_quincena.Pago_Vacaciones
                    Vacaciones_Seguro_Social  += plan_quincena.Vacaciones_Seguro_Social
                    Vacaciones_Seguro_educacion  += plan_quincena.Vacaciones_Seguro_educacion
                    Vacaciones_ISLR  += plan_quincena.Vacaciones_ISLR
                    Deducion_Vacaciones_Totales  += plan_quincena.Deducion_Vacaciones_Totales
                    Pago_Vacaciones_Neto  += plan_quincena.Pago_Vacaciones_Neto
                    Decimo_xiii_quincena_Bruto  += plan_quincena.Decimo_xiii_quincena_Bruto

                    Deduccion_Seg_social_decimo  += plan_quincena.Deduccion_Seg_social_decimo
                    Deduccion_ISLR_Decimmo_xiii  += plan_quincena.Deduccion_ISLR_Decimmo_xiii
                    Decimo_xiii_quincena_Neto  += plan_quincena.Decimo_xiii_quincena_Neto
                    Deduccion_Seg_social_Patron  += plan_quincena.Deduccion_Seg_social_Patron
                    Vacaciones_Seguro_Social_patron  += plan_quincena.Vacaciones_Seguro_Social_patron
                    Deduccion_Seguro_Educacional_Patron  += plan_quincena.Deduccion_Seguro_Educacional_Patron
                    Vacaciones_Seguro_educacion_patron  += plan_quincena.Vacaciones_Seguro_educacion_patron
                    Deduccion_Seg_social_decimo_Patron  += plan_quincena.Deduccion_Seg_social_decimo_Patron
                    Prima_Antiguedad_Patron  += plan_quincena.Prima_Antiguedad_Patron
                    Vacacionciones_Acumuladas_Patron  += plan_quincena.Vacacionciones_Acumuladas_Patron
                    Riesgo_Profesional_Patron  += plan_quincena.Riesgo_Profesional_Patron
                    Totales_patronales  += plan_quincena.Totales_patronales
                    Total_general_sueldo  += plan_quincena.Total_general_sueldo
                    #nuevos agregado
                    Pago_XIII_periodo_Bruto += plan_quincena.Pago_XIII_periodo_Bruto
                    Pago_XIII_periodo_Seguro_Social  += plan_quincena.Pago_XIII_periodo_Seguro_Social
                    Pago_XIII_periodo_ISLR  += plan_quincena.Pago_XIII_periodo_ISLR
                    Pago_XIII_periodo_Neto  += plan_quincena.Pago_XIII_periodo_Neto
                    Deduccion_XIII_periodo_Seguro_social_patron  += plan_quincena.Deduccion_XIII_periodo_Seguro_social_patron
                    Dia_sueldo=plan_quincena.Sueldo_Diario
                    
                
                ####Aqui ##Aqui
                #si hubo liquidacion tambien hacerlo
                if True: #Liquidacion
                    try:
                        obj_liquidaciones=Liquidaciones.objects.get(Colaborador__pk=lista_colaboradores_1[i], Fecha_pago_liquidacion__gte=fecha_inicial_corte.date(), Fecha_pago_liquidacion__lte=fecha_final_corte.date()) 
                        Pago_Vacaciones +=obj_liquidaciones.Vacaciones_Provisionales_Brutas
                        Vacaciones_Seguro_Social +=obj_liquidaciones.Seguro_Social_Provisiones_Vacas
                        Vacaciones_Seguro_educacion +=obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas
                
                        Deducion_Vacaciones_Totales += obj_liquidaciones.Seguro_Social_Provisiones_Vacas + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas
                        Pago_Vacaciones_Neto += obj_liquidaciones.Vacaciones_Provisionales_Brutas - ( obj_liquidaciones.Seguro_Social_Provisiones_Vacas + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas)
                
                        Pago_XIII_periodo_Bruto +=obj_liquidaciones.Decimo_Provisional_Bruto
                        Pago_XIII_periodo_Seguro_Social += obj_liquidaciones.Seguro_Social_Decimo_Provisiones
                
                        Pago_XIII_periodo_Neto += obj_liquidaciones.Decimo_Provisional_Bruto - obj_liquidaciones.Seguro_Social_Decimo_Provisiones

                        # Decimo provisio en cero porque estara despedido
                        quitar_xiii_prov = plan_quincena.Decimo_xiii_quincena_Bruto + plan_quincena.Deduccion_Seg_social_decimo_Patron
                        '''Decimo_xiii_quincena_Bruto -= plan_quincena.Decimo_xiii_quincena_Bruto
                        Deduccion_Seg_social_decimo  -= plan_quincena.Deduccion_Seg_social_decimo
                        Deduccion_ISLR_Decimmo_xiii -= plan_quincena.Deduccion_ISLR_Decimmo_xiii
                        Decimo_xiii_quincena_Neto  -= plan_quincena.Decimo_xiii_quincena_Neto
                        Deduccion_Seg_social_decimo_Patron  -= plan_quincena.Deduccion_Seg_social_decimo_Patron

                        #Quitar vacaciones de liquidacion en provision
                        Vacacionciones_Acumuladas_Patron  -= plan_quincena.Vacacionciones_Acumuladas_Patron'''


                        Deduccion_XIII_periodo_Seguro_social_patron += obj_liquidaciones.Seguro_Social_Decimo_Provisiones_Patron

                        Vacaciones_Seguro_Social_patron += obj_liquidaciones.Seguro_Social_Provisiones_Vacas_Patron
                
                        Vacaciones_Seguro_educacion_patron += obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas_Patron

                        #Riesgos Profesionales
                        vacaciones_riesgos_profesionales = obj_liquidaciones.Vacaciones_Provisionales_Brutas*0.021
                        Riesgo_Profesional_Patron  += vacaciones_riesgos_profesionales
                
                        Totales_patronales += obj_liquidaciones.Seguro_Social_Decimo_Provisiones_Patron + obj_liquidaciones.Seguro_Social_Provisiones_Vacas_Patron + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas_Patron + vacaciones_riesgos_profesionales
                        
                        Total_general_sueldo  +=  obj_liquidaciones.Seguro_Social_Decimo_Provisiones_Patron + obj_liquidaciones.Seguro_Social_Provisiones_Vacas_Patron + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas_Patron  + obj_liquidaciones.Vacaciones_Provisionales_Brutas +obj_liquidaciones.Decimo_Provisional_Bruto +vacaciones_riesgos_profesionales
                    
                    except:
                        a=1
                
                #fin estudio
                
                Nombre_apellido=lista_colaborador_rango[0].Colaborador.Colaborador_nombre+' '+lista_colaborador_rango[0].Colaborador.Colaborador_apellido
                numero_identificacion = lista_colaborador_rango[0].Colaborador.Nro_Identificacion

                lista_linea = [i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Sueldo_base_quincenal,2),
                round(Pago_Dias_Trabajo_Feriado_descanso,2),
                round(Pago_Dias_Trabajo_Feriado,2),
                round(Pago_Dias_Trabajo_Descanso,2),
                round(Pago_Dias_Trabajo_HR_Regulares_Adicionales,2),
                round(Pago_Incapacidad,2),
                round(Pago_Licencia_paga,2),
                
                round(Pago_Bono_con_Impuesto,2),
                round(Pago_Dia_ausencia,2),
                round(Pago_MIN_Ausencia,2),
                round(Deduccion_con_Impuesto,2),
                
                round(Pago_quincena_despues_descuento-Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_quincena_despues_descuento,2),
                round(Deduccion_Seguro_Social,2),
                round(Deduccion_Seguro_Educacional,2),
                round(Deduccion_ISLR,2),
                round(Total_deduciones_Ley,2),
                round(Descuento_Acreedores_Hipotecario,2),
                round(Descuento_Acreedores_Empresa,2),
                round(Deduccion_sin_Impuesto,2),
                round(Pago_Sueldo_neto,2),
                round(Pago_total_bonos_sin_impuesto,2),
                round(Pago_Vacaciones,2),
                round(Vacaciones_Seguro_Social,2),
                round(Vacaciones_Seguro_educacion,2),
                round(Vacaciones_ISLR,2),
                round(Deducion_Vacaciones_Totales,2),
                round(Pago_Vacaciones_Neto,2),
                #aqui se Agrega Decimo XIII Pago en Planilla
                round(Pago_XIII_periodo_Bruto,2),
                round(Pago_XIII_periodo_Seguro_Social,2),
                round(Pago_XIII_periodo_ISLR,2),
                round(Pago_XIII_periodo_Neto,2),
                
                #continua
                round(Decimo_xiii_quincena_Bruto,2),
                round(Deduccion_Seg_social_decimo,2),
                round(Deduccion_ISLR_Decimmo_xiii,2),
                round(Decimo_xiii_quincena_Neto,2),
                round(Deduccion_Seg_social_Patron,2),
                round(Vacaciones_Seguro_Social_patron,2),
                #
                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                #
                round(Deduccion_Seguro_Educacional_Patron,2),
                round(Vacaciones_Seguro_educacion_patron,2),
                round(Deduccion_Seg_social_decimo_Patron,2),
                round(Prima_Antiguedad_Patron,2), 
                round(Vacacionciones_Acumuladas_Patron,2),
                round(Riesgo_Profesional_Patron,2),
                round(Totales_patronales,2),
                round(Total_general_sueldo,2)
                               ]
                
                lista_para_colaboradores=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Sueldo_base_quincenal,2),
                round(Pago_Dias_Trabajo_Feriado_descanso,2),
                round(Pago_Dias_Trabajo_Feriado,2),
                round(Pago_Dias_Trabajo_Descanso,2),
                round(Pago_Dias_Trabajo_HR_Regulares_Adicionales,2),
                round(Pago_Incapacidad,2),
                round(Pago_Licencia_paga,2),
                
                round(Pago_Bono_con_Impuesto,2),
                round(Pago_Dia_ausencia,2),
                round(Pago_MIN_Ausencia,2),
                round(Deduccion_con_Impuesto,2),
                
                round(Pago_quincena_despues_descuento-Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_quincena_despues_descuento,2),
                round(Deduccion_Seguro_Social,2),
                round(Deduccion_Seguro_Educacional,2),
                round(Deduccion_ISLR,2),
                round(Total_deduciones_Ley,2),
                round(Descuento_Acreedores_Hipotecario,2),
                round(Descuento_Acreedores_Empresa,2),
                round(Deduccion_sin_Impuesto,2),
                round(Pago_Sueldo_neto,2)
                ]
                
                lista_vacas=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Dia_sueldo,2),
                Dias_Vacaciones,
                round(Pago_Vacaciones,2),
                round(Vacaciones_Seguro_Social,2),
                round(Vacaciones_Seguro_educacion,2),
                round(Vacaciones_ISLR,2),
                round(Deducion_Vacaciones_Totales,2),
                round(Pago_Vacaciones_Neto,2),
                round(Vacaciones_Seguro_Social_patron,2),
                #
                round(Vacaciones_Seguro_educacion_patron,2),
                round(Pago_Vacaciones+Vacaciones_Seguro_Social_patron+Vacaciones_Seguro_educacion_patron,2)]

                lista_XIII=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Pago_XIII_periodo_Bruto,2),
                round(Pago_XIII_periodo_Seguro_Social,2),
                round(Pago_XIII_periodo_ISLR,2),
                round(Pago_XIII_periodo_Neto,2),
                #
                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                round(Pago_XIII_periodo_Bruto+Deduccion_XIII_periodo_Seguro_social_patron,2)]

                lista_BONOS=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Pago_total_bonos_sin_impuesto,2),]

                lista_aporte_patronal=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                               round(Pago_quincena_despues_descuento,2),
                               round(Pago_Vacaciones,2),
                               round(Pago_XIII_periodo_Bruto,2),
                               
                               #seguros sociales
                               round(Deduccion_Seguro_Social,2),
                               round(Vacaciones_Seguro_Social,2),
                               round(Pago_XIII_periodo_Seguro_Social,2),
                               round(Deduccion_Seguro_Social+Vacaciones_Seguro_Social+Pago_XIII_periodo_Seguro_Social,2),
                               #seguro educacional
                                round(Deduccion_Seguro_Educacional,2),
                                round(Vacaciones_Seguro_educacion,2),
                                round(Deduccion_Seguro_Educacional+Vacaciones_Seguro_educacion,2),
                                #islr

                                round(Deduccion_ISLR,2),
                                round(Vacaciones_ISLR,2),
                                round(Pago_XIII_periodo_ISLR,2),
                                round(Deduccion_ISLR+Vacaciones_ISLR+Pago_XIII_periodo_ISLR,2),

                                #patronal SS
                                round(Deduccion_Seg_social_Patron,2),
                                round(Vacaciones_Seguro_Social_patron,2),
                                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                                round(Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron,2),
                                #patronm SE
                                round(Deduccion_Seguro_Educacional_Patron,2),
                                round(Vacaciones_Seguro_educacion_patron,2),
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron,2),
                                #rIESGO Profesionales
                                round(Riesgo_Profesional_Patron,2),
                                #total
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron+Deduccion_Seguro_Social+Vacaciones_Seguro_Social+Pago_XIII_periodo_Seguro_Social+Deduccion_Seguro_Educacional+Vacaciones_Seguro_educacion+ Deduccion_ISLR+Vacaciones_ISLR+Pago_XIII_periodo_ISLR+ Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron+Riesgo_Profesional_Patron,2),

                                ]

                lista_provisiones=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                               round(Pago_quincena_despues_descuento,2),
                               round(Pago_Vacaciones,2),
                               round(Decimo_xiii_quincena_Bruto,2),
                               round(Deduccion_Seg_social_decimo_Patron,2),
                               round(Prima_Antiguedad_Patron,2), 
                               round(Vacacionciones_Acumuladas_Patron,2),
                               round(Decimo_xiii_quincena_Bruto+Deduccion_Seg_social_decimo_Patron+Prima_Antiguedad_Patron+Vacacionciones_Acumuladas_Patron,2), 
                ]

                Lista_Steph_asiento=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                               round(Pago_quincena_despues_descuento,2),
                               round(Pago_Vacaciones,2),
                               round(Pago_XIII_periodo_Bruto,2),

                               #seguros sociales Patronales
                                round(Deduccion_Seg_social_Patron,2),
                                round(Vacaciones_Seguro_Social_patron,2),
                                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                                round(Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron,2),
                               #seguro educacional
                                #patronm SE
                                round(Deduccion_Seguro_Educacional_Patron,2),
                                round(Vacaciones_Seguro_educacion_patron,2),
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron,2),

                                #rIESGO Profesionales
                                round(Riesgo_Profesional_Patron,2),
                                #provisiones XIII
                                round(Decimo_xiii_quincena_Bruto,2),
                               round(Deduccion_Seg_social_decimo_Patron,2),
                                round(Deduccion_Seg_social_decimo_Patron+Decimo_xiii_quincena_Bruto,2),

                               #Provisiones PA
                               round(Prima_Antiguedad_Patron,2), 
                               #Provisiones VA
                               round(Vacacionciones_Acumuladas_Patron,2),
                                
                                
                                
                                #total
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron+ Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron+Riesgo_Profesional_Patron+Decimo_xiii_quincena_Bruto+Deduccion_Seg_social_decimo_Patron+Prima_Antiguedad_Patron+Vacacionciones_Acumuladas_Patron,2),

                                ]

                lista_archivo_excel.append(lista_linea)
                lista_excel_Planilla.append(lista_para_colaboradores)
                lista_excel_Vacaciones.append(lista_vacas)
                lista_excel_XIII.append(lista_XIII)
                lista_excel_Bonos.append(lista_BONOS)
                lista_Aporte_Patronal.append(lista_aporte_patronal)
                lista_excel_provisiones.append(lista_provisiones)
                Lista_EXCEL_Steph_asiento.append(Lista_Steph_asiento)
            #aportes Patronal vs SIPE
            Total_Pagar_AP=0
            Seguro_Social_AP=0
            Seguro_EDU_AP=0
            ISLR_Total=0
            Riesgo_Profesionales_AP=0
            for i in lista_Aporte_Patronal:
                Total_Pagar_AP+=i[-1]
                Seguro_Social_AP+=i[9]+i[20]
                Seguro_EDU_AP+=i[12]+i[23]
                ISLR_Total+=i[16]
                Riesgo_Profesionales_AP+=i[-2]

            lista_excel_Sipe_vs_AP.append(['SIPE vs Aportes Patronales',''])
            lista_excel_Sipe_vs_AP.append(['Concepto','Monto'])
            
            lista_excel_Sipe_vs_AP.append(['Total Seguro Social',round(Seguro_Social_AP,2)])
            lista_excel_Sipe_vs_AP.append(['Total Seguro Educacional',round(Seguro_EDU_AP,2)])
            lista_excel_Sipe_vs_AP.append(['Total ISLR',round(ISLR_Total,2)])
            lista_excel_Sipe_vs_AP.append(['Total Riesgo Profesionales',round(Riesgo_Profesionales_AP,2)])
            lista_excel_Sipe_vs_AP.append(['Totales Aportar',round(Total_Pagar_AP,2)])
            
            lista_cabecera=['#',
                'Nombres y apellido',
                'identificacion',
                'Sueldo base quincenal',
                'Feriado con Dia descanso',
                'Feriado',
                'Domingo o Dia Descanso',
                'Horas Regulares Adicionales',
                'Incapacidad',
                'Licencia paga',
                
                'Bonificacion con Impuesto',
                'Dia ausencia',
                'Ausencia Dentro Jornada' ,
                'Deduccion con Impuesto',
                'Suelo Bruto Sin Sobretiempo'  ,
                'Sobretiempo',
                'Sueldo Bruto'  ,
                'Deduccion Seguro Social'  ,
                'Deduccion Seguro Educacional'  ,
                'Deduccion ISLR'  ,
                'Total deduciones Ley' ,
                'Descuento Acreedores Hipotecario'  ,
                'Descuento Acreedores Empresa'  ,
                'Deduccion sin Impuesto'  ,
                'Sueldo Neto'  ,
                'Bonificacion Sin Impuesto'  ,
                'Vacaciones'  ,
                'Vacaciones Seguro Social'  ,
                'Vacaciones Seguro educacion' ,
                'Vacaciones ISLR' ,
                'Deducion Vacaciones Totales'  ,
                'Vacaciones Netas'  ,
                'Pago XIII periodo Bruto',
                'Pago XIII periodo Seguro Social',
                'Pago XIII periodo ISLR',
                'Pago XIII periodo Neto',
                'Decimo XIII Bruto Provision'  ,
                'Deduccion Seg Social Decimo XIII Provision'  ,
                'Deduccion ISLR Decimo XIII Provision'  ,
                'Decimo XIII Neto Provision'  ,
                'Deduccion Seg social Patron'  ,
                'Vacaciones Seguro Social Patron',
                'Deduccion XIII Periodo Seguro Social Patron',
                'Deduccion Seguro Educacional Patron'  ,
                'Vacaciones Seguro Educacion Patron'  ,
                'Deduccion Seg Social XIII Patron Provision'  ,
                'Prima Antiguedad Patron'  , 
                'Vacacionciones Acumuladas Patron'  ,
                'Riesgo Profesional Patron'  ,
                'Totales Patronales'  ,
                'Total General Sueldo'  
                               ]
            
            lista_cabecera_colb=['#',
                'Nombres y apellido',
                'identificacion',
                'Sueldo base quincenal',
                'Feriado con Dia descanso',
                'Feriado',
                'Domingo o Dia Descanso',
                'Horas Regulares Adicionales',
                'Incapacidad',
                'Licencia paga',
                
                'Bonificacion con Impuesto',
                'Dia ausencia',
                'Ausencia Dentro Jornada' ,
                'Deduccion con Impuesto',
                'Suelo Bruto Sin Sobretiempo'  ,
                'Sobretiempo',
                'Suelo Bruto'  ,
                'Deduccion Seguro Social'  ,
                'Deduccion Seguro Educacional'  ,
                'Deduccion ISLR'  ,
                'Total deduciones Ley' ,
                'Descuento Acreedores Hipotecario'  ,
                'Descuento Acreedores Empresa'  ,
                'Deduccion sin Impuesto'  ,
                'Sueldo Neto'  
                     ]
            
            lista_cabecera_vacas=['#',
                'Nombres y apellido',
                'identificacion',
                'Salario Diario',
                'Dias Vacaciones',
                'Vacaciones'  ,
                'Vacaciones Seguro Social'  ,
                'Vacaciones Seguro educacion' ,
                'Vacaciones ISLR' ,
                'Deducion Vacaciones Totales'  ,
                'Vacaciones Netas',
                'Vacaciones Seguro Social Patron',
                'Vacaciones Seguro Educacion Patron',
                'Vacaciones Saldo Patron  '
                               ]
            
            lista_cabecera_XIII=['#',
                'Nombres y apellido',
                'identificacion',
                'Pago XIII periodo Bruto',
                'Pago XIII periodo Seguro Social',
                'Pago XIII periodo ISLR',
                'Pago XIII periodo Neto',
                'Deduccion XIII Periodo Seguro Social Patron',
                
                'XIII Saldo Patron '
                               ]
            
            lista_cabecera_BONOS=['#',
                'Nombres y apellido',
                'identificacion',
                'Bonificacion Sin Impuesto'
                               ]
            
            lista_cabecera_APORTES=['#',
                'Nombres y Apellido',
                'Identificacion',
                'Sueldo Bruto',
                'Vacaciones',
                'XIII',

                'Sueldo Seguro Social'  ,
                'Vacaciones Seguro Social' ,
                'XIII Seguro Social' ,
                'Total Trabajador Seguro Social' ,

                'Sueldo Seguro Educacional'  ,
                'Vacaciones Seguro Educacional'  ,
                'Total Trabajador Seguro Educacional' ,

                'Sueldo ISLR'  ,
                'Vacaciones ISLR'  ,
                'XIII ISLR'  ,
                'Total Trabajador ISLR'  ,

                'Sueldo Seguro Social Patronal'  ,
                'Vacaciones Seguro Social Patronal' ,
                'XIII Seguro Social Patronal' ,
                'Total Patronal Seguro Social ' ,

                'Sueldo Seguro Educacional Patronal'  ,
                'Vacaciones Seguro Educacional Patronal'  ,
                'Total Patronal Seguro Educacional' ,
                'Riesgo Profesionales' ,
                'Total Aporte Patronal'

                ]

            lista_cabecera_provisiones=['#',
                'Nombres y Apellido',
                'Identificacion',
                'Sueldo Bruto',
                'Vacaciones',
                'Provision XIII',
                'Provision XIII S.S Patronal',
                'Provision Prima Antiguedad',
                'Provision Vacaciones',
                'Total Provisiones Patronales'

                ]

            lista_Steph_asiento=['#',
                'Nombres y Apellido',
                'Identificacion',
                'Sueldo Bruto',
                'Vacaciones',
                'XIII',
                'SS / P',
                'SS V / P',
                'SS XIII / P',
                'Total SS Patronal',
                'SE / P',
                'SE V/ P',
                'Total SE Patronal',
                'Riesgos Profesionales',
                'Prov. XIII',
                'Prov. XIII SS / P',
                'Total Prov. XIII',
                
                'Provision Prima Antiguedad',
                'Provision Vacaciones',
                'Total Provisiones Patronales'

                ]
                    

            lista_archivo_excel.insert(0,lista_cabecera)
            
            wb= Workbook()
            ws=wb.active
            ws.title='Planilla Completa'
            for i in range(len(lista_archivo_excel)):
            
                ROW=i+1
                for y in range(len(lista_archivo_excel[i])):
                    COLUMN=y+1
                    valor=lista_archivo_excel[i][y]
                    ws.cell(row=ROW, column=COLUMN,value=valor) 
            
           
            wb=fun_planilla_completa_cosmetic(wb,'Planilla Completa')

            
            if True: #Aporte Patronales
                lista_Aporte_Patronal.insert(0,lista_cabecera_APORTES)
                hoja_6 = wb.create_sheet(title="Aporte Patronales")
                for i in range(len(lista_Aporte_Patronal)):
            
                    ROW=i+1
                    for y in range(len(lista_Aporte_Patronal[i])):
                        COLUMN=y+1
                        valor=lista_Aporte_Patronal[i][y]
                        hoja_6.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Patronales(wb,"Aporte Patronales")
            
            if True: #Aporte Patronales VS sipe
                
                hoja_7 = wb.create_sheet(title="SIPE vs AP")
                for i in range(len(lista_excel_Sipe_vs_AP)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Sipe_vs_AP[i])):
                        COLUMN=y+1
                        valor=lista_excel_Sipe_vs_AP[i][y]
                        hoja_7.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_SIPEvsAP(wb,"SIPE vs AP")
            
            if True: #Asiento Contable
                Lista_EXCEL_Steph_asiento.insert(0,lista_Steph_asiento)
                hoja_9 = wb.create_sheet(title="Asiento Contable")
                for i in range(len(Lista_EXCEL_Steph_asiento)):
            
                    ROW=i+1
                    for y in range(len(Lista_EXCEL_Steph_asiento[i])):
                        COLUMN=y+1
                        valor=Lista_EXCEL_Steph_asiento[i][y]
                        hoja_9.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Patronales_1(wb,"Asiento Contable")
            

            if True: #provisiones
                lista_excel_provisiones.insert(0,lista_cabecera_provisiones)
                hoja_8 = wb.create_sheet(title="Provisiones Patronales")
                for i in range(len(lista_excel_provisiones)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_provisiones[i])):
                        COLUMN=y+1
                        valor= lista_excel_provisiones[i][y]
                        hoja_8.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Provisiones(wb,"Provisiones Patronales")
            
            if True: #Planilla
                lista_excel_Planilla.insert(0,lista_cabecera_colb)
                hoja_2 = wb.create_sheet(title="Planilla Colaboradores")
                for i in range(len(lista_excel_Planilla)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Planilla[i])):
                        COLUMN=y+1
                        valor=lista_excel_Planilla[i][y]
                        hoja_2.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_colaborador(wb,'Planilla Colaboradores')
            
            if True: #Vacaciones
                lista_excel_Vacaciones.insert(0,lista_cabecera_vacas)
                hoja_3 = wb.create_sheet(title="Vacaciones Colaboradores")
                for i in range(len(lista_excel_Vacaciones)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Vacaciones[i])):
                        COLUMN=y+1
                        valor=lista_excel_Vacaciones[i][y]
                        hoja_3.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_vacaciones(wb,"Vacaciones Colaboradores")
            
            if True: #XIII
                lista_excel_XIII.insert(0,lista_cabecera_XIII)
                hoja_4 = wb.create_sheet(title="XIII Colaboradores")
                for i in range(len(lista_excel_XIII)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_XIII[i])):
                        COLUMN=y+1
                        valor=lista_excel_XIII[i][y]
                        hoja_4.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_XIII(wb,"XIII Colaboradores")
            
            if True: #Bonos
                lista_excel_Bonos.insert(0,lista_cabecera_BONOS)
                hoja_5 = wb.create_sheet(title="Bonos Colaboradores")
                for i in range(len(lista_excel_Bonos)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Bonos[i])):
                        COLUMN=y+1
                        valor=lista_excel_Bonos[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Bonos(wb,"Bonos Colaboradores")
            
            empresa='GoCleaning/' 
            path=empresa+'archivos/'        
            
            nombre_archivo=path+'planilla_completa_del'+str(inicio)+'_al_'+final+'.xlsx'
            excel_buffer = BytesIO()

            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo Planilla Completa Colaboradores COMPLETO' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo Planilla Completa Colaboradores COMPLETO',file=archivo_temporal)
            
            excel_buffer.close()

           


        inicio=request.POST["inicial"]
        final=request.POST["final"]

        
        return render(request, "ver_reporte_colaborador_quincena.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": 'Descargue Excel Del SIPE para pago de nomina quincela', 'inicio':inicio, 'final':final,'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method , 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def reporte_liquidacion(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=4:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_finalL=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_finalL.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_reporte_liquidacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
    
    
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        

        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
           
            lista_planilla1=Liquidaciones.objects.filter(Fecha_pago_liquidacion__gte=fecha_inicial_corte.date(), Fecha_pago_liquidacion__lte=fecha_final_corte.date())
            #lista_planilla1.filter(Fecha_pago_quincena__lte=fecha_final_corte.date())
            lista_prestacion= []
            
            i=0
            for obj_liq in lista_planilla1 :
                i+=1
                Periodo = obj_liq.Periodo
                Fecha_pago_liquidacion = fun_fecha_bonita(obj_liq.Fecha_pago_liquidacion)

                Anos_Laborado=obj_liq.Anos_Laborado
                Meses_Laborados=obj_liq.Meses_Laborados
                Dias_Laborados=obj_liq.Dias_Laborados

                tiempo_trabajando= str(Anos_Laborado)+' Años '+str(Meses_Laborados)+' Meses '+str(Dias_Laborados)+' Dias.'

                Mes_Diferencia_XIII=obj_liq.Mes_Diferencia_XIII
                Dias_Diferencia_XIII=obj_liq.Dias_Diferencia_XIII
                tiempo_xiii=str(Mes_Diferencia_XIII)+' Meses '+str(Dias_Diferencia_XIII)+' Dias.'

                nombre_colaborador=obj_liq.Colaborador.Colaborador_nombre+' '+obj_liq.Colaborador.Colaborador_apellido
                nro_ident= obj_liq.Colaborador.Nro_Identificacion
                cargo= obj_liq.Colaborador.Cargo
                departamento= obj_liq.Colaborador.Departamento

                Tipo_de_Liquidacion=obj_liq.Tipo_de_Liquidacion
                Salario_Mayor= round(obj_liq.Salario_Mayor,2)
                Salario_Ultimos_30_Dias = round(obj_liq.Salario_Ultimos_30_Dias,2)
                Salario_Ultimos_6_meses= round(obj_liq.Salario_Ultimos_6_meses,2)
                Salario_Ultimos_5_anios= round(obj_liq.Salario_Ultimos_5_anios,2)

                Salario_Actual= round(obj_liq.Colaborador.Sueldo,2)

                Dias_Vacaciones_Acumuladas=round(obj_liq.Dias_Vacaciones_Acumuladas,2)
                Antiguedad_En_Anios=round(obj_liq.Antiguedad_En_Anios,2)
                Vacaciones_Provisionales_Brutas=round(obj_liq.Vacaciones_Provisionales_Brutas,2)
                #Deducciones
                Seguro_Social_Provisiones_Vacas= round(obj_liq.Seguro_Social_Provisiones_Vacas,2)
                Seguro_Educativo_Proviciones_Vacas= round(obj_liq.Seguro_Educativo_Proviciones_Vacas,2)
                Decimo_Provisional_Bruto= round(obj_liq.Decimo_Provisional_Bruto,2)
                Seguro_Social_Decimo_Provisiones= round(obj_liq.Seguro_Social_Decimo_Provisiones,2)
                Devolucion_ISLR= round(obj_liq.Devolucion_ISLR,2)
                #acreedores hipotecario
            
                Descuento_Acreedores_Empresa= round(obj_liq.Descuento_Acreedores_Empresa,2)

                Preaviso= round(obj_liq.Preaviso,2)
                Prima_Antiguedad= round(obj_liq.Prima_Antiguedad,2)
                Indemnizacion= round(obj_liq.Indemnizacion,2)
                Cesantía= round(obj_liq.Cesantía,2)
                # Totales Colaborador
                Total_Liquidacion_Bruta= round(obj_liq.Total_Liquidacion_Bruta,2)
                Total_deduciones_Colaborador= round(obj_liq.Total_deduciones_Colaborador,2)
                Total_Liquidacion_Neta= round(obj_liq.Total_Liquidacion_Neta,2)

                #Patronales
                Seguro_Social_Provisiones_Vacas_Patron= round(obj_liq.Seguro_Social_Provisiones_Vacas_Patron,2)
                Seguro_Educativo_Proviciones_Vacas_Patron= round(obj_liq.Seguro_Educativo_Proviciones_Vacas_Patron,2)
                Seguro_Social_Decimo_Provisiones_Patron= round(obj_liq.Seguro_Social_Decimo_Provisiones_Patron,2)
                Total_Deduciones_Patronales= round(obj_liq.Total_Deduciones_Patronales,2)
                Total_Gastos_Patron= round(obj_liq.Total_Gastos_Patron,2)

                contrato=obj_liq.Colaborador.Tipo_contrato
                if contrato=='Contrato_Indefinido':
                     contrato='Tiempo Indefinido'
                else:
                     contrato='Tiempo Definido'
                     
                    

            
                
                lista_linea = [i,
                               nombre_colaborador,
                               nro_ident,
                               cargo,
                               departamento,
                               Periodo,
                               Fecha_pago_liquidacion,
                               tiempo_trabajando,
                               contrato,
                               Tipo_de_Liquidacion,
                                Salario_Mayor , 
                                Salario_Ultimos_30_Dias ,
                                Salario_Ultimos_6_meses ,
                                Salario_Ultimos_5_anios ,

                                Salario_Actual ,

                                Dias_Vacaciones_Acumuladas ,
                                
                                Vacaciones_Provisionales_Brutas ,
                                Decimo_Provisional_Bruto ,
                                #Deducciones
                                Preaviso ,
                                Prima_Antiguedad ,
                                Indemnizacion,
                                Cesantía ,
                                # Totales Colaborador
                                Total_Liquidacion_Bruta ,

                                Seguro_Social_Provisiones_Vacas ,
                                Seguro_Social_Decimo_Provisiones ,
                                Seguro_Educativo_Proviciones_Vacas ,
                               
                                
                                Devolucion_ISLR ,
                                Descuento_Acreedores_Empresa ,

                                Total_deduciones_Colaborador , 
                                Total_Liquidacion_Neta ,

                                #Patronales
                                Seguro_Social_Provisiones_Vacas_Patron ,
                                Seguro_Educativo_Proviciones_Vacas_Patron ,
                                Seguro_Social_Decimo_Provisiones_Patron ,
                                Total_Deduciones_Patronales ,
                                Total_Gastos_Patron 

                
                               ]
                
               
                lista_prestacion.append(lista_linea)

           
            lista_cabecera=['#',
                'Nombres y Apellido',
                'identificacion',
                'Cargo',
                'Departamento',
                'Periodo',
                'Fecha Liquidacion',
                'Duracion Trabajando',
                'Tipo Contrato',
                'Tipo de Liquidacion',
                'Salario Mayor',
                'Salario U. 30 Dias',
                'Salario U. 6 meses',
                'Salario U. 5 años',
                'Salario Nominal',
                'Dias Vac. Acumuladas',
                'Vacaciones Provisionales',
                'XIII Proporcional',
                'Preaviso',
                'Prima Antiguedad',
                'Indemnizacion',
                'Cesantía',
                'Total Liquidacion Bruta',
                'SS Vac Prov.',
                'SS XIII Prop.',
                'SE Vac Prov.',
                'Devolucion ISLR',
                'Descuento Acreedores',
                'Total Deduciones',
                'Total Liq. Neta',
                'SS Patron Vacas',
                'SE Patron Vacas',
                'SS Patron XIII',
                'Total Deducciones Patronales',
                'Total Gasto Patron'

                ]
           
            lista_prestacion.insert(0,lista_cabecera)
            
            wb= Workbook()
            ws=wb.active
            ws.title='Prestaciones'
            for i in range(len(lista_prestacion)):
            
                ROW=i+1
                for y in range(len(lista_prestacion[i])):
                    COLUMN=y+1
                    valor=lista_prestacion[i][y]
                    ws.cell(row=ROW, column=COLUMN,value=valor) 
            
           
            wb=fun_liquidacion_completa_cosmetic(wb,'Prestaciones')

          
            empresa='GoCleaning/' 
            path=empresa+'archivos/'        
            
            nombre_archivo=path+'Prestaciones_del'+str(inicio)+'_al_'+final+'.xlsx'
            excel_buffer = BytesIO()

            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo Planilla Completa Colaboradores COMPLETO' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo Planilla Completa Colaboradores COMPLETO',file=archivo_temporal)
            
            excel_buffer.close()

           




        
        return render(request, "ver_reporte_liquidacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": 'Descargue Excel Del SIPE para pago de nomina quincela', 'inicio':inicio, 'final':final ,'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method , 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def comprobantes_pagos(request):  
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year
    if fecha <= 15:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago='15-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte='10-'+str(mes)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        ultimo_dia_mes = calendar.monthrange(fecha_actual.year, fecha_actual.month)[1]
        fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte='25-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        lista_final=[]
        palabra_a_excluir = "Administrativo"
        if nivel >3:
            lista_supervisor= Colaboradores.objects.filter(pk= user_profile_obj.Colaborador.pk )
            lista_colaboradores=Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk, Status__icontains='Activo') | lista_supervisor
        else:
            lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')


        lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
        lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
        lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

# Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
        for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)
        
        
        return render(request, "comprobantes_pagos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'request':request.method , 'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla})
    
    elif request.method=='POST':

        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        try:
            if 'mes' in values: #planilla sacar periodo 
                Quater=request.POST["quincena"]
                month=request.POST["mes"]
                year=request.POST["year"]
                planilla=Quater+'-'+month+'-'+year
                lista_planilla=planilla.split('-')
                Quater=lista_planilla[0]
                Quater=Quater.replace('Q','')
                Quater=int(Quater)
                mes=int(lista_planilla[1])
                year=int(lista_planilla[2])
                if Quater==1:
                    inicio_corte=26
                    final_corte=10
                    fecha_pago=15
                    if mes==1:
                        mes_inicial=12
                        year_inicial=year-1
                    else:
                        mes_inicial=mes-1
                        year_inicial=year
                    
                else:
                    inicio_corte=11
                    final_corte=25
                    mes_inicial=mes
                    year_inicial=year
                    fecha_pago = calendar.monthrange(year_inicial, mes_inicial)[1]

            
                fecha_pago_date=datetime(year, mes, fecha_pago)    

                fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
                fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
                

                fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
                fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
                
                
                fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

                

                if nivel >3:
                    lista_supervisor= Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk= user_profile_obj.Colaborador.pk , Periodo=planilla)
                    lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla , Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk ) | lista_supervisor
                else:
                    lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla)
                

                lista_ausencia_final=[]
                Empresa= "Go Services S.A"
                Quincena_str="PERIODO: "+planilla
                rango='DEL '+fecha_inicial_corte_str+' AL '+fecha_final_corte_str
                EMISION='FECHA EMISION: '+fecha_pago_str

                lista_excel=[]
                lista_vacaciones=[]
                lista_Bonos=[]
                lista_XIII=[]

                for plan_quincena in lista_planilla1:
                        nombre=plan_quincena.Colaborador.Colaborador_nombre+' '+plan_quincena.Colaborador.Colaborador_apellido
                        nombre=nombre.upper()
                        cedula= plan_quincena.Colaborador.Nro_Identificacion
                        cargo=plan_quincena.Colaborador.Cargo.upper()
                        Sueldo_nominal= round(plan_quincena.Sueldo_quincenal,2)
                        Rata_por_HR= round(plan_quincena.Sueldo_HR,2)
                        Sueldo_base_quincenal = round(plan_quincena.Pago_quincena_despues_descuento - (plan_quincena.Pago_Dias_Trabajo_Feriado_descanso+plan_quincena.Pago_Dias_Trabajo_Feriado+plan_quincena.Pago_Dias_Trabajo_Descanso+plan_quincena.Pago_Dias_Trabajo_HR_Regulares_Adicionales+plan_quincena.Pago_Incapacidad+plan_quincena.Pago_Licencia_paga+plan_quincena.Pago_Total_Sobretiempo_quincenal+plan_quincena.Pago_Bono_con_Impuesto)+plan_quincena.Pago_Dia_ausencia+plan_quincena.Pago_MIN_Ausencia ,2)
                        Pago_Dias_Trabajo_Feriado_descanso  = round(plan_quincena.Pago_Dias_Trabajo_Feriado_descanso,2)
                        Pago_Dias_Trabajo_Feriado  =round(plan_quincena.Pago_Dias_Trabajo_Feriado,2)
                        Pago_Dias_Trabajo_Descanso  = round(plan_quincena.Pago_Dias_Trabajo_Descanso,2)
                        Pago_Dias_Trabajo_HR_Regulares_Adicionales  = round(plan_quincena.Pago_Dias_Trabajo_HR_Regulares_Adicionales,2)
                        Pago_Incapacidad  = round(plan_quincena.Pago_Incapacidad,2)
                        Pago_Licencia_paga  = round(plan_quincena.Pago_Licencia_paga,2)
                        Pago_Total_Sobretiempo_quincenal  = round(plan_quincena.Pago_Total_Sobretiempo_quincenal,2)
                        Pago_Bono_con_Impuesto  = round(plan_quincena.Pago_Bono_con_Impuesto,2)
                        Pago_Dia_ausencia  = round(plan_quincena.Pago_Dia_ausencia,2)
                        Pago_MIN_Ausencia  = round(plan_quincena.Pago_MIN_Ausencia,2)
                        Deduccion_con_Impuesto  = round(plan_quincena.Deduccion_con_Impuesto,2)
                        Pago_quincena_despues_descuento  = round(plan_quincena.Pago_quincena_despues_descuento,2)
                        Deduccion_Seguro_Social  = round(plan_quincena.Deduccion_Seguro_Social,2)
                        Deduccion_Seguro_Educacional  = round(plan_quincena.Deduccion_Seguro_Educacional,2)
                        Deduccion_ISLR  = round(plan_quincena.Deduccion_ISLR,2)
                        Total_deduciones_Ley  = round(plan_quincena.Total_deduciones_Ley,2)
                        Descuento_Acreedores_Hipotecario  = round(plan_quincena.Descuento_Acreedores_Hipotecario,2)
                        Descuento_Acreedores_Empresa  = round(plan_quincena.Descuento_Acreedores_Empresa,2)
                        Deduccion_sin_Impuesto  = round(plan_quincena.Deduccion_sin_Impuesto,2)
                        Pago_Sueldo_neto = round(plan_quincena.Pago_Sueldo_neto,2)
                        Pago_total_bonos_sin_impuesto  = round(plan_quincena.Pago_total_bonos_sin_impuesto,2)
                        Pago_Vacaciones  = round(plan_quincena.Pago_Vacaciones,2)
                        Vacaciones_Seguro_Social  = round(plan_quincena.Vacaciones_Seguro_Social,2)
                        Vacaciones_Seguro_educacion  = round(plan_quincena.Vacaciones_Seguro_educacion,2)
                        Vacaciones_ISLR  = round(plan_quincena.Vacaciones_ISLR,2)
                        Deducion_Vacaciones_Totales  = round(plan_quincena.Deducion_Vacaciones_Totales,2)
                        Pago_Vacaciones_Neto  = round(plan_quincena.Pago_Vacaciones_Neto,2)
                        Decimo_xiii_quincena_Bruto  = round(plan_quincena.Pago_XIII_periodo_Bruto,2)
                        Deduccion_Seg_social_decimo  = round(plan_quincena.Pago_XIII_periodo_Seguro_Social,2)
                        Deduccion_ISLR_Decimmo_xiii  = round(plan_quincena.Pago_XIII_periodo_ISLR,2)
                        Decimo_xiii_quincena_Neto  = round(plan_quincena.Pago_XIII_periodo_Neto,2)
                        dias_Vacas=plan_quincena.Dias_Vacaciones

                        #empezar agregar lista para excel 
                        if True: #lista excel
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','',Empresa,'','','','','','','Planilla Quincenal','','','',''])
                            lista_excel.append(['','','','','','COMPROBANTE DE PAGO','','','','','','','',''])
                            lista_excel.append(['','','','','',Quincena_str,'','','','','','','',''])
                            lista_excel.append(['','','','','',rango,'','','','','','','',''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','','','','',EMISION,'','','','','','','',''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','','EMPLEADO:','','',nombre,'','','Nro. IDENTIFICACION:',cedula,'','','',''])
                            lista_excel.append(['','','CARGO DESEMPEÑADO:','','',cargo,'','','','','','',''])
                            lista_excel.append(['','','SALARIO NOMINAL:','','','$'+str(Sueldo_nominal*2),'','','POR HORA:',Rata_por_HR,'','','',''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','','<<CONCEPTO>>','','','<<INGRESOS>>','<<DEDUCCIONES>>','','<<DESCUENTOS>>','','','','',''])
                            lista_excel.append(['','','SALARIO REGULAR:','','',Sueldo_base_quincenal,'','','SEGURO SOCIAL 9.75% :','','','',Deduccion_Seguro_Social,''])
                            lista_excel.append(['','','FERIADOS C/ DIA DESCANSO:','','',Pago_Dias_Trabajo_Feriado_descanso,'','','SEGURO EDUCATIVO 1.25% :','','','',Deduccion_Seguro_Educacional,''])
                            lista_excel.append(['','','FERIADOS: ','','',Pago_Dias_Trabajo_Feriado,'','','ISLR','','','',Deduccion_ISLR,''])
                            lista_excel.append(['','','DOMINGO O DIA DE DESCANSO:','','',Pago_Dias_Trabajo_Descanso,'','','ACREEDORES ( BANCOS ):','','','',Descuento_Acreedores_Hipotecario,''])
                            lista_excel.append(['','','SALARIO HORAS ADICIONAL:','','',Pago_Dias_Trabajo_HR_Regulares_Adicionales,'','','ACREEDORES ( EMPRESA ):','','','',Descuento_Acreedores_Empresa,''])
                            lista_excel.append(['','','INCAPACIDAD:','','',Pago_Incapacidad,'','','OTRAS DEDUCCIONES:','','','',Deduccion_sin_Impuesto,''])
                            lista_excel.append(['','','LICENCIA PAGA:','','',Pago_Licencia_paga,'','','','','','','',''])
                            lista_excel.append(['','','SOBRETIEMPO:','','',Pago_Total_Sobretiempo_quincenal,'','','','','','','',''])
                            lista_excel.append(['','','VIATICOS/BONOS:','','',Pago_Bono_con_Impuesto,'','','','','','','',''])
                            lista_excel.append(['','','AUSENCIAS:','','','',round(Pago_Dia_ausencia+Pago_MIN_Ausencia,2),'','','','','','',''])
                            lista_excel.append(['','','OTROS DESCUENTOS:','','','',Deduccion_con_Impuesto,'','','','','','',''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','','TOTAL INGRESOS:','','',Pago_quincena_despues_descuento,'','','TOTAL DESCUENTOS:','','','',round(Pago_quincena_despues_descuento-Pago_Sueldo_neto,2),''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','','','','','','','','NETO A PAGAR:','','','$'+str(Pago_Sueldo_neto),'',''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                            lista_excel.append(['','','','','','','','','','','','','',''])
                        
                        if dias_Vacas>0:
                            
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','',Empresa,'','','','','','','Planilla Quincenal','','','',''])
                            lista_vacaciones.append(['','','','','','COMPROBANTE DE PAGO VACACIONES','','','','','','','',''])
                            lista_vacaciones.append(['','','','','',Quincena_str,'','','','','','','',''])
                            lista_vacaciones.append(['','','','','',rango,'','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','',EMISION,'','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','EMPLEADO:','','',nombre,'','','Nro. IDENTIFICACION:',cedula,'','','',''])
                            lista_vacaciones.append(['','','CARGO DESEMPEÑADO:','','',cargo,'','','','','','',''])
                            lista_vacaciones.append(['','','SALARIO NOMINAL:','','','$'+str(Sueldo_nominal*2),'','','POR HORA:',Rata_por_HR,'','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','<<CONCEPTO>>','','','<<INGRESOS>>','<<DEDUCCIONES>>','','<<DESCUENTOS>>','','','','',''])
                            lista_vacaciones.append(['','','VACACIONES ( '+str(dias_Vacas)+' DIAS ):','','',Pago_Vacaciones,'','','SEGURO SOCIAL 9.75% :','','','',Vacaciones_Seguro_Social,''])
                            lista_vacaciones.append(['','','','','','','','','SEGURO EDUCATIVO 1.25% :','','','',Vacaciones_Seguro_educacion,''])
                            lista_vacaciones.append(['','','','','','','','','ISLR','','','',Vacaciones_ISLR,''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','TOTAL INGRESOS:','','',Pago_Vacaciones,'','','TOTAL DESCUENTOS:','','','',Deducion_Vacaciones_Totales,''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','NETO A PAGAR:','','','$'+str(Pago_Vacaciones_Neto),'',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                            lista_vacaciones.append(['','','','','','','','','','','','','',''])
                        
                        if Pago_total_bonos_sin_impuesto>0:
                            
                            
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','',Empresa,'','','','','','','Planilla Quincenal','','','',''])
                            lista_Bonos.append(['','','','','','COMPROBANTE DE PAGO BONOS','','','','','','','',''])
                            lista_Bonos.append(['','','','','',Quincena_str,'','','','','','','',''])
                            lista_Bonos.append(['','','','','',rango,'','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','',EMISION,'','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','EMPLEADO:','','',nombre,'','','Nro. IDENTIFICACION:',cedula,'','','',''])
                            lista_Bonos.append(['','','CARGO DESEMPEÑADO:','','',cargo,'','','','','','',''])
                            lista_Bonos.append(['','','SALARIO NOMINAL:','','','$'+str(Sueldo_nominal*2),'','','POR HORA:',Rata_por_HR,'','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','<<CONCEPTO>>','','','<<INGRESOS>>','<<DEDUCCIONES>>','','<<DESCUENTOS>>','','','','',''])
                            lista_Bonos.append(['','','BONOS/VIATICOS/OTROS PAGOS:','','',Pago_total_bonos_sin_impuesto,'','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','TOTAL INGRESOS:','','',Pago_total_bonos_sin_impuesto,'','','TOTAL DESCUENTOS:','','','','0.00',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','NETO A PAGAR:','','','$'+str(Pago_total_bonos_sin_impuesto),'',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                            lista_Bonos.append(['','','','','','','','','','','','','',''])
                        
                        if Decimo_xiii_quincena_Bruto>0:
                            
                            
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','',Empresa,'','','','','','','Planilla Quincenal','','','',''])
                            lista_XIII.append(['','','','','','COMPROBANTE DE PAGO XIII','','','','','','','',''])
                            lista_XIII.append(['','','','','',Quincena_str,'','','','','','','',''])
                            lista_XIII.append(['','','','','',rango,'','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','',EMISION,'','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','EMPLEADO:','','',nombre,'','','Nro. IDENTIFICACION:',cedula,'','','',''])
                            lista_XIII.append(['','','CARGO DESEMPEÑADO:','','',cargo,'','','','','','',''])
                            lista_XIII.append(['','','SALARIO NOMINAL:','','','$'+str(Sueldo_nominal*2),'','','POR HORA:',Rata_por_HR,'','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','<<CONCEPTO>>','','','<<INGRESOS>>','<<DEDUCCIONES>>','','<<DESCUENTOS>>','','','','',''])
                            lista_XIII.append(['','','XIII MES ACUMULADO :','','',Decimo_xiii_quincena_Bruto,'','','SEGURO SOCIAL 7.25% :','','','',Deduccion_Seg_social_decimo,''])
                            lista_XIII.append(['','','','','','','','','ISLR','','','',Deduccion_ISLR_Decimmo_xiii,''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','TOTAL INGRESOS:','','',Decimo_xiii_quincena_Bruto,'','','TOTAL DESCUENTOS:','','','',Deduccion_Seg_social_decimo+Deduccion_ISLR_Decimmo_xiii,''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','NETO A PAGAR:','','','$'+str(Decimo_xiii_quincena_Neto),'',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                            lista_XIII.append(['','','','','','','','','','','','','',''])
                        
                            
                #HACER EXCEL
                
                wb= Workbook()
                ws=wb.active
                ws.title='Comprobante Planilla'
                for i in range(len(lista_excel)):
                
                    ROW=i+1
                    for y in range(len(lista_excel[i])):
                        COLUMN=y+1
                        valor=lista_excel[i][y]
                        ws.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=estetica_comprobantes_pago(wb,'Comprobante Planilla')

                if len(lista_vacaciones)>0:
                    hoja_2 = wb.create_sheet(title="Comprobantes Vacaciones")
                    for i in range(len(lista_vacaciones)):
                
                        ROW=i+1
                        for y in range(len(lista_vacaciones[i])):
                            COLUMN=y+1
                            valor=lista_vacaciones[i][y]
                            hoja_2.cell(row=ROW, column=COLUMN,value=valor) 
                            
                    wb=estetica_comprobantes_pago(wb,'Comprobantes Vacaciones')


                if len(lista_Bonos)>0:
                    hoja_3 = wb.create_sheet(title="Comprobantes Bonos")
                    for i in range(len(lista_Bonos)):
                
                        ROW=i+1
                        for y in range(len(lista_Bonos[i])):
                            COLUMN=y+1
                            valor=lista_Bonos[i][y]
                            hoja_3.cell(row=ROW, column=COLUMN,value=valor) 
                            
                    wb=estetica_comprobantes_pago(wb,'Comprobantes Bonos')

                if len(lista_XIII)>0:
                    hoja_4 = wb.create_sheet(title="Comprobantes XIII")
                    for i in range(len(lista_XIII)):
                
                        ROW=i+1
                        for y in range(len(lista_XIII[i])):
                            COLUMN=y+1
                            valor=lista_XIII[i][y]
                            hoja_4.cell(row=ROW, column=COLUMN,value=valor) 
                            
                    wb=estetica_comprobantes_pago(wb,'Comprobantes XIII')


                empresa='GoCleaning/' 
                path=empresa+'archivos/'        
                
                nombre_archivo=path+'Comprobantes_del_'+fecha_pago_str+'_.xlsx'
                excel_buffer = BytesIO()
                wb.save(excel_buffer)
                nombre_archivo_excel=nombre_archivo
                archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                    
                try:
                            objetc_archivo = Archivos.objects.get(nombre='Archivo Comprobante de Pago COMPLETO' )
                            objetc_archivo.file=archivo_temporal
                            objetc_archivo.save()
                except: 
                            objetc_archivo = Archivos.objects.create(nombre='Archivo Comprobante de Pago COMPLETO',file=archivo_temporal)
                
                excel_buffer.close()
        

                   
        
            return render(request, "comprobantes_pagos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method ,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,})

        
        except Exception as e:
            print("Se produjo una excepción:", type(e).__name__, "-", e)
            # Imprimir la información de la traza de la excepción
            traceback.print_exc()
            print(traceback.print_exc(), 'print')
            print("Archivo:", e.__traceback__.tb_frame.f_code.co_filename)
            print("Línea:", e.__traceback__.tb_lineno)   


def reporte_cliente(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_finalL=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

    lista_clientes_activos=Info_Clientes.objects.filter(status='Activo')


        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_clientes_activos)):
            
            lista=[lista_clientes_activos[i].pk,
                   lista_clientes_activos[i].Codigo_cliente,
                   lista_clientes_activos[i].nombre_empresa,
                   lista_clientes_activos[i].Cedula_Juridica,
                  
                   ]
              
                        
            lista_finalL.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_reporte_cliente_planilla.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_clientes_activos)-1,'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        

        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
           
            lista_planilla1=Panilla_por_periodo_quincenal_clientes.objects.filter(Fecha_pago_quincena__gte=fecha_inicial_corte.date(), Fecha_pago_quincena__lte=fecha_final_corte.date())
            
            lista_colaboradores_1= []
            lista_archivo_excel = []
            lista_excel_Planilla=[]
            lista_excel_Vacaciones=[]
            lista_excel_XIII=[]
            lista_excel_Bonos=[]

            lista_Aporte_Patronal=[]
            lista_excel_Sipe_vs_AP=[]
            lista_excel_provisiones=[]
            Lista_EXCEL_Steph_asiento=[]


            for plan in lista_planilla1:
                 id_colaborador=  plan.Cliente.pk
                 if id_colaborador not in lista_colaboradores_1 :
                      lista_colaboradores_1.append (id_colaborador) 
            
            for i in range (len(lista_colaboradores_1)) :
                lista_colaborador_rango = lista_planilla1.filter(Cliente__pk=lista_colaboradores_1[i])
                Sueldo_base_quincenal = 0
                Pago_Dias_Trabajo_Feriado_descanso = 0
                Pago_Dias_Trabajo_Feriado = 0
                Pago_Dias_Trabajo_Descanso = 0
                Pago_Dias_Trabajo_HR_Regulares_Adicionales = 0
                Pago_Incapacidad = 0
                Pago_Licencia_paga = 0
                Pago_Total_Sobretiempo_quincenal = 0
                Pago_Bono_con_Impuesto = 0
                Pago_Dia_ausencia = 0
                Pago_MIN_Ausencia = 0
                Deduccion_con_Impuesto = 0
                Pago_quincena_despues_descuento = 0
                Deduccion_Seguro_Social = 0
                Deduccion_Seguro_Educacional = 0
                Deduccion_ISLR = 0
                Total_deduciones_Ley = 0
                Descuento_Acreedores_Hipotecario = 0
                Descuento_Acreedores_Empresa = 0
                Deduccion_sin_Impuesto = 0
                Pago_Sueldo_neto = 0
                Pago_total_bonos_sin_impuesto = 0
                Dias_Vacaciones = 0
                Pago_Vacaciones = 0
                Vacaciones_Seguro_Social = 0
                Vacaciones_Seguro_educacion = 0
                Vacaciones_ISLR = 0
                Deducion_Vacaciones_Totales = 0
                Pago_Vacaciones_Neto = 0
                Decimo_xiii_quincena_Bruto = 0
                Deduccion_Seg_social_decimo = 0
                Deduccion_ISLR_Decimmo_xiii = 0
                Decimo_xiii_quincena_Neto = 0
                Deduccion_Seg_social_Patron = 0
                Vacaciones_Seguro_Social_patron = 0
                Deduccion_Seguro_Educacional_Patron = 0
                Vacaciones_Seguro_educacion_patron = 0
                Deduccion_Seg_social_decimo_Patron = 0
                Prima_Antiguedad_Patron = 0
                Vacacionciones_Acumuladas_Patron = 0
                Riesgo_Profesional_Patron = 0
                Totales_patronales = 0
                Total_general_sueldo = 0

                #nuevo agregados
                Pago_XIII_periodo_Bruto = 0
                Pago_XIII_periodo_Seguro_Social = 0
                Pago_XIII_periodo_ISLR = 0
                Pago_XIII_periodo_Neto = 0
                Deduccion_XIII_periodo_Seguro_social_patron = 0

                if True: #Liquidacion
                    obj_liquidacionesssss=Liquidaciones_Clientes.objects.filter(Cliente__pk=lista_colaboradores_1[i], Fecha_pago_liquidacion__gte=fecha_inicial_corte.date(), Fecha_pago_liquidacion__lte=fecha_final_corte.date()) 
                    lista_descartar=[]    
                    
                    try:
                      for obj_liquidaciones in obj_liquidacionesssss:
                        
                        #print('si hay', obj_liquidaciones.Cliente.nombre_empresa)
                        lista_descartar.append([obj_liquidaciones.Cliente.pk, obj_liquidaciones.Colaborador.pk, obj_liquidaciones.Periodo])
                        Pago_Vacaciones +=obj_liquidaciones.Vacaciones_Provisionales_Brutas
                        Vacaciones_Seguro_Social +=obj_liquidaciones.Seguro_Social_Provisiones_Vacas
                        Vacaciones_Seguro_educacion +=obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas
                
                        Deducion_Vacaciones_Totales += obj_liquidaciones.Seguro_Social_Provisiones_Vacas + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas
                        Pago_Vacaciones_Neto += obj_liquidaciones.Vacaciones_Provisionales_Brutas - ( obj_liquidaciones.Seguro_Social_Provisiones_Vacas + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas)
                
                        Pago_XIII_periodo_Bruto +=obj_liquidaciones.Decimo_Provisional_Bruto
                        Pago_XIII_periodo_Seguro_Social += obj_liquidaciones.Seguro_Social_Decimo_Provisiones
                
                        Pago_XIII_periodo_Neto += obj_liquidaciones.Decimo_Provisional_Bruto - obj_liquidaciones.Seguro_Social_Decimo_Provisiones

                        # Decimo provisio en cero porque estara despedido
                        '''
                        #Quitar vacaciones de liquidacion en provision
                        Vacacionciones_Acumuladas_Patron  -= plan_quincena.Vacacionciones_Acumuladas_Patron'''


                        Deduccion_XIII_periodo_Seguro_social_patron += obj_liquidaciones.Seguro_Social_Decimo_Provisiones_Patron

                        Vacaciones_Seguro_Social_patron += obj_liquidaciones.Seguro_Social_Provisiones_Vacas_Patron
                
                        Vacaciones_Seguro_educacion_patron += obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas_Patron

                        #Riesgos Profesionales
                        vacaciones_riesgos_profesionales = obj_liquidaciones.Vacaciones_Provisionales_Brutas*0.021
                        Riesgo_Profesional_Patron  += vacaciones_riesgos_profesionales
                        
                        Totales_patronales += obj_liquidaciones.Seguro_Social_Decimo_Provisiones_Patron + obj_liquidaciones.Seguro_Social_Provisiones_Vacas_Patron + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas_Patron  + vacaciones_riesgos_profesionales
                        
                        Total_general_sueldo  +=  obj_liquidaciones.Seguro_Social_Decimo_Provisiones_Patron + obj_liquidaciones.Seguro_Social_Provisiones_Vacas_Patron + obj_liquidaciones.Seguro_Educativo_Proviciones_Vacas_Patron    + obj_liquidaciones.Vacaciones_Provisionales_Brutas +obj_liquidaciones.Decimo_Provisional_Bruto +vacaciones_riesgos_profesionales
                    
                    except:
                        a=1
                
                

            # inicio de guardar datos por colaborador # 
                for plan_quincena in lista_colaborador_rango: 
                    cliente_id=plan_quincena.Cliente.pk
                    colaborador_id=plan_quincena.Colaborador.pk
                    per = plan_quincena.Periodo
                    bool_liquidacion=True
                    


                    Sueldo_base_quincenal += plan_quincena.Pago_quincena_despues_descuento - (plan_quincena.Pago_Dias_Trabajo_Feriado_descanso+plan_quincena.Pago_Dias_Trabajo_Feriado_descanso+plan_quincena.Pago_Dias_Trabajo_Descanso+plan_quincena.Pago_Dias_Trabajo_HR_Regulares_Adicionales+plan_quincena.Pago_Incapacidad+plan_quincena.Pago_Licencia_paga+plan_quincena.Pago_Total_Sobretiempo_quincenal+plan_quincena.Pago_Bono_con_Impuesto)+plan_quincena.Pago_Dia_ausencia+plan_quincena.Pago_MIN_Ausencia
                    Pago_Dias_Trabajo_Feriado_descanso  += plan_quincena.Pago_Dias_Trabajo_Feriado_descanso
                    Pago_Dias_Trabajo_Feriado  += plan_quincena.Pago_Dias_Trabajo_Feriado_descanso
                    Pago_Dias_Trabajo_Descanso  += plan_quincena.Pago_Dias_Trabajo_Descanso
                    Pago_Dias_Trabajo_HR_Regulares_Adicionales  += plan_quincena.Pago_Dias_Trabajo_HR_Regulares_Adicionales
                    Pago_Incapacidad  += plan_quincena.Pago_Incapacidad
                    Pago_Licencia_paga  += plan_quincena.Pago_Licencia_paga
                    Pago_Total_Sobretiempo_quincenal  += plan_quincena.Pago_Total_Sobretiempo_quincenal
                    Pago_Bono_con_Impuesto  += plan_quincena.Pago_Bono_con_Impuesto
                    Pago_Dia_ausencia  += plan_quincena.Pago_Dia_ausencia
                    Pago_MIN_Ausencia  += plan_quincena.Pago_MIN_Ausencia
                    Deduccion_con_Impuesto  += plan_quincena.Deduccion_con_Impuesto
                    Pago_quincena_despues_descuento  += plan_quincena.Pago_quincena_despues_descuento
                    Deduccion_Seguro_Social  += plan_quincena.Deduccion_Seguro_Social
                    Deduccion_Seguro_Educacional  += plan_quincena.Deduccion_Seguro_Educacional
                    Deduccion_ISLR  += plan_quincena.Deduccion_ISLR
                    Total_deduciones_Ley  += plan_quincena.Total_deduciones_Ley
                    Descuento_Acreedores_Hipotecario  += plan_quincena.Descuento_Acreedores_Hipotecario
                    Descuento_Acreedores_Empresa  += plan_quincena.Descuento_Acreedores_Empresa
                    Deduccion_sin_Impuesto  += plan_quincena.Deduccion_sin_Impuesto
                    Pago_Sueldo_neto  += plan_quincena.Pago_Sueldo_neto
                    Pago_total_bonos_sin_impuesto  += plan_quincena.Pago_total_bonos_sin_impuesto
                    Dias_Vacaciones+=plan_quincena.Dias_Vacaciones
                    Pago_Vacaciones  += plan_quincena.Pago_Vacaciones
                    Vacaciones_Seguro_Social  += plan_quincena.Vacaciones_Seguro_Social
                    Vacaciones_Seguro_educacion  += plan_quincena.Vacaciones_Seguro_educacion
                    Vacaciones_ISLR  += plan_quincena.Vacaciones_ISLR
                    Deducion_Vacaciones_Totales  += plan_quincena.Deducion_Vacaciones_Totales
                    Pago_Vacaciones_Neto  += plan_quincena.Pago_Vacaciones_Neto
                    if bool_liquidacion:
                        Decimo_xiii_quincena_Bruto  += plan_quincena.Decimo_xiii_quincena_Bruto
                    if bool_liquidacion:    
                        Deduccion_Seg_social_decimo  += plan_quincena.Deduccion_Seg_social_decimo
                    if bool_liquidacion:     
                        Deduccion_ISLR_Decimmo_xiii  += plan_quincena.Deduccion_ISLR_Decimmo_xiii
                    if bool_liquidacion: 
                        Decimo_xiii_quincena_Neto  += plan_quincena.Decimo_xiii_quincena_Neto

                    Deduccion_Seg_social_Patron  += plan_quincena.Deduccion_Seg_social_Patron
                    Vacaciones_Seguro_Social_patron  += plan_quincena.Vacaciones_Seguro_Social_patron
                    Deduccion_Seguro_Educacional_Patron  += plan_quincena.Deduccion_Seguro_Educacional_Patron
                    Vacaciones_Seguro_educacion_patron  += plan_quincena.Vacaciones_Seguro_educacion_patron
                    if bool_liquidacion: 
                        Deduccion_Seg_social_decimo_Patron  += plan_quincena.Deduccion_Seg_social_decimo_Patron

                    if bool_liquidacion: 
                        Prima_Antiguedad_Patron  += plan_quincena.Prima_Antiguedad_Patron
                    if bool_liquidacion: 
                        Vacacionciones_Acumuladas_Patron  += plan_quincena.Vacacionciones_Acumuladas_Patron
                    
                    Riesgo_Profesional_Patron  += plan_quincena.Riesgo_Profesional_Patron

                    
                    Totales_patronales  += plan_quincena.Totales_patronales
                    Total_general_sueldo  += plan_quincena.Total_general_sueldo

                    

                    #nuevos agregado
                    Pago_XIII_periodo_Bruto += plan_quincena.Pago_XIII_periodo_Bruto
                    Pago_XIII_periodo_Seguro_Social  += plan_quincena.Pago_XIII_periodo_Seguro_Social
                    Pago_XIII_periodo_ISLR  += plan_quincena.Pago_XIII_periodo_ISLR
                    Pago_XIII_periodo_Neto  += plan_quincena.Pago_XIII_periodo_Neto
                    Deduccion_XIII_periodo_Seguro_social_patron  += plan_quincena.Deduccion_XIII_periodo_Seguro_social_patron
                    Dia_sueldo=plan_quincena.Sueldo_Diario
                
                #si hubo liquidacion tambien hacerlo
            
                
                
                #fin estudio
                        
                Nombre_apellido=lista_colaborador_rango[0].Cliente.nombre_empresa
                numero_identificacion = lista_colaborador_rango[0].Cliente.Codigo_cliente

                lista_linea = [i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Sueldo_base_quincenal,2),
                round(Pago_Dias_Trabajo_Feriado_descanso,2),
                round(Pago_Dias_Trabajo_Feriado,2),
                round(Pago_Dias_Trabajo_Descanso,2),
                round(Pago_Dias_Trabajo_HR_Regulares_Adicionales,2),
                round(Pago_Incapacidad,2),
                round(Pago_Licencia_paga,2),
                
                round(Pago_Bono_con_Impuesto,2),
                round(Pago_Dia_ausencia,2),
                round(Pago_MIN_Ausencia,2),
                round(Deduccion_con_Impuesto,2),
                
                round(Pago_quincena_despues_descuento-Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_quincena_despues_descuento,2),
                round(Deduccion_Seguro_Social,2),
                round(Deduccion_Seguro_Educacional,2),
                round(Deduccion_ISLR,2),
                round(Total_deduciones_Ley,2),
                round(Descuento_Acreedores_Hipotecario,2),
                round(Descuento_Acreedores_Empresa,2),
                round(Deduccion_sin_Impuesto,2),
                round(Pago_Sueldo_neto,2),
                round(Pago_total_bonos_sin_impuesto,2),
                round(Pago_Vacaciones,2),
                round(Vacaciones_Seguro_Social,2),
                round(Vacaciones_Seguro_educacion,2),
                round(Vacaciones_ISLR,2),
                round(Deducion_Vacaciones_Totales,2),
                round(Pago_Vacaciones_Neto,2),
                #aqui se Agrega Decimo XIII Pago en Planilla
                round(Pago_XIII_periodo_Bruto,2),
                round(Pago_XIII_periodo_Seguro_Social,2),
                round(Pago_XIII_periodo_ISLR,2),
                round(Pago_XIII_periodo_Neto,2),
                
                #continua
                round(Decimo_xiii_quincena_Bruto,2),
                round(Deduccion_Seg_social_decimo,2),
                round(Deduccion_ISLR_Decimmo_xiii,2),
                round(Decimo_xiii_quincena_Neto,2),
                round(Deduccion_Seg_social_Patron,2),
                round(Vacaciones_Seguro_Social_patron,2),
                #
                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                #
                round(Deduccion_Seguro_Educacional_Patron,2),
                round(Vacaciones_Seguro_educacion_patron,2),
                round(Deduccion_Seg_social_decimo_Patron,2),
                round(Prima_Antiguedad_Patron,2), 
                round(Vacacionciones_Acumuladas_Patron,2),
                round(Riesgo_Profesional_Patron,2),
                round(Totales_patronales,2),
                round(Total_general_sueldo,2)
                               ]
                
                lista_para_colaboradores=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Sueldo_base_quincenal,2),
                round(Pago_Dias_Trabajo_Feriado_descanso,2),
                round(Pago_Dias_Trabajo_Feriado,2),
                round(Pago_Dias_Trabajo_Descanso,2),
                round(Pago_Dias_Trabajo_HR_Regulares_Adicionales,2),
                round(Pago_Incapacidad,2),
                round(Pago_Licencia_paga,2),
                
                round(Pago_Bono_con_Impuesto,2),
                round(Pago_Dia_ausencia,2),
                round(Pago_MIN_Ausencia,2),
                round(Deduccion_con_Impuesto,2),
                
                round(Pago_quincena_despues_descuento-Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_Total_Sobretiempo_quincenal,2),
                round(Pago_quincena_despues_descuento,2),
                round(Deduccion_Seguro_Social,2),
                round(Deduccion_Seguro_Educacional,2),
                round(Deduccion_ISLR,2),
                round(Total_deduciones_Ley,2),
                round(Descuento_Acreedores_Hipotecario,2),
                round(Descuento_Acreedores_Empresa,2),
                round(Deduccion_sin_Impuesto,2),
                round(Pago_Sueldo_neto,2)
                ]
                
                lista_vacas=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Dia_sueldo,2),
                Dias_Vacaciones,
                round(Pago_Vacaciones,2),
                round(Vacaciones_Seguro_Social,2),
                round(Vacaciones_Seguro_educacion,2),
                round(Vacaciones_ISLR,2),
                round(Deducion_Vacaciones_Totales,2),
                round(Pago_Vacaciones_Neto,2),
                round(Vacaciones_Seguro_Social_patron,2),
                #
                round(Vacaciones_Seguro_educacion_patron,2),
                round(Pago_Vacaciones+Vacaciones_Seguro_Social_patron+Vacaciones_Seguro_educacion_patron,2)]

                lista_XIII=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Pago_XIII_periodo_Bruto,2),
                round(Pago_XIII_periodo_Seguro_Social,2),
                round(Pago_XIII_periodo_ISLR,2),
                round(Pago_XIII_periodo_Neto,2),
                #
                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                round(Pago_XIII_periodo_Bruto+Deduccion_XIII_periodo_Seguro_social_patron,2)]

                lista_BONOS=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                round(Pago_total_bonos_sin_impuesto,2),]

                lista_aporte_patronal=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                               round(Pago_quincena_despues_descuento,2),
                               round(Pago_Vacaciones,2),
                               round(Pago_XIII_periodo_Bruto,2),
                               
                               #seguros sociales
                               round(Deduccion_Seguro_Social,2),
                               round(Vacaciones_Seguro_Social,2),
                               round(Pago_XIII_periodo_Seguro_Social,2),
                               round(Deduccion_Seguro_Social+Vacaciones_Seguro_Social+Pago_XIII_periodo_Seguro_Social,2),
                               #seguro educacional
                                round(Deduccion_Seguro_Educacional,2),
                                round(Vacaciones_Seguro_educacion,2),
                                round(Deduccion_Seguro_Educacional+Vacaciones_Seguro_educacion,2),
                                #islr

                                round(Deduccion_ISLR,2),
                                round(Vacaciones_ISLR,2),
                                round(Pago_XIII_periodo_ISLR,2),
                                round(Deduccion_ISLR+Vacaciones_ISLR+Pago_XIII_periodo_ISLR,2),

                                #patronal SS
                                round(Deduccion_Seg_social_Patron,2),
                                round(Vacaciones_Seguro_Social_patron,2),
                                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                                round(Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron,2),
                                #patronm SE
                                round(Deduccion_Seguro_Educacional_Patron,2),
                                round(Vacaciones_Seguro_educacion_patron,2),
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron,2),
                                #rIESGO Profesionales
                                round(Riesgo_Profesional_Patron,2),
                                #total
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron+Deduccion_Seguro_Social+Vacaciones_Seguro_Social+Pago_XIII_periodo_Seguro_Social+Deduccion_Seguro_Educacional+Vacaciones_Seguro_educacion+ Deduccion_ISLR+Vacaciones_ISLR+Pago_XIII_periodo_ISLR+ Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron+Riesgo_Profesional_Patron,2),

                                ]

                lista_provisiones=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                               round(Pago_quincena_despues_descuento,2),
                               round(Pago_Vacaciones,2),
                               round(Decimo_xiii_quincena_Bruto,2),
                               round(Deduccion_Seg_social_decimo_Patron,2),
                               round(Prima_Antiguedad_Patron,2), 
                               round(Vacacionciones_Acumuladas_Patron,2),
                               round(Decimo_xiii_quincena_Bruto+Deduccion_Seg_social_decimo_Patron+Prima_Antiguedad_Patron+Vacacionciones_Acumuladas_Patron,2), 
                ]

                Lista_Steph_asiento=[i+1,
                               Nombre_apellido,
                               numero_identificacion,
                               round(Pago_quincena_despues_descuento,2),
                               round(Pago_Vacaciones,2),
                               round(Pago_XIII_periodo_Bruto,2),

                               #seguros sociales Patronales
                                round(Deduccion_Seg_social_Patron,2),
                                round(Vacaciones_Seguro_Social_patron,2),
                                round(Deduccion_XIII_periodo_Seguro_social_patron,2),
                                round(Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron,2),
                               #seguro educacional
                                #patronm SE
                                round(Deduccion_Seguro_Educacional_Patron,2),
                                round(Vacaciones_Seguro_educacion_patron,2),
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron,2),

                                #rIESGO Profesionales
                                round(Riesgo_Profesional_Patron,2),
                                #provisiones XIII
                                round(Decimo_xiii_quincena_Bruto,2),
                               round(Deduccion_Seg_social_decimo_Patron,2),
                                round(Deduccion_Seg_social_decimo_Patron+Decimo_xiii_quincena_Bruto,2),

                               #Provisiones PA
                               round(Prima_Antiguedad_Patron,2), 
                               #Provisiones VA
                               round(Vacacionciones_Acumuladas_Patron,2),
                                
                                
                                
                                #total
                                round(Deduccion_Seguro_Educacional_Patron+Vacaciones_Seguro_educacion_patron+ Deduccion_Seg_social_Patron+Vacaciones_Seguro_Social_patron+Deduccion_XIII_periodo_Seguro_social_patron+Riesgo_Profesional_Patron+Decimo_xiii_quincena_Bruto+Deduccion_Seg_social_decimo_Patron+Prima_Antiguedad_Patron+Vacacionciones_Acumuladas_Patron,2),

                                ]

                
                Lista_EXCEL_Steph_asiento.append(Lista_Steph_asiento)

                lista_archivo_excel.append(lista_linea)
                lista_excel_Planilla.append(lista_para_colaboradores)
                lista_excel_Vacaciones.append(lista_vacas)
                lista_excel_XIII.append(lista_XIII)
                lista_excel_Bonos.append(lista_BONOS)
                lista_Aporte_Patronal.append(lista_aporte_patronal)
                lista_excel_provisiones.append(lista_provisiones)
            #aportes Patronal vs SIPE
            Total_Pagar_AP=0
            Seguro_Social_AP=0
            Seguro_EDU_AP=0
            ISLR_Total=0
            Riesgo_Profesionales_AP=0
            for i in lista_Aporte_Patronal:
                Total_Pagar_AP+=i[-1]
                Seguro_Social_AP+=i[9]+i[20]
                Seguro_EDU_AP+=i[12]+i[23]
                ISLR_Total+=i[16]
                Riesgo_Profesionales_AP+=i[-2]

            lista_excel_Sipe_vs_AP.append(['SIPE vs Aportes Patronales',''])
            lista_excel_Sipe_vs_AP.append(['Concepto','Monto'])
            
            lista_excel_Sipe_vs_AP.append(['Total Seguro Social',round(Seguro_Social_AP,2)])
            lista_excel_Sipe_vs_AP.append(['Total Seguro Educacional',round(Seguro_EDU_AP,2)])
            lista_excel_Sipe_vs_AP.append(['Total ISLR',round(ISLR_Total,2)])
            lista_excel_Sipe_vs_AP.append(['Total Riesgo Profesionales',round(Riesgo_Profesionales_AP,2)])
            lista_excel_Sipe_vs_AP.append(['Totales Aportar',round(Total_Pagar_AP,2)])
            
            lista_cabecera=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Sueldo base quincenal',
                'Feriado con Dia descanso',
                'Feriado',
                'Domingo o Dia Descanso',
                'Horas Regulares Adicionales',
                'Incapacidad',
                'Licencia paga',
                
                'Bonificacion con Impuesto',
                'Dia ausencia',
                'Ausencia Dentro Jornada' ,
                'Deduccion con Impuesto',
                'Suelo Bruto Sin Sobretiempo'  ,
                'Sobretiempo',
                'Sueldo Bruto'  ,
                'Deduccion Seguro Social'  ,
                'Deduccion Seguro Educacional'  ,
                'Deduccion ISLR'  ,
                'Total deduciones Ley' ,
                'Descuento Acreedores Hipotecario'  ,
                'Descuento Acreedores Empresa'  ,
                'Deduccion sin Impuesto'  ,
                'Sueldo Neto'  ,
                'Bonificacion Sin Impuesto'  ,
                'Vacaciones'  ,
                'Vacaciones Seguro Social'  ,
                'Vacaciones Seguro educacion' ,
                'Vacaciones ISLR' ,
                'Deducion Vacaciones Totales'  ,
                'Vacaciones Netas'  ,
                'Pago XIII periodo Bruto',
                'Pago XIII periodo Seguro Social',
                'Pago XIII periodo ISLR',
                'Pago XIII periodo Neto',
                'Decimo XIII Bruto Provision'  ,
                'Deduccion Seg Social Decimo XIII Provision'  ,
                'Deduccion ISLR Decimo XIII Provision'  ,
                'Decimo XIII Neto Provision'  ,
                'Deduccion Seg social Patron'  ,
                'Vacaciones Seguro Social Patron',
                'Deduccion XIII Periodo Seguro Social Patron',
                'Deduccion Seguro Educacional Patron'  ,
                'Vacaciones Seguro Educacion Patron'  ,
                'Deduccion Seg Social XIII Patron Provision'  ,
                'Prima Antiguedad Patron'  , 
                'Vacacionciones Acumuladas Patron'  ,
                'Riesgo Profesional Patron'  ,
                'Totales Patronales'  ,
                'Total General Sueldo'  
                               ]
            
            lista_cabecera_colb=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Sueldo base quincenal',
                'Feriado con Dia descanso',
                'Feriado',
                'Domingo o Dia Descanso',
                'Horas Regulares Adicionales',
                'Incapacidad',
                'Licencia paga',
                
                'Bonificacion con Impuesto',
                'Dia ausencia',
                'Ausencia Dentro Jornada' ,
                'Deduccion con Impuesto',
                'Suelo Bruto Sin Sobretiempo'  ,
                'Sobretiempo',
                'Suelo Bruto'  ,
                'Deduccion Seguro Social'  ,
                'Deduccion Seguro Educacional'  ,
                'Deduccion ISLR'  ,
                'Total deduciones Ley' ,
                'Descuento Acreedores Hipotecario'  ,
                'Descuento Acreedores Empresa'  ,
                'Deduccion sin Impuesto'  ,
                'Sueldo Neto'  
                     ]
            
            lista_cabecera_vacas=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Salario Diario',
                'Dias Vacaciones',
                'Vacaciones'  ,
                'Vacaciones Seguro Social'  ,
                'Vacaciones Seguro educacion' ,
                'Vacaciones ISLR' ,
                'Deducion Vacaciones Totales'  ,
                'Vacaciones Netas',
                'Vacaciones Seguro Social Patron',
                'Vacaciones Seguro Educacion Patron',
                'Vacaciones Saldo Patron  '
                               ]
            
            lista_cabecera_XIII=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Pago XIII periodo Bruto',
                'Pago XIII periodo Seguro Social',
                'Pago XIII periodo ISLR',
                'Pago XIII periodo Neto',
                'Deduccion XIII Periodo Seguro Social Patron',
                
                'XIII Saldo Patron '
                               ]
            
            lista_cabecera_BONOS=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Bonificacion Sin Impuesto'
                               ]
            
            lista_cabecera_APORTES=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Sueldo Bruto',
                'Vacaciones',
                'XIII',

                'Sueldo Seguro Social'  ,
                'Vacaciones Seguro Social' ,
                'XIII Seguro Social' ,
                'Total Trabajador Seguro Social' ,

                'Sueldo Seguro Educacional'  ,
                'Vacaciones Seguro Educacional'  ,
                'Total Trabajador Seguro Educacional' ,

                'Sueldo ISLR'  ,
                'Vacaciones ISLR'  ,
                'XIII ISLR'  ,
                'Total Trabajador ISLR'  ,

                'Sueldo Seguro Social Patronal'  ,
                'Vacaciones Seguro Social Patronal' ,
                'XIII Seguro Social Patronal' ,
                'Total Patronal Seguro Social ' ,

                'Sueldo Seguro Educacional Patronal'  ,
                'Vacaciones Seguro Educacional Patronal'  ,
                'Total Patronal Seguro Educacional' ,
                'Riesgo Profesionales' ,
                'Total Aporte Patronal'

                ]

            lista_cabecera_provisiones=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Sueldo Bruto',
                'Vacaciones',
                'Provision XIII',
                'Provision XIII S.S Patronal',
                'Provision Prima Antiguedad',
                'Provision Vacaciones',
                'Total Provisiones Patronales'

                ]

            lista_Steph_asiento=['#',
                'Empresa',
                'Codigo de la Empresa',
                'Sueldo Bruto',
                'Vacaciones',
                'XIII',
                'SS / P',
                'SS V / P',
                'SS XIII / P',
                'Total SS Patronal',
                'SE / P',
                'SE V/ P',
                'Total SE Patronal',
                'Riesgos Profesionales',
                'Prov. XIII',
                'Prov. XIII SS / P',
                'Total Prov. XIII',
                
                'Provision Prima Antiguedad',
                'Provision Vacaciones',
                'Total Provisiones Patronales'

                ]
                    


            lista_archivo_excel.insert(0,lista_cabecera)
            
            wb= Workbook()
            ws=wb.active
            ws.title='Planilla Cliente'
            for i in range(len(lista_archivo_excel)):
            
                ROW=i+1
                for y in range(len(lista_archivo_excel[i])):
                    COLUMN=y+1
                    valor=lista_archivo_excel[i][y]
                    ws.cell(row=ROW, column=COLUMN,value=valor) 
            
           
            wb=fun_planilla_completa_cosmetic(wb,'Planilla Cliente')

            
            if True: #Aporte Patronales
                lista_Aporte_Patronal.insert(0,lista_cabecera_APORTES)
                hoja_6 = wb.create_sheet(title="Aporte Patronales Clientes")
                for i in range(len(lista_Aporte_Patronal)):
            
                    ROW=i+1
                    for y in range(len(lista_Aporte_Patronal[i])):
                        COLUMN=y+1
                        valor=lista_Aporte_Patronal[i][y]
                        hoja_6.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Patronales(wb,"Aporte Patronales Clientes")
            
            if True: #Aporte Patronales VS sipe
                
                hoja_7 = wb.create_sheet(title="SIPE vs AP")
                for i in range(len(lista_excel_Sipe_vs_AP)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Sipe_vs_AP[i])):
                        COLUMN=y+1
                        valor=lista_excel_Sipe_vs_AP[i][y]
                        hoja_7.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_SIPEvsAP(wb,"SIPE vs AP")
            
            if True: #Asiento Contable
                Lista_EXCEL_Steph_asiento.insert(0,lista_Steph_asiento)
                hoja_9 = wb.create_sheet(title="Asiento Contable")
                for i in range(len(Lista_EXCEL_Steph_asiento)):
            
                    ROW=i+1
                    for y in range(len(Lista_EXCEL_Steph_asiento[i])):
                        COLUMN=y+1
                        valor=Lista_EXCEL_Steph_asiento[i][y]
                        hoja_9.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Patronales_1(wb,"Asiento Contable")
            
            if True: #provisiones
                lista_excel_provisiones.insert(0,lista_cabecera_provisiones)
                hoja_8 = wb.create_sheet(title="Provisiones Patronales Clientes")
                for i in range(len(lista_excel_provisiones)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_provisiones[i])):
                        COLUMN=y+1
                        valor= lista_excel_provisiones[i][y]
                        hoja_8.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Provisiones(wb,"Provisiones Patronales Clientes")
            
            if True: #Planilla
                lista_excel_Planilla.insert(0,lista_cabecera_colb)
                hoja_2 = wb.create_sheet(title='Planilla Cliente Salario')
                for i in range(len(lista_excel_Planilla)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Planilla[i])):
                        COLUMN=y+1
                        valor=lista_excel_Planilla[i][y]
                        hoja_2.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_colaborador(wb,'Planilla Cliente Salario')
            
            if True: #Vacaciones
                lista_excel_Vacaciones.insert(0,lista_cabecera_vacas)
                hoja_3 = wb.create_sheet(title="Vacaciones-Cliente")
                for i in range(len(lista_excel_Vacaciones)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Vacaciones[i])):
                        COLUMN=y+1
                        valor=lista_excel_Vacaciones[i][y]
                        hoja_3.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_vacaciones(wb,"Vacaciones-Cliente")
            
            if True: #XIII
                lista_excel_XIII.insert(0,lista_cabecera_XIII)
                hoja_4 = wb.create_sheet(title="XIII por Cliente")
                for i in range(len(lista_excel_XIII)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_XIII[i])):
                        COLUMN=y+1
                        valor=lista_excel_XIII[i][y]
                        hoja_4.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_XIII(wb,"XIII por Cliente")
            
            if True: #Bonos
                lista_excel_Bonos.insert(0,lista_cabecera_BONOS)
                hoja_5 = wb.create_sheet(title="Bonos por Cliente")
                for i in range(len(lista_excel_Bonos)):
            
                    ROW=i+1
                    for y in range(len(lista_excel_Bonos[i])):
                        COLUMN=y+1
                        valor=lista_excel_Bonos[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_planilla_completa_cosmetic_Bonos(wb,"Bonos por Cliente")
            
            empresa='GoCleaning/' 
            path=empresa+'archivos/'        
            
            
            nombre_archivo=path+'planilla_completa_de_Clientes_del'+str(inicio)+'_al_'+final+'.xlsx'
            excel_buffer = BytesIO()

            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo Planilla Completa Cliente COMPLETO' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo Planilla Completa Cliente COMPLETO',file=archivo_temporal)
            
            excel_buffer.close()

           



        
        return render(request, "ver_reporte_cliente_planilla.html",{"name": 'Descargue Excel Del SIPE para pago de nomina quincela', 'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method , 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def liquidar(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
   

    # Convertir la cadena a un objeto datetime
    #fecha_actual = datetime.strptime(dia_str, "%Y-%m-%d")
    fecha_actual=datetime.now()
    mes = fecha_actual.month
    fecha = fecha_actual.day
    year = fecha_actual.year

    if fecha <= 10:
        codigo_planilla='Q1-'+str(mes)+'-'+str(year)
        fecha_pago=str(fecha)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes-1
        if mes_inicial==0:
            mes_inicial=12
            year_inicial, year_final =year-1, year
        else:
             
             year_inicial, year_final =year, year
        fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
        fecha_final_corte=str(fecha)+'-'+str(mes)+'-'+str(year_final)
    elif fecha >= 26:
        if mes==12:
            mes_inicial=1
            year_inicial, year_final =year, year+1
        else:
             mes_inicial=mes+1
             
             year_inicial, year_final =year, year

        codigo_planilla='Q1-'+str(mes_inicial)+'-'+str(year_final)
        fecha_pago=str(fecha)+'-'+str(mes_inicial)+'-'+str(year_final)
       
        fecha_inicial_corte='26-'+str(mes)+'-'+str(year_inicial)
        fecha_final_corte=str(fecha)+'-'+str(mes_inicial)+'-'+str(year_final)
    else:
        codigo_planilla='Q2-'+str(mes)+'-'+str(year)
        
        fecha_pago=str(fecha)+'-'+str(mes)+'-'+str(year)
        mes_inicial=mes
        
        fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
        fecha_final_corte=str(fecha)+'-'+str(mes)+'-'+str(year)

    lista_planilla=[codigo_planilla,fecha_inicial_corte,fecha_final_corte,fecha_pago]     

    if request.method=='GET':
        
        lista_final=[]
        palabra_a_excluir = "Administrativo"
        lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
        lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
        lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
        lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

# Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
        for i in range(len(lista_colaboradores)):
            if lista_colaboradores[i].Tipo_contrato == 'Contrato_Indefinido':
                fecha_egreso='---'
                fin_contrato='---'
            else:
                fecha_egreso=lista_colaboradores[i].Fecha_Egreso
                
                fin_contrato=fecha_egreso - fecha_actual.date()
                añoss = fin_contrato.days // 365
                mesesss = (fin_contrato.days % 365) // 30
                diasss = (fin_contrato.days % 365) % 30 
                fin_contrato=str(añoss)+' Años, '+str(mesesss)+' Meses, '+str(diasss)+' Dias.'

            fecha_inicio=lista_colaboradores[i].Fecha_Ingreso
            dias_laborando=fecha_actual.date()-fecha_inicio
            años = dias_laborando.days // 365
            mesess = (dias_laborando.days % 365) // 30
            diass = (dias_laborando.days % 365) % 30 
            dias_laborando=str(años)+' Años, '+str(mesess)+' Meses, '+str(diass)+' Dias.'

            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Tipo_contrato,
                   dias_laborando,
                   fecha_egreso,
                   fin_contrato,

                   lista_colaboradores[i].imagen
                   #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.7 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.2 }}</td>
                   ]
              
                        
            lista_final.append(lista)
        
        
        return render(request, "liquidar.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,  'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Borrar' in values:
             a_borrar=Acreedores.objects.get(pk=int(request.POST["Borrar"]))
             if True: #guardar Novedades
                        

                                                tipo_seguimiento='Acreedores'
                                                sUB_Tipo_seguimiento=' Eliminar '
                                                comment=' Eliminar Acreedores, '+'Tipo Permiso: '+a_borrar.Tipo_acreeditor+' , Dia Inicio: '+str(a_borrar.Dia_inicio_cobro)+' Fin: '+str(a_borrar.Dia_fin_cobro)+' Colaborador: '+a_borrar.Colaborador.Colaborador_nombre+' '+a_borrar.Colaborador.Colaborador_apellido+' Nro Ident.: '+a_borrar.Colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
             
             a_borrar.delete()
             return  redirect('ver-acreedores/')
        if 'Aprobar' in values:
            a_editar=Acreedores.objects.get(pk=int(request.POST["Aprobar"]))
            a_editar.Estado_Permiso='Aprobado'
            a_editar.save()

        if 'Rechazar' in values:
            a_editar=Acreedores.objects.get(pk=int(request.POST["Rechazar"]))
            a_editar.Estado_Permiso='Rechazar'
            a_editar.save()           
       
        return  redirect('liquidar/')

def motor_planilla_p1_l(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('liquidar/') 
    
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())

        
        # #print(request.FILES['archivo'])
        
       
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('liquidar/') 
         
        if 'fecha_salida' in values or 'mes' in values or 'planilla' in values:
            if 'fecha_salida' in values :

                fecha_salida=request.POST['fecha_salida']
                lista_salida=fecha_salida.split('-')
                fecha = int(lista_salida[2])
                mes = int(lista_salida[1])
                year = int(lista_salida[0])
                if fecha <= 10:
                    codigo_planilla='Q1-'+str(mes)+'-'+str(year)
                    fecha_pago=str(fecha)+'-'+str(mes)+'-'+str(year)
                    mes_inicial=mes-1
                    if mes_inicial==0:
                        mes_inicial=12
                        year_inicial, year_final =year-1, year
                    else:
             
                        year_inicial, year_final =year, year

                    fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
                    fecha_final_corte='10-'+str(mes)+'-'+str(year_final)

                elif fecha >= 26:
                    if mes==12:
                        mes_inicial=12
                        mes=1
                        year_inicial=year
                        year_final=year+1
                    else:
                        mes_inicial= mes
                        mes=mes+1
                        year_inicial, year_final = year , year

                    codigo_planilla='Q1-'+str(mes)+'-'+str(year) 
                    fecha_inicial_corte='26-'+str(mes_inicial)+'-'+str(year_inicial)
                    fecha_final_corte='10-'+str(mes)+'-'+str(year_final)  
                    fecha_pago=str(fecha)+'-'+str(mes_inicial)+'-'+str(year_inicial)

                else:
                    codigo_planilla='Q2-'+str(mes)+'-'+str(year)
                    ultimo_dia_mes=fecha
                    fecha_pago=str(ultimo_dia_mes)+'-'+str(mes)+'-'+str(year)
                    mes_inicial=mes
        
                    fecha_inicial_corte='11-'+str(mes)+'-'+str(year)
                    fecha_final_corte='25-'+str(mes)+'-'+str(year)

                  

            if True:

                
                if  'planilla' in values:
                    planilla=request.POST['planilla']
                else:
                    planilla=codigo_planilla

                
                
                if  'fecha_pago' in values:
                    fecha_pago=request.POST['fecha_pago']
                else:
                    fecha_pago=fecha_pago
                id_col=int(request.POST["colaborador"])
                lista_planilla=planilla.split('-')
                Quater=lista_planilla[0]
                
                Quater=Quater.replace('Q','')
                Quater=int(Quater)
                mes=int(lista_planilla[1])
                year=int(lista_planilla[2])
                if Quater==1:
                    inicio_corte=26
                    final_corte=10
                  
                    if mes==1:
                        mes_inicial=12
                        year_inicial=year-1
                    else:
                        mes_inicial=mes-1
                        year_inicial=year
                
                else:
                    inicio_corte=11
                    final_corte=25
                    mes_inicial=mes
                    year_inicial=year
                

                fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
                fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

                fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
                fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            
               
                fecha_pago_str=str(fecha_pago)
                lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 
            #### fecha de comparacion terminadas

            if es_admin:
                            aprobado_por='Administrador'
            else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

            ###rechazar o aprobar
            if 'Rechazar' in values:
                 rechazar_permiso=Permisos.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 tipo_permiso=rechazar_permiso.Tipo_permiso
                 if tipo_permiso== 'Vacaciones':
                      if permiso_aprobado_Q=='Aprobado':
                        dias=rechazar_permiso.Dias_permiso
                        colaborador_actualizar=Colaboradores.objects.get(pk=rechazar_permiso.Colaborador.pk)
                        vacas_usadas=colaborador_actualizar.Vacaciones_usadas
                        vacas_usadas-=dias
                        colaborador_actualizar.Vacaciones_usadas=vacas_usadas
                        colaborador_actualizar.save()
                 


                 rechazar_permiso.save()

            elif 'Aprobar' in values:
                 rechazar_permiso=Permisos.objects.get(pk=int(request.POST["Aprobar"]))
                 rechazar_permiso.Estado_Permiso='Aprobado'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 rechazar_permiso.save()
                 tipo_permiso=rechazar_permiso.Tipo_permiso
                 if tipo_permiso== 'Vacaciones':
                      dias=rechazar_permiso.Dias_permiso
                      colaborador_actualizar=Colaboradores.objects.get(pk=rechazar_permiso.Colaborador.pk)
                      vacas_usadas=colaborador_actualizar.Vacaciones_usadas
                      vacas_usadas+=dias
                      colaborador_actualizar.Vacaciones_usadas=vacas_usadas
                      colaborador_actualizar.save()


            lista_permisos=Permisos.objects.filter(Colaborador__pk=id_col)
            siguiente_bool=True
            lista_ausencia=[]
            for permisos in lista_permisos:
                dia_inicio_permiso=permisos.Dia_inicio_permiso
                dia_fin_permiso=permisos.Dia_fin_permiso
                '''#print(dia_inicio_permiso,dia_fin_permiso)
                #print('inicio',fecha_inicial_corte.date(),'final', fecha_final_corte.date())
                #print('*/********')'''
                
                dias = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_corte.date(), fecha_final_corte.date())
                if dias>0:
                    
                    tipo_permiso=permisos.Tipo_permiso
                    estado_permiso=permisos.Estado_Permiso
                    if estado_permiso=='Pendiente':
                         siguiente_bool=False
                    
                    aprobado_por=permisos.Aprobado_por
                    documento_permiso=permisos.Documento_permiso
                    nombre=permisos.Colaborador.Colaborador_nombre+' '+permisos.Colaborador.Colaborador_apellido
                    cargo=permisos.Colaborador.Cargo
                    dpto=permisos.Colaborador.Departamento
                    motivo=permisos.Comentario_Permiso

                    lista=[permisos.pk,
                                    nombre,
                                    cargo,
                                    dpto,
                                    dia_inicio_permiso,
                                    dia_fin_permiso,
                                    motivo,
                                    estado_permiso,
                                    documento_permiso,
                                    aprobado_por,
                                    tipo_permiso,
                                    permisos.Colaborador.imagen

                                    #<td><img src="{{ MEDIA_URL }}{{  clientes.11 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                    ]
                
                    lista_ausencia.append(lista)
                 
            
        return render(request, "motor_planilla_1_l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool , 'colaborador':id_col})

 
def motor_planilla_p2_l(request):
    
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

     


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('liquidar/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            fecha_pagoo=request.POST["fecha_pago"]
            id_col=int(request.POST["colaborador"])
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pagoo] 
            #### fecha de comparacion terminadas
            if es_admin:
                            aprobado_por='Administrador'
            else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
            ###rechazar o aprobar
            if 'Rechazar' in values:
                 rechazar_permiso=Acreedores.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 
                 rechazar_permiso.save()

            elif 'Aprobar' in values:
                 rechazar_permiso=Acreedores.objects.get(pk=int(request.POST["Aprobar"]))
                 rechazar_permiso.Estado_Permiso='Aprobado'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 rechazar_permiso.save()
                 

            lista_permisos=Acreedores.objects.filter(Colaborador__pk=id_col , Tipo_acreeditor='Empresa')
            siguiente_bool=True
            lista_ausencia=[]
            fecha_pago_date = datetime(year, mes, fecha_pago)
            for permisos in lista_permisos:
                dia_inicio_permiso=permisos.Dia_inicio_cobro
                dia_fin_permiso=permisos.Dia_fin_cobro
                '''#print(dia_inicio_permiso,dia_fin_permiso)
                #print('corte',fecha_pago_date.date(),'corte', )
                #print(Quater==1 and dia_inicio_permiso<=fecha_pago_date.date() and fecha_pago_date.date()<=dia_fin_permiso)
                #print(Quater==1)
                #print(dia_inicio_permiso<=fecha_pago_date.date())
                #print(fecha_pago_date.date()<=dia_fin_permiso)
                #print('*/********')'''
                if  dia_inicio_permiso<=fecha_pago_date.date() and fecha_pago_date.date()<=dia_fin_permiso:
                    
                    tipo_acreedor=permisos.Tipo_acreeditor
                    nombre_acreedor=permisos.Nombre_acreeditor
                    estado_acreedor=permisos.Estado_Permiso
                    monto_mensual=permisos.Monto_total -  permisos.dinero_pagado
                    if estado_acreedor=='Pendiente':
                         siguiente_bool=False
                    
                    aprobado_por=permisos.Aprobado_por
                    documento_permiso=permisos.Documento_permiso
                    nombre=permisos.Colaborador.Colaborador_nombre+' '+permisos.Colaborador.Colaborador_apellido
                    cargo=permisos.Colaborador.Cargo
                    dpto=permisos.Colaborador.Departamento
                    motivo=permisos.Comentario_Permiso

                    lista=[permisos.pk,
                                    nombre,
                                    cargo,
                                    dpto,
                                    dia_inicio_permiso,
                                    dia_fin_permiso,
                                    motivo,
                                    estado_acreedor,
                                    documento_permiso,
                                    aprobado_por,
                                    
                                    monto_mensual,
                                    tipo_acreedor,
                                    nombre_acreedor,
                                    permisos.Colaborador.imagen

                                    #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.13 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                                    

                                    ]
                
                    lista_ausencia.append(lista)
                    #print('guarde')
                 
          
        return render(request, "motor_planilla_2_l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool , 'colaborador':id_col})
    

def motor_planilla_p3_l(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('liquidar/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('liquidar/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            fecha_pagoo=request.POST["fecha_pago"]
            id_col=int(request.POST["colaborador"])
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pagoo] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.Ausencias_Aprobada=True
                           jornada.Ausencias_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
            if 'Cambiar' in values:
                if request.POST["hora_entrada"]!='' and request.POST["hora_salida"]!='':
                    jornada=Hoja_tiempo.objects.get(pk=int(request.POST["Cambiar"])) 
                    hr_entrada=request.POST["hora_entrada"]
                    hr_salida=request.POST["hora_salida"]

                    fecha_entrada=jornada.Dia_entrada
                    fecha_salida=jornada.Dia_salida
                    
                    entrada=str(fecha_entrada)+' '+hr_entrada
                    salida=str(fecha_salida)+' '+hr_salida
                    entradas_y_salidas.append([entrada,salida])
                    fecha_entrada1 = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                    fecha_salida1 = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                    tiempo_trabajado = fecha_salida1 -fecha_entrada1
                    tiempo_trabajado=tiempo_trabajado.total_seconds()
                    if tiempo_trabajado < 1 :
                        error=True
                        msj_Error='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                        
                        
                    elif tiempo_trabajado>=86400:
                        error=True
                        msj_Error='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'

                    if error==False:
                        lista_FERIADOS=Dias_Feriados.objects.all()
                        feriados=[]
                        jornada_semanal=48
                        for i in lista_FERIADOS:
                            feriados.append(i.Dia_Feriado)

                        categoria_empleado=jornada.Colaborador.Departamento
                        hora_entrada_contrato=jornada.Colaborador.Hora_entrada
                        hora_salida_contrato=jornada.Colaborador.Hora_salida
                        jornada_diaria=jornada.Colaborador.Jornada_diaria
                        jornada_semanal=jornada.Colaborador.Jornada_semanal
                        hora_de_inicio_almuerzo=jornada.Colaborador.Inicio_Hora_Almuerzo
                        if hora_de_inicio_almuerzo!=23:
                            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                        else:
                            hora_de_final_almuerzo=0
                        Almuerzo=jornada.Colaborador.Almuerzo_bool
                        dia_descanso_1=jornada.Colaborador.Dia_descanso_1
                        dia_descanso_2=jornada.Colaborador.Dia_descanso_2
                        tipo_de_jornada=jornada.Colaborador.Tipo_Jornada



                        if categoria_empleado=='Ruta':

                            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                        elif tipo_de_jornada=='Nocturna':

                            resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                        else:
                            resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                        for i in resultados:
                            dia_entrada= i[0]
                            hr_entrada = i[1]
                            dia_salida = i[2]
                            hr_salida = i[3]
                            minutos_trabajados = i[4]
                            minutos_trabajadas_jornada_laboral = i[5]
                            minutos_extras_diurnos=i[6]
                            minutos_extras_nocturnos = i[7]
                            horas_laborales_extras = i[8]
                            minutos_de_tardia = i[9]
                            min_faltante_de_turno = i[10]
                            min_llego_temprano  =i[11]
                            minutos_de_extras_mixtas_nocturnas=i[12]
                            minutos_de_extras_mixtas_diurnas=i[13]
                            minutos_extras_diurnos_3hr  =i[14]
                            minutos_extras_nocturnos_3hr =i[15]
                            minutos_de_extras_mixtas_diurnas_3hr = i[16]
                            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                            laboro_dia_domingo_descanso= i[18]
                            laboro_dia_feriado=i[19]


                        
                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                         
                        Hoja_tiempo.objects.filter(pk=jornada.pk).update(Ausencias_Aprobada=False,Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida, Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                

                else:
                    error=True
                    msj_Error='Alguna hora de entrada o salida esta faltando, Reintente por Favor.'

                 

            lista_tiempo =Hoja_tiempo.objects.filter(Colaborador__pk=id_col)
            
            siguiente_bool=True
            lista_ausencia_final=[]
            fin_cierre=True
            iter_dias=fecha_inicial_corte.date()
            while fin_cierre:
                lista_ausencia=lista_tiempo.filter(Dia_entrada=iter_dias)
                if len(lista_ausencia)>0:
                     for ausencia in lista_ausencia:
                        faltante=ausencia.Minutos_Faltantes_turno
                        bool_ausencia=ausencia.Ausencias_Aprobada
                        
                        if bool_ausencia==False and faltante>0:
                            siguiente_bool=False
                        if faltante>0:
                             lista=[ausencia.pk,
                                    ausencia.Colaborador.Colaborador_nombre+' '+ausencia.Colaborador.Colaborador_apellido,
                                    ausencia.Colaborador.Cargo,
                                    ausencia.Colaborador.Departamento,
                                    ausencia.Empresa.Codigo_cliente,
                                    ausencia.Empresa.nombre_empresa,
                                    str(ausencia.Dia_entrada),
                                    str(ausencia.Dia_salida),
                                    fun_minutoss(ausencia.Minutos_Faltantes_turno),
                                    ausencia.Quien_agrego_Jornada,
                                    ausencia.Entrada,
                                    ausencia.Salida,
                                    ausencia.Ausencias_Aprobada,
                                    ausencia.Ausencias_Aprobadas_por,
                                    ausencia.Colaborador.imagen

                                    #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                     
                                    ] 
                             lista_ausencia_final.append(lista)
                iter_dias+= timedelta(days=1)
                if iter_dias==fecha_final_corte.date():
                    fin_cierre=False            
                
            if error:
                 a=1
                 #print('render con msj error')
                 #print(msj_Error)
                
                
        
        return render(request, "motor_planilla_3_l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool, 'colaborador':id_col})


def motor_planilla_p4_l(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    

    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            planilla=request.POST["planilla"]
            fecha_pagoo=request.POST["fecha_pago"]
            id_col=int(request.POST["colaborador"])
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pagoo] 

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Hoja_tiempo.objects.get(pk=int(id))
                           jornada.HR_3_Aprobada=True
                           jornada.HR_3_Aprobadas_por='Marco Jimenez'
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
            if 'Cambiar' in values:
                if request.POST["hora_entrada"]!='' and request.POST["hora_salida"]!='':
                    jornada=Hoja_tiempo.objects.get(pk=int(request.POST["Cambiar"])) 
                    hr_entrada=request.POST["hora_entrada"]
                    hr_salida=request.POST["hora_salida"]

                    fecha_entrada=jornada.Dia_entrada
                    fecha_salida=jornada.Dia_salida
                    
                    entrada=str(fecha_entrada)+' '+hr_entrada
                    salida=str(fecha_salida)+' '+hr_salida
                    entradas_y_salidas.append([entrada,salida])
                    fecha_entrada1 = datetime.strptime(entrada, '%Y-%m-%d %H:%M')
                    fecha_salida1 = datetime.strptime(salida, '%Y-%m-%d %H:%M')
                    tiempo_trabajado = fecha_salida1 -fecha_entrada1
                    tiempo_trabajado=tiempo_trabajado.total_seconds()
                    if tiempo_trabajado < 1 :
                        error=True
                        msj_Error='Error.! Ingrese un dia donde salida sea despues de la entrada, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'
                        
                        
                    elif tiempo_trabajado>=86400:
                        error=True
                        msj_Error='Error.! Ingrese un salida donde  sea menor de 1 dia de jornada Laboral, Entrada escrita: '+entrada+' salida escrita: '+salida+' Por favor asigne correcta  horas y dias de entrada y salidas por jornada Laboral.'

                    if error==False:
                        lista_FERIADOS=Dias_Feriados.objects.all()
                        feriados=[]
                        jornada_semanal=48
                        for i in lista_FERIADOS:
                            feriados.append(i.Dia_Feriado)

                        categoria_empleado=jornada.Colaborador.Departamento
                        hora_entrada_contrato=jornada.Colaborador.Hora_entrada
                        hora_salida_contrato=jornada.Colaborador.Hora_salida
                        jornada_diaria=jornada.Colaborador.Jornada_diaria
                        jornada_semanal=jornada.Colaborador.Jornada_semanal
                        hora_de_inicio_almuerzo=jornada.Colaborador.Inicio_Hora_Almuerzo
                        if hora_de_inicio_almuerzo!=23:
                            hora_de_final_almuerzo=hora_de_inicio_almuerzo+1
                        else:
                            hora_de_final_almuerzo=0
                        Almuerzo=jornada.Colaborador.Almuerzo_bool
                        dia_descanso_1=jornada.Colaborador.Dia_descanso_1
                        dia_descanso_2=jornada.Colaborador.Dia_descanso_2
                        tipo_de_jornada=jornada.Colaborador.Tipo_Jornada



                        if categoria_empleado=='Ruta':

                            resultados = calcular_minutos_trabajados_diario_ruta(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
   
                        elif tipo_de_jornada=='Nocturna':

                            resultados = calcular_minutos_trabajados_diario_horas_mixta_entrada_nocturna(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)
                        else:
                            resultados = calcular_minutos_trabajados_diario_horas(entradas_y_salidas,  hora_entrada_contrato, hora_salida_contrato, jornada_diaria, jornada_semanal,hora_de_inicio_almuerzo,hora_de_final_almuerzo, Almuerzo,dia_descanso_1,dia_descanso_2,feriados)

                        for i in resultados:
                            dia_entrada= i[0]
                            hr_entrada = i[1]
                            dia_salida = i[2]
                            hr_salida = i[3]
                            minutos_trabajados = i[4]
                            minutos_trabajadas_jornada_laboral = i[5]
                            minutos_extras_diurnos=i[6]
                            minutos_extras_nocturnos = i[7]
                            horas_laborales_extras = i[8]
                            minutos_de_tardia = i[9]
                            min_faltante_de_turno = i[10]
                            min_llego_temprano  =i[11]
                            minutos_de_extras_mixtas_nocturnas=i[12]
                            minutos_de_extras_mixtas_diurnas=i[13]
                            minutos_extras_diurnos_3hr  =i[14]
                            minutos_extras_nocturnos_3hr =i[15]
                            minutos_de_extras_mixtas_diurnas_3hr = i[16]
                            minutos_de_extras_mixtas_nocturnas_3hr =i[17]
                            laboro_dia_domingo_descanso= i[18]
                            laboro_dia_feriado=i[19]


                        
                        if es_admin:
                            quien_agrego_Jornada='Administrador'
                        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
                         
                        Hoja_tiempo.objects.filter(pk=jornada.pk).update(HR_3_Aprobada=False,Entrada=hr_entrada, Salida=hr_salida, Dia_entrada=dia_entrada,Dia_salida=dia_salida, Quien_agrego_Jornada=quien_agrego_Jornada , Minutos_Trabajads= minutos_trabajados,Minutos_Trabajads_Jornada_Laboral= minutos_trabajadas_jornada_laboral,Minutos_Extras_Diurnos= minutos_extras_diurnos,Minutos_Extras_Noctuno= minutos_extras_nocturnos,Minutos_Laborales_extras= horas_laborales_extras,Minutos_Tardia= minutos_de_tardia,Minutos_Faltantes_turno= min_faltante_de_turno,Minutos_llego_temprano= min_llego_temprano,Minutos_extras_mixtas_nocturnas= minutos_de_extras_mixtas_nocturnas,Minutos_extras_mixtas_diurnas= minutos_de_extras_mixtas_diurnas,Minutos_extras_diurnos_3h= minutos_extras_diurnos_3hr,Minutos_extras_nocturnos_3h= minutos_extras_nocturnos_3hr,Minutos_de_extras_mixtas_diurnas_3hr= minutos_de_extras_mixtas_diurnas_3hr,Minutos_de_extras_mixtas_nocturnas_3hr= minutos_de_extras_mixtas_nocturnas_3hr,Laboro_dia_domingo_descanso= laboro_dia_domingo_descanso,laboro_dia_feriado= laboro_dia_feriado)
                

                else:
                    error=True
                    msj_Error='Alguna hora de entrada o salida esta faltando, Reintente por Favor.'

                 
            
            lista_tiempo =Hoja_tiempo.objects.filter(Colaborador__pk=id_col)
           
            siguiente_bool=True
            lista_ausencia_final=[]
            fin_cierre=True
            iter_dias=fecha_inicial_corte.date()
            while fin_cierre:
                lista_ausencia=lista_tiempo.filter(Dia_entrada=iter_dias)
                if len(lista_ausencia)>0:
                     for ausencia in lista_ausencia:
                        

                        extras_3hr=ausencia.Minutos_extras_diurnos_3h+ausencia.Minutos_extras_nocturnos_3h+ausencia.Minutos_de_extras_mixtas_diurnas_3hr+ausencia.Minutos_de_extras_mixtas_nocturnas_3hr



                        bool_ausencia=ausencia.HR_3_Aprobada
                        
                        if bool_ausencia==False and extras_3hr>0:
                            siguiente_bool=False
                        if extras_3hr>0:
                             lista=[ausencia.pk,
                                    ausencia.Colaborador.Colaborador_nombre+' '+ausencia.Colaborador.Colaborador_apellido,
                                    ausencia.Colaborador.Cargo,
                                    ausencia.Colaborador.Departamento,
                                    ausencia.Empresa.Codigo_cliente,
                                    ausencia.Empresa.nombre_empresa,
                                    str(ausencia.Dia_entrada),
                                    str(ausencia.Dia_salida),
                                    extras_3hr,
                                    ausencia.Quien_agrego_Jornada,
                                    ausencia.Entrada,
                                    ausencia.Salida,
                                    ausencia.HR_3_Aprobada,
                                    ausencia.HR_3_Aprobadas_por,
                                    ausencia.Colaborador.imagen

                                    #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.14 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                                     
                                    ] 
                             lista_ausencia_final.append(lista)
                iter_dias+= timedelta(days=1)
                if iter_dias==fecha_final_corte.date():
                    fin_cierre=False            
                
            if error:
                 a=1
                 #print('render con msj error')
                 #print(msj_Error)
                
                
        
        return render(request, "motor_planilla_4_l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool , 'colaborador':id_col})
     

def motor_planilla_p5_l(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('liquidar/') 
    
    elif request.method=='POST':
        #print(request.POST)
        lista_ajustes=[]
        
             
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('liquidar/') 
        if 'Activo1' in values:
            colaborador=Colaboradores.objects.get(pk=int(request.POST["colaborador1"]))
            tipo_Ajuste=request.POST["tipo_Ajuste"]
            concepto_Ajuste=request.POST["concepto_Ajuste"]
            descripcion=request.POST["descripcion"]
            monto=float(request.POST["monto"])
            Retener=request.POST["Retener"]
            
            if es_admin:
                            quien_agrego_Jornada='Administrador'
            else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
            if Retener=='No':
                retener_bool=False
            else:
                 retener_bool=True
            planilla=request.POST["planilla"]
            try:
                         
                created= Ajuste_Planilla.objects.get_or_create(Monto=monto, Colaborador=colaborador,Etapa=planilla,Tipo_Ajuste=tipo_Ajuste, Concepto_Ajuste=concepto_Ajuste,Comentario=descripcion,Retencion_Iva=retener_bool,Quien_agrego_Jornada=quien_agrego_Jornada)
                if True: #guardar Novedades
                                                tipo_seguimiento='Ajuste Planilla '
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Ajuste Planilla en Liquidacion EN Quincena: '+str(planilla)+' Tipo Ajuste'+str(tipo_Ajuste)+' motivo: '+str(concepto_Ajuste)+' monto'+str(monto)+' Colaborador: '+colaborador.Colaborador_nombre+' '+colaborador.Colaborador_apellido+' Nro Ident.: '+colaborador.Nro_Identificacion
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                  
            except:
                 a=1



        if 'planilla' in values:
            planilla=request.POST["planilla"]
            fecha_pagoo=request.POST["fecha_pago"]
            id_col=int(request.POST["colaborador"])
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pagoo] 
            if es_admin:
                            aprobado_por='Administrador'
            else:
                            aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

            if 'Actualizar' in values:
                 if 'switch_aprobar' in values:
                      lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                      for id in  lista_ausencia_aprobar:
                           jornada= Ajuste_Planilla.objects.get(pk=int(id))
                           jornada.Aprobado_bool=True
                           jornada.Aprobado_por=aprobado_por
                           jornada.save()
                           
            #### fecha de comparacion terminadas
            if 'Rechazar' in values:
                 rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Rechazar"]))
                 permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                 rechazar_permiso.Estado_Permiso='Rechazar'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 
                 rechazar_permiso.save()

            elif 'Aprobar' in values:
                 rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Aprobar"]))
                 rechazar_permiso.Estado_Permiso='Aprobado'
                 rechazar_permiso.Aprobado_por=aprobado_por
                 rechazar_permiso.save()
            
            
            
            error=False
            ###rechazar o aprobar
            entradas_y_salidas=[]
               
            
            lista_AJUSTE=Ajuste_Planilla.objects.filter(Etapa=request.POST["planilla"], Colaborador__pk=id_col)
            siguiente_bool=True
            lista_ausencia_final=[]

            for i in lista_AJUSTE:
                if i.Aprobado_bool==False:
                     siguiente_bool=False
                     
                lista=[i.pk,
                        i.Estado_Permiso,
                        i.Colaborador.Colaborador_nombre+' '+i.Colaborador.Colaborador_apellido,
                        i.Colaborador.Cargo,
                        i.Colaborador.Departamento,
                        i.Monto,
                        i.Tipo_Ajuste,
                        i.Concepto_Ajuste,
                        i.Comentario,
                        i.Retencion_Iva,
                        i.Quien_agrego_Jornada,
                        i.Aprobado_por,
                        i.Aprobado_bool,
                        i.Colaborador.imagen

                        #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.13 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.2 }}</td>
                           ]

                lista_ausencia_final.append(lista)

            
            for i in lista_colaboradores.filter(pk=id_col):
                lista=[i.pk,
                    i.Colaborador_nombre,
                    i.Colaborador_apellido,
                    i.Cargo,
                    i.Departamento,
                    i.Supervisor,
                    i.Sueldo
                    ]
            lista_ajustes.append(lista)
             


            if error:
                 a=1
                 #print('render con msj error')
                 ##print(msj_Error)
                
                
        
        return render(request, "motor_planilla_5_l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':siguiente_bool,'lista_ajustes':lista_ajustes, 'colaborador':id_col})

def motor_planilla_p6_l(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        archivos=list(request.FILES.keys())
        if 'Regresar' in values:
             return redirect('motor-planilla/') 
        
        if 'planilla' in values:
            lista_xiii=['Q1-12','Q1-04','Q1-08']
            planilla=request.POST["planilla"]
            fecha_pagoo=request.POST["fecha_pago"]
            fecha_pago_datetime=fun_convertir_string_date_a_fecha_liquidaciones(fecha_pagoo)
            id_col=int(request.POST["colaborador"])
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            QQ=Quater+'-'+lista_planilla[1]
            Quater=Quater.replace('Q','')
           
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            
            lista_xiii=['Q1-12','Q1-04','Q1-08']
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            if Quater==2:
                fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                
            else:
                fecha_pago=15
            
            fecha_pago_date=datetime(year, mes, fecha_pago)
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                 
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pagoo] 

                     
            #### Aqui en empieza calculo
            #### 1 sacar dias trabajados y dias vacaciones 
            # 2 sacar horas extras semanales 
            #sacar ausencia
            #sacar feriados con dias libres
            #esto dara en salario bruto
            lista_ausencia_final=[]
            siguiente_bool=False
            bool_fecha_ingreso_quincena =False
            lista_Colaboradores_obj=Colaboradores.objects.filter(Status='Activo',  Fecha_Ingreso__lte=fecha_final_corte.date(), pk=id_col)
            for colaborador_obj in lista_Colaboradores_obj:
                Fecha_Ingreso=colaborador_obj.Fecha_Ingreso
                hr_jornada_semanal=colaborador_obj.Jornada_semanal
                sueldo_mensual=colaborador_obj.Sueldo
                sueldo_quincena=sueldo_mensual/2
                
                Fecha_Ingreso=colaborador_obj.Fecha_Ingreso
                hr_jornada_semanal=colaborador_obj.Jornada_semanal
                colab_hr_jorn_diaria=colaborador_obj.Jornada_diaria
                sueldo_mensual=colaborador_obj.Sueldo
                sueldo_quincena=sueldo_mensual/2
                sueldo_semanal=sueldo_mensual*12/52
                sueldo_diario_vacas=sueldo_semanal/7
                sueldo_hr=sueldo_semanal/hr_jornada_semanal
                sueldo_min=sueldo_hr/60
                sueldo_diario=sueldo_hr*colab_hr_jorn_diaria
                ##print(sueldo_mensual,sueldo_quincena,sueldo_diario,sueldo_hr,sueldo_min)
                
                
                lista_descanso  =  [   colaborador_obj.Dia_descanso_1,  colaborador_obj.Dia_descanso_2  ]

                if fecha_inicial_corte.date()>Fecha_Ingreso:
                    #'inicial corte es mayor que cuando entro',fecha_inicial_corte.date(), Fecha_Ingreso )
                     fecha_inicial_generar=fecha_inicial_corte.date()
                elif fecha_inicial_corte.date()<=Fecha_Ingreso:
                     fecha_inicial_generar=Fecha_Ingreso
                     bool_fecha_ingreso_quincena=True

                #necesitamos empeza con la planilla con el rango de fecha exactas
                lista_hoja_tiempo_trabajador=Hoja_tiempo.objects.filter(Colaborador__pk=colaborador_obj.pk, Dia_entrada__range=(fecha_inicial_generar, fecha_pago_datetime))

                obj_si_hay_permiso_fecha_generar=Permisos.objects.filter(Colaborador__pk=colaborador_obj.pk, Estado_Permiso='Aprobado')
                lista_vacas_trabj=[]
                lista_incap_trabj=[]
                lista_incap_trabj_caja_paga=[]
                lista_lic_pag_trabj=[]
                if len(obj_si_hay_permiso_fecha_generar)>0:
                     #si hay datos
                     for permisos in obj_si_hay_permiso_fecha_generar:
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_generar, fecha_final_corte.date())
                        if diass>0 :
                            if permisos.Tipo_permiso=='Vacaciones':
                                lista_vacas_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                            elif permisos.Tipo_permiso=='Incapacidad' and  permisos.Pagado_por_Empresa_o_CCSS=='empresa':
                                lista_incap_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                            elif permisos.Tipo_permiso=='Incapacidad':
                                lista_incap_trabj_caja_paga.append([dia_inicio_permiso,dia_fin_permiso])
                            else:
                                lista_lic_pag_trabj.append([dia_inicio_permiso,dia_fin_permiso])
                
                lista_vacas_trabj_final=[] #lista con los dias de vacaciones o permisos
                lista_incap_trabj_final=[]
                lista_lic_p_trabj_final=[]
                lista_incap_trabj_caja_paga_final=[]

                if len(lista_vacas_trabj)>0:
                     for dia_d_per in lista_vacas_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_vacas_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

                if len(lista_incap_trabj)>0:
                     for dia_d_per in lista_incap_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_incap_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

                if len(lista_lic_pag_trabj)>0:
                     for dia_d_per in lista_lic_pag_trabj:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_lic_p_trabj_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)

                if len(lista_incap_trabj_caja_paga_final)>0:
                     for dia_d_per in lista_incap_trabj_caja_paga_final:
                          ini=dia_d_per[0]
                          fin=dia_d_per[1]
                          bool_permi=True
                          while bool_permi:
                                lista_incap_trabj_caja_paga_final.append(ini)
                                if ini==fin:
                                    bool_permi=False
                                else:
                                    ini+=timedelta(days=1)                      
                                     
                lista_feriados_obj=Dias_Feriados.objects.filter(Dia_Feriado__range=(fecha_inicial_generar, fecha_pago_datetime))  
                lista_feriados=[]

                if len(lista_feriados_obj)>0:
                     for yy in lista_feriados_obj:
                          lista_feriados.append(yy.Dia_Feriado)
                
                iter_inicio=True
                fecha_iterador=fecha_inicial_generar
                dias_trabajados=0
                dias_trabajados_compl=0
                dias_trabajados_no_compl=0
                dias_traba_feriados=0
                dias_trabaja_descanso=0
                dias_trabj_fer_con_descanso=0
                dias_trabajo_hr_regulares_Adicionales=0
                vacaciones=0
                incapacidad=0
                incapacidad_caja=0
                licenc_paga=0
                dia_ausencia=0
                dia_descanso=0
                ###Minutos
                min_ausencia=0
                min_ausencia_ruta=0
                min_dias_trabj_fer_con_descanso=0
                min_dias_trabaja_descanso=0
                min_dias_traba_feriados=0
                min_dias_trabajo_hr_regulares_Adicionales=0
                min_totales_trabajados=0

                #hr_extras
                hr_extras_diurnas=0
                hr_extras_nocturn=0
                hr_extra_mixta_diu=0
                hr_extra_mixta_noc=0

                hr_extra_diurna_3h=0
                hr_extra_noctur_3h=0
                hr_extra_mix_diu_3h=0
                hr_extra_mix_noc_3h=0
                #feriado
                hr_extra_feriado_diur=0
                hr_extra_feriado_noct=0
                hr_extra_feriado_mix_diur=0
                hr_extra_feriado_mix_noct=0

                hr_extra_feriado_diur_3h=0
                hr_extra_feriado_noct_3h=0
                hr_extra_feriado_mix_diu_3h=0
                hr_extra_feriado_mix_noc_3h=0
                #dia descanso domingo
                hr_extra_descanso_diur=0
                hr_extra_descanso_noct=0
                hr_extra_descanso_mix_diur=0
                hr_extra_descanso_mix_noct=0

                hr_extra_descanso_diur_3h=0
                hr_extra_descanso_noct_3h=0
                hr_extra_descanso_mix_diu_3h=0
                hr_extra_descanso_mix_noc_3h=0

                #bonos y reduciones con o sin impuesto
                bonos_con_impuesto=0
                bonos_sin_impuesto=0

                duduciones_con_impuesto=0
                deduciones_sin_impuesto=0
                # Acreedores
                acredores_hipotecario=0
                cuotas_acredores_hipotecario=0
                acredores_empresa=0
                cuotas_acredores_empresa=0

                #formula Acreedores
                if True: 
                    pk_acreedor_empresa=0
                    pk_acreedor_hipotecaria=0
                    lista_acree=Acreedores.objects.filter(Colaborador__pk=colaborador_obj.pk, Estado_Permiso='Aprobado',Dia_inicio_cobro__lte=fecha_pago_date.date(),Dia_fin_cobro__gte=fecha_pago_date.date())
                    if len(lista_acree)>0:
                         for acreedores_obj in lista_acree:
                            tipo_acreeditor=acreedores_obj.Tipo_acreeditor
                            monto_mensual_acree=acreedores_obj.Monto_mensual
                            cuotas_restante_acre=acreedores_obj.cuotas_restante
                            pk_acreedor_empresa=0
                            pk_acreedor_hipotecaria=0
                            if tipo_acreeditor=='Empresa':
                                acredores_empresa+=acreedores_obj.Monto_total - acreedores_obj.dinero_pagado
                                pk_acreedor_empresa=acreedores_obj.pk
                                cuotas_acredores_empresa=cuotas_restante_acre+1
                            elif tipo_acreeditor=='Hipotecario':
                                acredores_hipotecario+=monto_mensual_acree
                                pk_acreedor_hipotecaria=acreedores_obj.pk
                                cuotas_acredores_hipotecario=cuotas_restante_acre+1
                            else:
                                acredores_hipotecario+=monto_mensual_acree
                                cuotas_acredores_empresa=cuotas_restante_acre+1

                #formula Bonos y reduciones              
                if True:
                    lista_ajuste_planilla=Ajuste_Planilla.objects.filter(Colaborador__pk=colaborador_obj.pk, Etapa=planilla, Aprobado_bool=True, Estado_Permiso='Aprobado')
                    if len(lista_ajuste_planilla)>0:
                         for ajustes in lista_ajuste_planilla:
                            tipo_Ajuste=ajustes.Tipo_Ajuste
                            retencion_Iva=ajustes.Retencion_Iva
                            monto=ajustes.Monto
                            if tipo_Ajuste=='Suma':
                                if retencion_Iva:
                                    bonos_con_impuesto+=monto
                                else:
                                    bonos_sin_impuesto+= monto
                            else:
                                if retencion_Iva:
                                    duduciones_con_impuesto+=monto
                                else:
                                    deduciones_sin_impuesto+= monto
                                    

                if   colaborador_obj.Departamento=='Ruta':
                    num_hr_acumuladas_en_semana=fun_num_hr_acumuladas_en_semana_antes_que_empieza_Ruta(fecha_iterador,colaborador_obj)
                    num_hr_extras_acumuladas_en_semana_=0
                else:
                    num_hr_extras_acumuladas_en_semana_=fun_num_hr_extras_acumuladas_en_semana_antes_que_empieza(fecha_iterador,colaborador_obj)
                    num_hr_acumuladas_en_semana=fun_num_hr_acumuladas_en_semana_antes_que_empieza(fecha_iterador,colaborador_obj)
                    limite_hr_semanales=540


                ## vamos a crear una funcion que de un numero que acumule los feriados de la semana para cuando arranque el programa.
                lista_cliente_periodo=[]

                ##print('num_hr_extras_acumuladas_en_semana_',num_hr_extras_acumuladas_en_semana_)
                if   colaborador_obj.Departamento=='Ruta':
                    lista_calculo_dia_ruta = calculo_planilla_dia_Ruta(num_hr_acumuladas_en_semana, colaborador_obj.pk , hr_jornada_semanal, fecha_iterador, fecha_final_corte , lista_vacas_trabj_final, lista_descanso , lista_feriados , lista_incap_trabj_final , lista_lic_p_trabj_final,lista_incap_trabj_caja_paga_final )
                    
                    dias_trabj_fer_con_descanso=lista_calculo_dia_ruta[0]

                    min_dias_trabj_fer_con_descanso =lista_calculo_dia_ruta[1]
                    min_dias_traba_feriados =lista_calculo_dia_ruta[2]

                    dias_trabaja_descanso =lista_calculo_dia_ruta[3]
                    min_dias_trabaja_descanso =lista_calculo_dia_ruta[4]

                    min_totales_trabajados =lista_calculo_dia_ruta[5]
                    dias_trabajados =lista_calculo_dia_ruta[6]

                    min_ausencia_ruta =lista_calculo_dia_ruta[7]
                    min_dias_trabajo_hr_regulares_Adicionales  = lista_calculo_dia_ruta[8]
                    hr_extras_diurnas =lista_calculo_dia_ruta[9]

                    dias_traba_feriados =lista_calculo_dia_ruta[10]
                    dia_ausencia =lista_calculo_dia_ruta[11]
                    lista_cliente_periodo =lista_calculo_dia_ruta[12]
                    vacaciones= lista_calculo_dia_ruta[13]
        
                    incapacidad= lista_calculo_dia_ruta[14]
                    licenc_paga= lista_calculo_dia_ruta[15]
                    incapacidad_caja=lista_calculo_dia_ruta[15]


                else:

                    while iter_inicio:
                        
                        saber_dia=fecha_iterador.weekday()
                        if saber_dia==0:
                            num_hr_extras_acumuladas_en_semana_=0
                            num_hr_acumuladas_en_semana=0
                        try:
                            


                            lista_si_trabajo_ese_dia=lista_hoja_tiempo_trabajador.get(Dia_entrada=fecha_iterador)
                            bool_trabajo=True
                        except:
                            bool_trabajo=False


                        if bool_trabajo:
                            #hay que sacar si trabajo domingo
                            # si trabajo completo su jornada 
                            #si trabajo feriados
                            trabj_feriad=lista_si_trabajo_ese_dia.laboro_dia_feriado
                            trabj_descanso=lista_si_trabajo_ese_dia.Laboro_dia_domingo_descanso
                            trabajo_en_hrs=lista_si_trabajo_ese_dia.Minutos_Trabajads_Jornada_Laboral #min que trabajo en jornada normal
                            trabajo_en_hrs_adicionales=lista_si_trabajo_ese_dia.Minutos_Laborales_extras
                            
                            num_hr_acumuladas_en_semana+=lista_si_trabajo_ese_dia.Minutos_Trabajads
                            lista_cliente_periodo.append([lista_si_trabajo_ese_dia.Empresa.pk, num_hr_acumuladas_en_semana])

                            

                            if trabj_feriad and trabj_descanso:
                                dias_trabj_fer_con_descanso+=1
                                min_dias_trabj_fer_con_descanso+=trabajo_en_hrs + trabajo_en_hrs_adicionales

                                resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                hr_extra_feriado_diur+= resultado_hr_extras[1]
                                hr_extra_feriado_noct+= resultado_hr_extras[2]
                                hr_extra_feriado_mix_diur+=resultado_hr_extras[3]
                                hr_extra_feriado_mix_noct+=resultado_hr_extras[4]

                                hr_extra_feriado_diur_3h+=resultado_hr_extras[5]
                                hr_extra_feriado_noct_3h+=resultado_hr_extras[6]
                                hr_extra_feriado_mix_diu_3h+=resultado_hr_extras[7]
                                hr_extra_feriado_mix_noc_3h+=resultado_hr_extras[8]

                                #descanso
                                hr_extra_descanso_diur+= resultado_hr_extras[1]
                                hr_extra_descanso_noct+= resultado_hr_extras[2]
                                hr_extra_descanso_mix_diur+=resultado_hr_extras[3]
                                hr_extra_descanso_mix_noct+=resultado_hr_extras[4]

                                hr_extra_descanso_diur_3h+=resultado_hr_extras[5]
                                hr_extra_descanso_noct_3h+=resultado_hr_extras[6]
                                hr_extra_descanso_mix_diu_3h+=resultado_hr_extras[7]
                                hr_extra_descanso_mix_noc_3h+=resultado_hr_extras[8]


                            elif trabj_feriad:
                                dias_traba_feriados+=1
                                min_dias_traba_feriados+=trabajo_en_hrs +  trabajo_en_hrs_adicionales

                                resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                hr_extra_feriado_diur+= resultado_hr_extras[1]
                                hr_extra_feriado_noct+= resultado_hr_extras[2]
                                hr_extra_feriado_mix_diur+=resultado_hr_extras[3]
                                hr_extra_feriado_mix_noct+=resultado_hr_extras[4]

                                hr_extra_feriado_diur_3h+=resultado_hr_extras[5]
                                hr_extra_feriado_noct_3h+=resultado_hr_extras[6]
                                hr_extra_feriado_mix_diu_3h+=resultado_hr_extras[7]
                                hr_extra_feriado_mix_noc_3h+=resultado_hr_extras[8]

                            elif trabj_descanso:
                                if lista_si_trabajo_ese_dia.Colaborador.Departamento=='Administrativo' and saber_dia !=6:
                                    dias_trabajo_hr_regulares_Adicionales+=1
                                    min_dias_trabajo_hr_regulares_Adicionales+=trabajo_en_hrs + trabajo_en_hrs_adicionales
                                    resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                    num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                    hr_extras_diurnas+= resultado_hr_extras[1]
                                    hr_extras_nocturn+= resultado_hr_extras[2]
                                    hr_extra_mixta_diu+=resultado_hr_extras[3]
                                    hr_extra_mixta_noc+=resultado_hr_extras[4]

                                    hr_extra_diurna_3h+=resultado_hr_extras[5]
                                    hr_extra_noctur_3h+=resultado_hr_extras[6]
                                    hr_extra_mix_diu_3h+=resultado_hr_extras[7]
                                    hr_extra_mix_noc_3h+=resultado_hr_extras[8]
                                else:     
                                    dias_trabaja_descanso+=1
                                    min_dias_trabaja_descanso+=trabajo_en_hrs + trabajo_en_hrs_adicionales
                                    resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                    num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]

                                    hr_extra_descanso_diur+= resultado_hr_extras[1]
                                    hr_extra_descanso_noct+= resultado_hr_extras[2]
                                    hr_extra_descanso_mix_diur+=resultado_hr_extras[3]
                                    hr_extra_descanso_mix_noct+=resultado_hr_extras[4]

                                    hr_extra_descanso_diur_3h+=resultado_hr_extras[5]
                                    hr_extra_descanso_noct_3h+=resultado_hr_extras[6]
                                    hr_extra_descanso_mix_diu_3h+=resultado_hr_extras[7]
                                    hr_extra_descanso_mix_noc_3h+=resultado_hr_extras[8]

                                
                            else:  
                                
                                hrs_en_contrato= colaborador_obj.Jornada_diaria *60
                                min_dias_trabajo_hr_regulares_Adicionales+=trabajo_en_hrs_adicionales
                                
                                if trabajo_en_hrs>=hrs_en_contrato:
                                    dias_trabajados_compl+=1
                                    #Estudio de Hora extras 
                                    resultado_hr_extras= fun_buscar_horas_extras(limite_hr_semanales, num_hr_extras_acumuladas_en_semana_, lista_si_trabajo_ese_dia.Minutos_Extras_Diurnos , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_diurnas , lista_si_trabajo_ese_dia.Minutos_Extras_Noctuno , lista_si_trabajo_ese_dia.Minutos_extras_mixtas_nocturnas , lista_si_trabajo_ese_dia.Minutos_extras_diurnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_diurnas_3hr , lista_si_trabajo_ese_dia.Minutos_extras_nocturnos_3h , lista_si_trabajo_ese_dia.Minutos_de_extras_mixtas_nocturnas_3hr)
                                    num_hr_extras_acumuladas_en_semana_ = resultado_hr_extras[0]
                                    hr_extras_diurnas+= resultado_hr_extras[1]
                                    hr_extras_nocturn+= resultado_hr_extras[2]
                                    hr_extra_mixta_diu+=resultado_hr_extras[3]
                                    hr_extra_mixta_noc+=resultado_hr_extras[4]
                                    hr_extra_diurna_3h+=resultado_hr_extras[5]
                                    hr_extra_noctur_3h+=resultado_hr_extras[6]
                                    hr_extra_mix_diu_3h+=resultado_hr_extras[7]
                                    hr_extra_mix_noc_3h+=resultado_hr_extras[8]
                                    

                                else:
                                    dias_trabajados_no_compl+=1
                                    min_ausencia+=lista_si_trabajo_ese_dia.Minutos_Faltantes_turno
                                    #print(min_ausencia,'min_ausencia')
                                dias_trabajados+=1
                                
                        elif fecha_iterador in  lista_vacas_trabj_final:
                            vacaciones+=1
                        
                        elif saber_dia in lista_descanso   :
                            dia_descanso+=1
                        
                            
                        elif fecha_iterador in lista_feriados and fecha_iterador <= fecha_pago_datetime :
                            dias_trabajados+=1
                            dias_trabajados_compl+=1   
                        
                        elif fecha_iterador in  lista_incap_trabj_final and fecha_iterador <= fecha_pago_datetime:
                            incapacidad+=1

                        elif fecha_iterador in lista_incap_trabj_caja_paga_final and fecha_iterador <= fecha_pago_datetime:
                            incapacidad_caja+=1

                        elif fecha_iterador in  lista_lic_p_trabj_final and fecha_iterador <= fecha_pago_datetime:
                            licenc_paga+=1

                        
                        
                        else:
                            # no fue a trabajar 
                            if colaborador_obj.Departamento!='Ruta':

                                if colaborador_obj.Jornada_Laboral_Equitativa_Semanal == False:

                                    lista_estudiar_planificacion= Planificacion.objects.filter(Colaborador__pk=colaborador_obj.pk, Dia_Inicio_Planificacion__lte=fecha_iterador , Dia_Salidad_Planificacion__gte=fecha_iterador )
                            #lista_estudiar_planificacion=lista_colaboradores_filtrados.filter(Colaborador__pk=id_col)
                                
                                    if len(lista_estudiar_planificacion)>0:
                                        #si hay datos y se elegira la ultima
                                        u=len(lista_estudiar_planificacion)-1
                                        lista_datos_importantes=fun_saber_datos_depende_dia_para_hoja_tiempo(lista_estudiar_planificacion[u], saber_dia ) #lista con la ultima de planificacion, dia de la semana
                                        
                                        
                                        #[Cliente,hora_entrada_contrato,hora_salida_contrato,jornada_diaria, Almuerzo,hora_de_inicio_almuerzo, dia_descanso, tipo_de_jornada]
                                    
                                        jornada_semanal=48

                                        #saber si es dia de descanso para marcarlo como dia de descanso

                                        #sino es dia de descanso pues pedir toda la info para crear 1 dia unico 

                                    
                                    
                                        jornada_diaria =lista_datos_importantes[3]
                                        if jornada_diaria!=colab_hr_jorn_diaria:
                                            min_ausencia+=jornada_diaria*60
                                        else:
                                            dia_ausencia+=1

                                    
                                    else:   
                                        dia_ausencia+=1
                                else:   
                                    dia_ausencia+=1
                        


                        if saber_dia==6 and num_hr_acumuladas_en_semana  <  hr_jornada_semanal*60:

                            min_ausencia_ruta += hr_jornada_semanal*60 - num_hr_acumuladas_en_semana
                            
                        

                        if fecha_iterador==fecha_final_corte.date():
                            iter_inicio=False
                        
                        else:
                            fecha_iterador+=timedelta(days=1)


                ###aQUI TERMINA WHILE
                            
                if  colaborador_obj.Departamento=='Ruta' and min_ausencia_ruta>0:
                    min_ausencia=min_ausencia_ruta

                if colaborador_obj.Departamento=='Ruta':
                    sueldo_base=sueldo_quincena - ( incapacidad*sueldo_diario +licenc_paga*sueldo_diario  + sueldo_diario_vacas*vacaciones + incapacidad_caja*sueldo_diario)
                elif bool_fecha_ingreso_quincena:
                    sueldo_base= (dias_trabajados*sueldo_diario)- ( incapacidad*sueldo_diario +licenc_paga*sueldo_diario + sueldo_diario_vacas*vacaciones)
                else:
                    sueldo_base=sueldo_quincena - ( incapacidad*sueldo_diario +licenc_paga*sueldo_diario + sueldo_diario_vacas*vacaciones + incapacidad_caja*sueldo_diario)
                

                if sueldo_base<=0:
                        sueldo_base=0
                ##print('Sueldo Quincenal: +',sueldo_base)
                extra_time_total=(hr_extras_diurnas/60)*1.25* sueldo_hr+(hr_extras_nocturn/60)*1.5* sueldo_hr+(hr_extra_mixta_diu/60)*1.5* sueldo_hr+(hr_extra_mixta_noc/60)*1.75* sueldo_hr+(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr+(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr+(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr+(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr+(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr+(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr+(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr+(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr+(hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr+(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr+(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr+(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr+(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr+(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr+(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr+(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr+(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr+(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr+(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr+ (hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr
              
                if colaborador_obj.Departamento=='Ruta':
                    
                    sueldo_bruto=sueldo_base+(min_dias_trabaja_descanso/60)*1.5* sueldo_hr+(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr+ (min_dias_traba_feriados/60)*2.5* sueldo_hr + extra_time_total + incapacidad*sueldo_diario +licenc_paga*sueldo_diario+bonos_con_impuesto+(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                    
                else:
                    sueldo_bruto=sueldo_base+(min_dias_trabaja_descanso/60)*1.5* sueldo_hr+(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr+ (min_dias_traba_feriados/60)*2.5* sueldo_hr+ extra_time_total+incapacidad*sueldo_diario+licenc_paga*sueldo_diario+bonos_con_impuesto+(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
               
                sueldo_cal_deduciones=sueldo_bruto- min_ausencia*sueldo_min - dia_ausencia*sueldo_diario - duduciones_con_impuesto 
                if sueldo_cal_deduciones<=0:
                    sueldo_cal_deduciones=0
                ##print('sueldo_cal_deduciones',sueldo_cal_deduciones)
                ##print('***************\n Reducciones de ley\n*****************')
                
                    
                seguro_social=sueldo_cal_deduciones*0.0975
                
                ##print('seguro_social: -',seguro_social)
                ##print('seguro_educacion: -',sueldo_cal_deduciones*0.0125)
               
                ####Sacar el ISLR ###
                ### 11.000 Año o mesno 0 dolares 
                ### mas 11.000 año o mas entre 50.000 un 15%
                #### un 50.000 25%
                
                ##print('total_deduciones: - ',total_deduciones)
                ##print('***************\n Bonos por debajo la mesa\n*****************')
                ##print('bonos sin impuesto: + ',bonos_sin_impuesto)
                total_bonos_sin_impuesto=bonos_sin_impuesto
                
                ##print('***************\n Final de datos \n*****************')
                
                ##print('sueldo_neto: +', sueldo_neto, colaborador_obj.Colaborador_nombre)
                ##print('total_bonos_sin_impuesto: +', total_bonos_sin_impuesto)
                lista_vacacioness=fun_vacaciones_calculo(vacaciones,sueldo_diario_vacas)
                vacaciones_bruto,vacaciones_ss,vacaciones_se,vacaciones_ilsr,total_vacas_deducciones,vacaciones_neto,vacaciones_ss_patron,vacaciones_se_patron,vacacioones_total_patron =lista_vacacioness[0],lista_vacacioness[1],lista_vacacioness[2],lista_vacacioness[3],lista_vacacioness[4],lista_vacacioness[5],lista_vacacioness[6],lista_vacacioness[7],lista_vacacioness[8]

                decimo_xii_quincena=(sueldo_cal_deduciones+vacaciones_bruto)/12
                seg_social_decimo=decimo_xii_quincena*0.0725
                seg_social_decimo_patron=decimo_xii_quincena*0.1075
                islr_decimo_xiii=0
                seguro_social_patrono=sueldo_cal_deduciones*0.1225
                seguro_educacional_patrono=sueldo_cal_deduciones*0.015

                islr_calculo_xiii=decimo_xii_quincena*2*12*13
                
                islr_25=0
                islr_15=0
                if islr_calculo_xiii>50000:
                    islr_25=(islr_calculo_xiii-50000)*0.25
                if islr_calculo_xiii>11000 and islr_calculo_xiii > 50000:
                    islr_15=5850
                elif islr_calculo_xiii>11000 and islr_calculo_xiii<=50000:
                     islr_15=(islr_calculo_xiii-11000)*0.15
                
                if islr_25+islr_15 >0:
                    islr_decimo_xiii=(islr_15+islr_25)/(13*24)

                # Sacar  islr quincenal correcto
                # Sacar  islr quincenal correcto
                sueldo_vacas_quincena=vacaciones_bruto+sueldo_cal_deduciones
                if sueldo_vacas_quincena> 0:  
                    porcen_sueldo=sueldo_cal_deduciones / sueldo_vacas_quincena
                else:
                    porcen_sueldo =0

                if sueldo_vacas_quincena> 0:  
                    porcen_vacas=vacaciones_bruto / sueldo_vacas_quincena
                else:
                    porcen_vacas =0
                #

                islr_calculo=sueldo_vacas_quincena*2*13
                islr=0
                islr_25=0
                islr_15=0
                if islr_calculo>50000:
                    islr_25=(islr_calculo-50000)*0.25
                if islr_calculo>11000 and islr_calculo > 50000:
                    islr_15=5850
                elif islr_calculo>11000 and islr_calculo<=50000:
                     islr_15=(islr_calculo-11000)*0.15
                
                if islr_25+islr_15 >0:
                    islr=(islr_15+islr_25)/26
                
                vacaciones_ilsr=islr*porcen_vacas
                islr=islr*porcen_sueldo

                ##print('ISLR: -',islr)
               
                total_dedu_ley=seguro_social+sueldo_cal_deduciones*0.0125 + islr# falta islr
                '''#print('Total Deduccion legales: - ',total_dedu_ley)#islr esta en 0
                #print('Acreddores Hipotecario: - ', acredores_hipotecario) #cuotas_acredores_hipotecario=0
                #print('acredores_empresa: - ', acredores_empresa) #cuotas_acredores_empresa=0
                #print('bono reducion sin impouesto: - ',deduciones_sin_impuesto)
                #print('***************\n Total Deducciones\n*****************')
                '''
                total_deduciones=total_dedu_ley+acredores_hipotecario+acredores_empresa+deduciones_sin_impuesto
                if total_deduciones > sueldo_cal_deduciones:
                
                    dif=total_deduciones-sueldo_cal_deduciones
                    if dif >acredores_empresa:
                        acredores_empresa=dif

                        fun_guardar_datos_en_acreedores_cuotas_liquidacion_empresa(colaborador_obj.pk , planilla, fecha_pago_date , acredores_empresa , 'Planilla')

                    else:
                        acredores_empresa=acredores_empresa-dif

                        fun_guardar_datos_en_acreedores_cuotas_liquidacion_empresa(colaborador_obj.pk , planilla, fecha_pago_date , acredores_empresa , 'Planilla')

                    if acredores_hipotecario >0:

                        fun_guardar_datos_en_acreedores_cuotas_liquidacion_hipotecario(colaborador_obj.pk , planilla, fecha_pago_date , acredores_hipotecario , 'Planilla')
                         
                total_deduciones=total_dedu_ley+acredores_hipotecario+acredores_empresa+deduciones_sin_impuesto
                        

                
                sueldo_neto=sueldo_cal_deduciones-total_deduciones
                


                decimo_xiii_quincena_neto=decimo_xii_quincena-islr_decimo_xiii-seg_social_decimo
                Pago_XIII_periodo_Bruto=0
                Pago_XIII_periodo_Seguro_Social=0
    
                Pago_XIII_periodo_ISLR=0
                

                Pago_XIII_periodo_Neto=0
                Deduccion_XIII_periodo_Seguro_social_patron=0


                '''if QQ in lista_xiii: #pagaremos XIII Acumulado
                   
                    lista_buscar_decimo=fun_lista_buscar_decimo(QQ,year)
                    lista_decimo_xiii=fun_calculo_decimo_planilla(colaborador_obj.pk,lista_buscar_decimo)
                    Pago_XIII_periodo_Bruto= lista_decimo_xiii[0]+decimo_xii_quincena
                    Pago_XIII_periodo_Seguro_Social=lista_decimo_xiii[1]+seg_social_decimo
                    Pago_XIII_periodo_ISLR=lista_decimo_xiii[2]+islr_decimo_xiii
                    Pago_XIII_periodo_Neto=lista_decimo_xiii[3]+decimo_xiii_quincena_neto
                    Deduccion_XIII_periodo_Seguro_social_patron=lista_decimo_xiii[4]+seg_social_decimo_patron'''

                prima_antiguedad=0
                if colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
                    prima_antiguedad=(sueldo_cal_deduciones + vacaciones_bruto )/52
                
                riesgo_profesional=(sueldo_cal_deduciones + vacaciones_bruto )*0.021
                vacaciones_acumuladas_patron=0

                vacaciones_acumuladas_patron*=1.1375
                
                totales_patronales=vacaciones_acumuladas_patron+riesgo_profesional+prima_antiguedad+seguro_social_patrono+seguro_educacional_patrono+seg_social_decimo_patron+vacacioones_total_patron +Deduccion_XIII_periodo_Seguro_social_patron+decimo_xii_quincena
                total_general_sueldo=totales_patronales+total_bonos_sin_impuesto+sueldo_cal_deduciones+Pago_XIII_periodo_Bruto+vacaciones_bruto
                
                  
                #totales_patronales=totales_patronales
                #Total_general_sueldo=total_general_sueldo
                #ruta se suma el sueldo bruto las jornadas laborales y adminsitrativo por debajo la mesa
                #a partir cuanto se quita la quincena islr sobre renta


                ##print('***************\n*****************')
                #aqui se graba la info de trabajador
               
                try:
                    created=Panilla_por_periodo_quincenal.objects.get(Colaborador__pk=colaborador_obj.pk,Periodo=planilla)
                    #save
                    if True:
                        created.Periodo=planilla
                        created.Colaborador=colaborador_obj
                        created.Trabajo_quincena_sin_falta=dia_ausencia==0
                        created.Dias_Trabajado=dias_trabajados
                        created.Dias_Trabajado_Completo=dias_trabajados_compl
                        created.Dias_trabajados_incompleto=dias_trabajados_no_compl
                        created.Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales
                        created.Dias_Vacaciones=vacaciones
                        created.Dias_Incapacidad=incapacidad+incapacidad_caja
                        created.Dias_Licencia_Paga=licenc_paga
                        created.Dias_Descanso=dia_descanso
                        created.Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso
                        created.Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        created.Dias_Trabajo_Feriado=min_dias_traba_feriados
                        created.Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        created.Dias_Trabajo_Descanso=min_dias_trabaja_descanso
                        created.Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        created.Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales
                        created.Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                        created.Sueldo_quincenal=sueldo_quincena
                        created.Sueldo_Diario=sueldo_diario
                        created.Sueldo_HR=sueldo_hr
                        created.Sueldo_MIN=sueldo_min
                        created.MIN_Ausencia=min_ausencia
                        created.Pago_MIN_Ausencia=min_ausencia*sueldo_min
                        created.Dia_ausencia=dia_ausencia
                        created.Pago_Dia_ausencia=dia_ausencia*sueldo_diario
                        created.HR_extras_diurnas=hr_extras_diurnas
                        created.Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr
                        created.HR_extras_nocturnas=hr_extras_nocturn
                        created.Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr
                        created.HR_extras_diurnas_mixta=hr_extra_mixta_diu
                        created.Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr
                        created.HR_extras_nocturnas_mixta=hr_extra_mixta_noc
                        created.Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr
                        created.HR_extras_diurnas_3h=hr_extra_diurna_3h
                        created.Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr
                        created.HR_extras_nocturnas_3h=hr_extra_noctur_3h
                        created.Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr
                        created.HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h
                        created.Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr
                        created.HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h
                        created.Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr
                        created.HR_extras_diurnas_Feriado=hr_extra_feriado_diur

                        created.Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr
                        created.HR_extras_nocturnas_Feriado=hr_extra_feriado_noct
                        created.Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr
                        created.HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur
                        created.Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr
                        created.HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct
                        created.Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr
   
                        created.HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h
                        created.Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr
                        created.HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h
                        created.Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        created.HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h
                        created.Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        created.HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h
                        created.Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr
                        created.HR_extras_diurnas_descanso=hr_extra_descanso_diur
                        created.Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr
                        created.HR_extras_nocturnas_descanso=hr_extra_descanso_noct
                        created.Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr
                        created.HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur
                        created.Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr
                        created.HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct
                        created.Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr
                        #+3h
                        created.HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h
                        created.Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr
                        created.HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h
                        created.Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        created.HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h
                        created.Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        created.HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h
                        created.Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr
                        #deducciones
                        created.Pago_Bono_con_Impuesto=bonos_con_impuesto
                        created.Pago_Bono_sin_Impuesto=bonos_sin_impuesto

                        #deduciones
                        created.Deduccion_con_Impuesto=duduciones_con_impuesto
                        created.Deduccion_sin_Impuesto=deduciones_sin_impuesto
                        created.Descuento_Acreedores_Hipotecario=acredores_hipotecario
                        created.Descuento_Acreedores_Empresa=acredores_empresa
                        #Totales 
                        created.Sueldo_base_quincenal=sueldo_base
                        created.Pago_Total_Sobretiempo_quincenal=extra_time_total
                        created.Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        created.Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        created.Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        created.Pago_Vacaciones=vacaciones_bruto 
                        created.Pago_Incapacidad=incapacidad*sueldo_diario
                        created.Pago_Licencia_paga= licenc_paga*sueldo_diario
                        created.Sueldo_Bruto=sueldo_bruto
                        
                        #          
                        created.Pago_quincena_despues_descuento=sueldo_cal_deduciones

                        created.Deduccion_Seguro_Social=seguro_social
                        created.Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125
                        created.Deduccion_ISLR=islr
                        created.Total_deduciones_Ley= total_dedu_ley
                        created.Total_deduciones_quinceas=total_deduciones
                        created.Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto
                        created.Pago_Sueldo_neto=sueldo_neto
                        #patrono
                        
                        created.Decimo_xiii_quincena_Bruto=decimo_xii_quincena
                        created.Deduccion_Seg_social_decimo=seg_social_decimo
                        created.Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii
                        created.Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto
                        created.Deduccion_Seg_social_Patron=seguro_social_patrono
                        created.Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron
                        created.Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono
                        created.Prima_Antiguedad_Patron=prima_antiguedad
                        created.Riesgo_Profesional_Patron=riesgo_profesional
                        created.Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron
                        created.Fecha_pago_quincena
                        created.Totales_patronales=totales_patronales
                        created.Total_general_sueldo=total_general_sueldo
                        # Vacaciones numeros
                        created.Vacaciones_Seguro_Social=vacaciones_ss
                        created.Vacaciones_Seguro_educacion=vacaciones_se
                        created.Vacaciones_ISLR=vacaciones_ilsr
                        created.Deducion_Vacaciones_Totales=total_vacas_deducciones
                        created.Pago_Vacaciones_Neto=vacaciones_neto
                        created.Vacaciones_Seguro_Social_patron=vacaciones_ss_patron
                        created.Vacaciones_Seguro_educacion_patron=vacaciones_se_patron
                        created.Deducion_Vacaciones_Totales_patron=vacacioones_total_patron
                        #xiii si aplica pagar en quincena
                        created.Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto
                        created.Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social
                        created.Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR
                        created.Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto
                        created.Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron
                       
                        created.save()
                
                except:
                    created=Panilla_por_periodo_quincenal.objects.create(Colaborador=colaborador_obj,
                                                                         
                                                                         Periodo=planilla,
                                                                         Trabajo_quincena_sin_falta=dia_ausencia==0,
                         Dias_Trabajado=dias_trabajados
                        , Dias_Trabajado_Completo=dias_trabajados_compl
                        , Dias_trabajados_incompleto=dias_trabajados_no_compl
                        , Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales
                        , Dias_Vacaciones=vacaciones
                        , Dias_Incapacidad=incapacidad+incapacidad_caja
                        , Dias_Licencia_Paga=licenc_paga
                        , Dias_Descanso=dia_descanso
                        , Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso
                        , Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        , Dias_Trabajo_Feriado=min_dias_traba_feriados
                        , Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        , Dias_Trabajo_Descanso=min_dias_trabaja_descanso
                        , Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        , Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales
                        , Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr
                        , Sueldo_quincenal=sueldo_quincena
                        , Sueldo_Diario=sueldo_diario
                        , Sueldo_HR=sueldo_hr
                        , Sueldo_MIN=sueldo_min
                        , MIN_Ausencia=min_ausencia
                        , Pago_MIN_Ausencia=min_ausencia*sueldo_min
                        , Dia_ausencia=dia_ausencia
                        , Pago_Dia_ausencia=dia_ausencia*sueldo_diario
                        , HR_extras_diurnas=hr_extras_diurnas
                        , Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr
                        , HR_extras_nocturnas=hr_extras_nocturn
                        , Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr
                        , HR_extras_diurnas_mixta=hr_extra_mixta_diu
                        , Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr
                        , HR_extras_nocturnas_mixta=hr_extra_mixta_noc
                        , Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr
                        , HR_extras_diurnas_3h=hr_extra_diurna_3h
                        , Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr
                        , HR_extras_nocturnas_3h=hr_extra_noctur_3h
                        , Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr
                        , HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h
                        , Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr
                        , HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h
                        , Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr
                        , HR_extras_diurnas_Feriado=hr_extra_feriado_diur

                        , Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr
                        , HR_extras_nocturnas_Feriado=hr_extra_feriado_noct
                        , Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr
                        , HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur
                        , Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr
                        , HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct
                        , Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr
   
                        , HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h
                        , Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr
                        , HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h
                        , Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        , HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h
                        , Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr
                        , HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h
                        , Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr
                        , HR_extras_diurnas_descanso=hr_extra_descanso_diur
                        , Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr
                        , HR_extras_nocturnas_descanso=hr_extra_descanso_noct
                        , Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr
                        , HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur
                        , Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr
                        , HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct
                        , Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr
                        #+3h
                        , HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h
                        , Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr
                        , HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h
                        , Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        , HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h
                        , Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr
                        , HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h
                        , Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr
                        #deducciones
                        , Pago_Bono_con_Impuesto=bonos_con_impuesto
                        , Pago_Bono_sin_Impuesto=bonos_sin_impuesto

                        #deduciones
                        , Deduccion_con_Impuesto=duduciones_con_impuesto
                        , Deduccion_sin_Impuesto=deduciones_sin_impuesto
                        , Descuento_Acreedores_Hipotecario=acredores_hipotecario
                        , Descuento_Acreedores_Empresa=acredores_empresa
                        #Totales 
                        , Sueldo_base_quincenal=sueldo_base
                        , Pago_Total_Sobretiempo_quincenal=extra_time_total
                        , Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr
                        , Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr
                        , Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr
                        , Pago_Vacaciones=vacaciones_bruto 
                        , Pago_Incapacidad=incapacidad*sueldo_diario
                        , Pago_Licencia_paga= licenc_paga*sueldo_diario
                        , Sueldo_Bruto=sueldo_bruto
                        
                        #          
                        , Pago_quincena_despues_descuento=sueldo_cal_deduciones

                        , Deduccion_Seguro_Social=seguro_social
                        ,  Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125
                        , Deduccion_ISLR=islr
                        , Total_deduciones_Ley= total_dedu_ley
                        , Total_deduciones_quinceas=total_deduciones
                        , Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto
                        , Pago_Sueldo_neto=sueldo_neto
                        #patron
                        , Decimo_xiii_quincena_Bruto=decimo_xii_quincena
                        , Deduccion_Seg_social_decimo=seg_social_decimo
                        , Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii
                        , Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto
                        , Deduccion_Seg_social_Patron=seguro_social_patrono
                        , Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron
                        , Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono
                        , Prima_Antiguedad_Patron=prima_antiguedad
                        , Riesgo_Profesional_Patron=riesgo_profesional
                        , Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron
                        , Fecha_pago_quincena=fecha_pago_date
                        , Totales_patronales=totales_patronales
                        , Total_general_sueldo=total_general_sueldo
                        , Vacaciones_Seguro_Social=vacaciones_ss
                        , Vacaciones_Seguro_educacion=vacaciones_se
                        , Vacaciones_ISLR=vacaciones_ilsr
                        , Deducion_Vacaciones_Totales=total_vacas_deducciones
                        , Pago_Vacaciones_Neto=vacaciones_neto
                        , Vacaciones_Seguro_Social_patron=vacaciones_ss_patron
                        , Vacaciones_Seguro_educacion_patron=vacaciones_se_patron
                        , Deducion_Vacaciones_Totales_patron=vacacioones_total_patron
                        #xiii pago en quincena
                        , Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto
                        , Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social
                        , Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR
                        , Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto
                        , Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron
                        )
                   

                ##### Hacer comparativo por cliente  ###
                lista_cliente_periodo_indiv=[]
                lista_final_clientess=[]
                
                for cliente in lista_cliente_periodo:
                    num_cliente=cliente[0]
                    
                    if num_cliente not in lista_cliente_periodo_indiv:
                        lista_cliente_periodo_indiv.append(num_cliente)
                
                for cliente in lista_cliente_periodo_indiv:
                    sumando=0
                    
                    for zz in  lista_cliente_periodo:
                        if zz[0]== cliente:
                            sumando+=zz[1]
                    lista_final_clientess.append([cliente , sumando])
                
                total_minutos_colaborador=0
                for yy in lista_final_clientess:
                    total_minutos_colaborador+=yy[1]

                lista_cliente_porce=[]
                for yy in lista_final_clientess:
                    porcentaje=yy[1] /total_minutos_colaborador
                    lista_cliente_porce.append([yy[0],porcentaje] )
                
                #cliente guarda info correcta por cliente
                
                for porcentaje in lista_cliente_porce:
                   cliente_obj=Info_Clientes.objects.get(pk=porcentaje[0])
                   porcentaj=porcentaje[1]
                   try:
                    created=Panilla_por_periodo_quincenal_clientes.objects.get(Colaborador__pk=colaborador_obj.pk,Periodo=planilla, Cliente__pk=cliente_obj.pk)
                    #save
                    if True:
                        created.Cliente=cliente_obj
                        created.Periodo=planilla
                        created.Colaborador=colaborador_obj
                        created.Trabajo_quincena_sin_falta=dia_ausencia==0
                        created.Dias_Trabajado=dias_trabajados * porcentaj
                        created.Dias_Trabajado_Completo=dias_trabajados_compl * porcentaj
                        created.Dias_trabajados_incompleto=dias_trabajados_no_compl * porcentaj
                        created.Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales * porcentaj
                        created.Dias_Vacaciones=vacaciones * porcentaj
                        created.Dias_Incapacidad=incapacidad+incapacidad_caja * porcentaj
                        created.Dias_Licencia_Paga=licenc_paga * porcentaj
                        created.Dias_Descanso=dia_descanso * porcentaj
                        created.Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso * porcentaj
                        created.Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        created.Dias_Trabajo_Feriado=min_dias_traba_feriados * porcentaj
                        created.Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        created.Dias_Trabajo_Descanso=min_dias_trabaja_descanso * porcentaj
                        created.Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        created.Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales * porcentaj
                        created.Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr * porcentaj
                        created.Sueldo_quincenal=sueldo_quincena * porcentaj
                        created.Sueldo_Diario=sueldo_diario * porcentaj
                        created.Sueldo_HR=sueldo_hr * porcentaj
                        created.Sueldo_MIN=sueldo_min * porcentaj
                        created.MIN_Ausencia=min_ausencia
                        created.Pago_MIN_Ausencia=min_ausencia*sueldo_min * porcentaj
                        created.Dia_ausencia=dia_ausencia * porcentaj
                        created.Pago_Dia_ausencia=dia_ausencia*sueldo_diario * porcentaj
                        created.HR_extras_diurnas=hr_extras_diurnas * porcentaj
                        created.Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas=hr_extras_nocturn * porcentaj
                        created.Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta=hr_extra_mixta_diu * porcentaj
                        created.Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta=hr_extra_mixta_noc * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_3h=hr_extra_diurna_3h * porcentaj
                        created.Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_3h=hr_extra_noctur_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_Feriado=hr_extra_feriado_diur * porcentaj

                        created.Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_Feriado=hr_extra_feriado_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr * porcentaj
   
                        created.HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h * porcentaj
                        created.Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr * porcentaj
                        created.HR_extras_diurnas_descanso=hr_extra_descanso_diur * porcentaj
                        created.Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_descanso=hr_extra_descanso_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr * porcentaj
                        #+3h
                        created.HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h * porcentaj
                        created.Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        created.HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h * porcentaj
                        created.Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        created.HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h * porcentaj
                        created.Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr * porcentaj
                        #deducciones
                        created.Pago_Bono_con_Impuesto=bonos_con_impuesto * porcentaj
                        created.Pago_Bono_sin_Impuesto=bonos_sin_impuesto * porcentaj

                        #deduciones
                        created.Deduccion_con_Impuesto=duduciones_con_impuesto * porcentaj
                        created.Deduccion_sin_Impuesto=deduciones_sin_impuesto * porcentaj
                        created.Descuento_Acreedores_Hipotecario=acredores_hipotecario * porcentaj
                        created.Descuento_Acreedores_Empresa=acredores_empresa * porcentaj
                        #Totales 
                        created.Sueldo_base_quincenal=sueldo_base * porcentaj
                        created.Pago_Total_Sobretiempo_quincenal=extra_time_total * porcentaj
                        created.Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        created.Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        created.Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        created.Pago_Vacaciones=vacaciones_bruto  * porcentaj
                        created.Pago_Incapacidad=incapacidad*sueldo_diario * porcentaj
                        created.Pago_Licencia_paga= licenc_paga*sueldo_diario * porcentaj
                        created.Sueldo_Bruto=sueldo_bruto * porcentaj
                        
                        #          
                        created.Pago_quincena_despues_descuento=sueldo_cal_deduciones * porcentaj

                        created.Deduccion_Seguro_Social=seguro_social * porcentaj
                        created.Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125 * porcentaj
                        created.Deduccion_ISLR=islr * porcentaj
                        created.Total_deduciones_Ley= total_dedu_ley * porcentaj
                        created.Total_deduciones_quinceas=total_deduciones * porcentaj
                        created.Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto * porcentaj
                        created.Pago_Sueldo_neto=sueldo_neto * porcentaj
                        #patrono
                        
                        created.Decimo_xiii_quincena_Bruto=decimo_xii_quincena * porcentaj
                        created.Deduccion_Seg_social_decimo=seg_social_decimo * porcentaj
                        created.Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii * porcentaj
                        created.Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto * porcentaj
                        created.Deduccion_Seg_social_Patron=seguro_social_patrono * porcentaj
                        created.Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron * porcentaj
                        created.Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono * porcentaj
                        created.Prima_Antiguedad_Patron=prima_antiguedad * porcentaj
                        created.Riesgo_Profesional_Patron=riesgo_profesional * porcentaj
                        created.Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron * porcentaj
                        created.Fecha_pago_quincena=fecha_pago_date 
                        created.Totales_patronales=totales_patronales * porcentaj
                        created.Total_general_sueldo=total_general_sueldo * porcentaj
                        created.Porcentaje= porcentaj
                        #vacaciones
                        created.Vacaciones_Seguro_Social=vacaciones_ss* porcentaj
                        created.Vacaciones_Seguro_educacion=vacaciones_se* porcentaj
                        created.Vacaciones_ISLR=vacaciones_ilsr* porcentaj
                        created.Deducion_Vacaciones_Totales=total_vacas_deducciones* porcentaj
                        created.Pago_Vacaciones_Neto=vacaciones_neto* porcentaj
                        created.Vacaciones_Seguro_Social_patron=vacaciones_ss_patron* porcentaj
                        created.Vacaciones_Seguro_educacion_patron=vacaciones_se_patron* porcentaj
                        created.Deducion_Vacaciones_Totales_patron=vacacioones_total_patron* porcentaj
                        #decimo pago cliente en quincena
                        created.Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto* porcentaj
                        created.Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social* porcentaj
                        created.Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR* porcentaj
                        created.Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto* porcentaj
                        created.Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron* porcentaj
                        

                        created.save()
                
                   except:
                    created=Panilla_por_periodo_quincenal_clientes.objects.create(Colaborador=colaborador_obj,
                                                                         Cliente=cliente_obj,
                                                                         Periodo=planilla,
                                                                         Trabajo_quincena_sin_falta=dia_ausencia==0,
                         Dias_Trabajado=dias_trabajados * porcentaj
                        , Dias_Trabajado_Completo=dias_trabajados_compl * porcentaj
                        , Dias_trabajados_incompleto=dias_trabajados_no_compl * porcentaj 
                        , Dias_trabajados_hr_regulares=dias_trabajo_hr_regulares_Adicionales * porcentaj
                        , Dias_Vacaciones=vacaciones * porcentaj
                        , Dias_Incapacidad=incapacidad+incapacidad_caja * porcentaj
                        , Dias_Licencia_Paga=licenc_paga * porcentaj
                        , Dias_Descanso=dia_descanso * porcentaj
                        , Dias_Trabajo_Feriado_descanso=dias_trabj_fer_con_descanso * porcentaj
                        , Pago_Dias_Trabajo_Feriado_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        , Dias_Trabajo_Feriado=min_dias_traba_feriados * porcentaj
                        , Pago_Dias_Trabajo_Feriado=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        , Dias_Trabajo_Descanso=min_dias_trabaja_descanso * porcentaj
                        , Pago_Dias_Trabajo_Descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        , Dias_Trabajo_HR_Regulares_Adicionales=min_dias_trabajo_hr_regulares_Adicionales * porcentaj
                        , Pago_Dias_Trabajo_HR_Regulares_Adicionales=(min_dias_trabajo_hr_regulares_Adicionales/60)* sueldo_hr * porcentaj
                        , Sueldo_quincenal=sueldo_quincena * porcentaj
                        , Sueldo_Diario=sueldo_diario * porcentaj
                        , Sueldo_HR=sueldo_hr * porcentaj
                        , Sueldo_MIN=sueldo_min * porcentaj
                        , MIN_Ausencia=min_ausencia * porcentaj
                        , Pago_MIN_Ausencia=min_ausencia*sueldo_min * porcentaj
                        , Dia_ausencia=dia_ausencia * porcentaj
                        , Pago_Dia_ausencia=dia_ausencia*sueldo_diario * porcentaj
                        , HR_extras_diurnas=hr_extras_diurnas * porcentaj
                        , Pago_HR_extras_diurnas=(hr_extras_diurnas/60)*1.25* sueldo_hr * porcentaj
                        , HR_extras_nocturnas=hr_extras_nocturn * porcentaj
                        , Pago_HR_extras_nocturnas=(hr_extras_nocturn/60)*1.5* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta=hr_extra_mixta_diu * porcentaj
                        , Pago_HR_extras_diurnas_mixta=(hr_extra_mixta_diu/60)*1.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta=hr_extra_mixta_noc * porcentaj
                        , Pago_HR_extras_nocturnas_mixta=(hr_extra_mixta_noc/60)*1.75* sueldo_hr * porcentaj
                        , HR_extras_diurnas_3h=hr_extra_diurna_3h * porcentaj
                        , Pago_HR_extras_diurnas_3h=(hr_extra_diurna_3h/60)*1.25*1.75* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_3h=hr_extra_noctur_3h * porcentaj
                        , Pago_HR_extras_nocturnas_3h=(hr_extra_noctur_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_3h=hr_extra_mix_diu_3h * porcentaj
                        , Pago_HR_extras_diurnas_mixta_3h=(hr_extra_mix_diu_3h/60)*1.5*1.75* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_3h=hr_extra_mix_noc_3h * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_3h=(hr_extra_mix_noc_3h/60)*1.75*1.75* sueldo_hr * porcentaj
                        , HR_extras_diurnas_Feriado=hr_extra_feriado_diur * porcentaj

                        , Pago_HR_extras_diurnas_Feriado=(hr_extra_feriado_diur/60)*1.25*2.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_Feriado=hr_extra_feriado_noct * porcentaj
                        , Pago_HR_extras_nocturnas_Feriado=(hr_extra_feriado_noct/60)*1.5* 2.5* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_Feriado=hr_extra_feriado_mix_diur * porcentaj
                        , Pago_HR_extras_diurnas_mixta_Feriado=(hr_extra_feriado_mix_diur/60)*1.5* 2.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_Feriado=hr_extra_feriado_mix_noct * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_Feriado=(hr_extra_feriado_mix_noct/60)*1.75*2.5*  sueldo_hr * porcentaj
    
                        , HR_extras_diurnas_3h_Feriado=hr_extra_feriado_diur_3h * porcentaj
                        , Pago_HR_extras_diurnas_3h_Feriado= (hr_extra_feriado_diur_3h/60)*1.25*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_3h_Feriado=hr_extra_feriado_noct_3h * porcentaj
                        , Pago_HR_extras_nocturnas_3h_Feriado=(hr_extra_feriado_noct_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_3h_Feriado=hr_extra_feriado_mix_diu_3h * porcentaj
                        , Pago_HR_extras_diurnas_mixta_3h_Feriado=(hr_extra_feriado_mix_diu_3h/60)*1.5*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_3h_Feriado=hr_extra_feriado_mix_noc_3h * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_3h_Feriado=(hr_extra_feriado_mix_noc_3h/60)*1.75*1.75*2.5*  sueldo_hr * porcentaj
                        , HR_extras_diurnas_descanso=hr_extra_descanso_diur * porcentaj
                        , Pago_HR_extras_diurnas_descanso=(hr_extra_descanso_diur/60)*1.25*1.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_descanso=hr_extra_descanso_noct * porcentaj
                        , Pago_HR_extras_nocturnas_descanso=(hr_extra_descanso_noct/60)*1.5* 1.5* sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_descanso=hr_extra_descanso_mix_diur * porcentaj
                        , Pago_HR_extras_diurnas_mixta_descanso=(hr_extra_descanso_mix_diur/60)*1.5* 1.5* sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_descanso=hr_extra_descanso_mix_noct * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_descanso=(hr_extra_descanso_mix_noct/60)*1.75*1.5*  sueldo_hr * porcentaj
                        #+3h
                        , HR_extras_diurnas_3h_descanso=hr_extra_descanso_diur_3h * porcentaj
                        , Pago_HR_extras_diurnas_3h_descanso=(hr_extra_descanso_diur_3h/60)*1.25*1.75*1.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_3h_descanso=hr_extra_descanso_noct_3h * porcentaj
                        , Pago_HR_extras_nocturnas_3h_descanso=(hr_extra_descanso_noct_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        , HR_extras_diurnas_mixta_3h_descanso=hr_extra_descanso_mix_diu_3h * porcentaj
                        , Pago_HR_extras_diurnas_mixta_3h_descanso=(hr_extra_descanso_mix_diu_3h/60)*1.5*1.75*1.5*  sueldo_hr * porcentaj
                        , HR_extras_nocturnas_mixta_3h_descanso=hr_extra_descanso_mix_noc_3h * porcentaj
                        , Pago_HR_extras_nocturnas_mixta_3h_descanso=(hr_extra_descanso_mix_noc_3h/60)*1.75*1.75*1.5*  sueldo_hr * porcentaj
                        #deducciones
                        , Pago_Bono_con_Impuesto=bonos_con_impuesto * porcentaj
                        , Pago_Bono_sin_Impuesto=bonos_sin_impuesto * porcentaj

                        #deduciones
                        , Deduccion_con_Impuesto=duduciones_con_impuesto * porcentaj
                        , Deduccion_sin_Impuesto=deduciones_sin_impuesto * porcentaj
                        , Descuento_Acreedores_Hipotecario=acredores_hipotecario * porcentaj
                        , Descuento_Acreedores_Empresa=acredores_empresa * porcentaj
                        #Totales 
                        , Sueldo_base_quincenal=sueldo_base * porcentaj
                        , Pago_Total_Sobretiempo_quincenal=extra_time_total * porcentaj
                        , Pago_dias_trabj_fer_con_descanso=(min_dias_trabj_fer_con_descanso/60)*1.5*2.5* sueldo_hr * porcentaj
                        , Pago_dias_traba_feriados=(min_dias_traba_feriados/60)*2.5* sueldo_hr * porcentaj
                        , Pago_dias_trabaja_descanso=(min_dias_trabaja_descanso/60)*1.5* sueldo_hr * porcentaj
                        , Pago_Vacaciones=vacaciones_bruto * porcentaj
                        , Pago_Incapacidad=incapacidad*sueldo_diario * porcentaj
                        , Pago_Licencia_paga= licenc_paga*sueldo_diario * porcentaj
                        , Sueldo_Bruto=sueldo_bruto * porcentaj
                        
                        #          
                        , Pago_quincena_despues_descuento=sueldo_cal_deduciones * porcentaj

                        , Deduccion_Seguro_Social=seguro_social * porcentaj
                        ,  Deduccion_Seguro_Educacional=sueldo_cal_deduciones*0.0125 * porcentaj
                        , Deduccion_ISLR=islr * porcentaj
                        , Total_deduciones_Ley= total_dedu_ley * porcentaj
                        , Total_deduciones_quinceas=total_deduciones * porcentaj
                        , Pago_total_bonos_sin_impuesto=total_bonos_sin_impuesto * porcentaj
                        , Pago_Sueldo_neto=sueldo_neto * porcentaj
                        #patron
                        , Decimo_xiii_quincena_Bruto=decimo_xii_quincena * porcentaj
                        , Deduccion_Seg_social_decimo=seg_social_decimo * porcentaj
                        , Deduccion_ISLR_Decimmo_xiii=islr_decimo_xiii * porcentaj
                        , Decimo_xiii_quincena_Neto=decimo_xiii_quincena_neto * porcentaj
                        , Deduccion_Seg_social_Patron=seguro_social_patrono * porcentaj
                        , Deduccion_Seg_social_decimo_Patron=seg_social_decimo_patron * porcentaj
                        , Deduccion_Seguro_Educacional_Patron=seguro_educacional_patrono * porcentaj
                        , Prima_Antiguedad_Patron=prima_antiguedad * porcentaj
                        , Riesgo_Profesional_Patron=riesgo_profesional * porcentaj
                        , Vacacionciones_Acumuladas_Patron=vacaciones_acumuladas_patron * porcentaj
                        , Fecha_pago_quincena=fecha_pago_date
                        , Totales_patronales=totales_patronales * porcentaj
                        , Total_general_sueldo=total_general_sueldo * porcentaj
                        , Porcentaje= porcentaj
                        #vacas
                        , Vacaciones_Seguro_Social=vacaciones_ss* porcentaj
                        , Vacaciones_Seguro_educacion=vacaciones_se* porcentaj
                        , Vacaciones_ISLR=vacaciones_ilsr* porcentaj
                        , Deducion_Vacaciones_Totales=total_vacas_deducciones* porcentaj
                        , Pago_Vacaciones_Neto=vacaciones_neto* porcentaj
                        , Vacaciones_Seguro_Social_patron=vacaciones_ss_patron* porcentaj
                        , Vacaciones_Seguro_educacion_patron=vacaciones_se_patron* porcentaj
                        , Deducion_Vacaciones_Totales_patron=vacacioones_total_patron* porcentaj
                          #decimo pago cliente en quincena
                        , Pago_XIII_periodo_Bruto= Pago_XIII_periodo_Bruto* porcentaj
                        , Pago_XIII_periodo_Seguro_Social=Pago_XIII_periodo_Seguro_Social* porcentaj
                        , Pago_XIII_periodo_ISLR=Pago_XIII_periodo_ISLR* porcentaj
                        , Pago_XIII_periodo_Neto=Pago_XIII_periodo_Neto* porcentaj
                        , Deduccion_XIII_periodo_Seguro_social_patron=Deduccion_XIII_periodo_Seguro_social_patron* porcentaj
                        )
                   
           
            lista_planilla1=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla, Colaborador__pk=id_col)



            for dato_planilla in lista_planilla1:
                nombre=dato_planilla.Colaborador.Colaborador_nombre+' '+dato_planilla.Colaborador.Colaborador_apellido
                
                sueldo_sin_deducciones=dato_planilla.Pago_quincena_despues_descuento
                Hr_Extra=dato_planilla.Pago_Total_Sobretiempo_quincenal
                sueldo_base=sueldo_sin_deducciones-Hr_Extra

                vacaciones=dato_planilla.Pago_Vacaciones
                vacaciones_deduciones=dato_planilla.Deducion_Vacaciones_Totales
                Xiii_bruto=dato_planilla.Pago_XIII_periodo_Bruto
                deduciones_ley=dato_planilla.Total_deduciones_Ley
                deducciones_Acreedores=dato_planilla.Descuento_Acreedores_Empresa+dato_planilla.Descuento_Acreedores_Hipotecario
                bonos_sin_ley=dato_planilla.Pago_total_bonos_sin_impuesto
                total_pagar=dato_planilla.Pago_Sueldo_neto
                
                lista=[nombre,
                       round(sueldo_base,2),
                       round(Hr_Extra,2),
                       round(sueldo_sin_deducciones,2),
                       round(vacaciones,2),
                      
                       round(Xiii_bruto,2),
                        round(deduciones_ley,2),
                        round(deducciones_Acreedores,2),
                        round(bonos_sin_ley,2),
                        round(total_pagar,2),
                        dato_planilla.pk,
                        dato_planilla.Colaborador.imagen
                        #<td class="small"><img src="{{ MEDIA_URL }}{{  clientes.12 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.0 }}</td>
                                                    
                        ]

                lista_ausencia_final.append(lista)
                 
            colaborador_objj=Colaboradores.objects.get(pk=id_col)
            Fecha_Ingreso=colaborador_objj.Fecha_Ingreso
            tipo_contrato=colaborador_objj.Tipo_contrato
            salario_base=colaborador_objj.Sueldo
            permiso_objj=Permisos.objects.filter(Colaborador__pk=id_col, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
            num_vacas_usada=0
            for y in permiso_objj:
                num_vacas_usada+=y.Dias_permiso

            Vacaciones_totales=calcular_dias_vacaciones_1(Fecha_Ingreso,num_vacas_usada)
               
                
            Vac_disponible = Vacaciones_totales - num_vacas_usada
            fecha_actual = datetime.now()
            tiempo_trabajador = fecha_actual.date() - Fecha_Ingreso
            year_trabajo= tiempo_trabajador.days
            year_trabajo/=365
            if year_trabajo >= 5:
             
                promedio_5_years=fun_promedio_5_years(id_col , mes , year)
                Promedio_Sueldo_5_Years=promedio_5_years[0]
                lista_sueldo=promedio_5_years[1]

            else:
                promedio_5_years= 0 
                Promedio_Sueldo_5_Years=0
                lista_sueldo=[['No Tiene 5 Años','No Tiene 5 Años','No Tiene 5 Años']]

            promedio_6_meses=fun_promedio_6_meses(id_col,mes,year)
            Promedio_Sueldo_6_Months=promedio_6_meses[0]
            lista_sueldo_6_meses=promedio_6_meses[1]
            
            sueldo_30_dias_completo=lista_sueldo_6_meses[-1][-1]
            sueldo_30_dias_ultimo_mes=lista_sueldo_6_meses[-2][-1]

            anios, mesess, diass = diferencia_fechas(Fecha_Ingreso, fecha_actual.date())
            antiguedad=str(anios)+' Años '+str(mesess)+" Meses "+ str(diass)+" Dias."
            antiguedad_num= anios+(mesess+diass/30)/12

            lista_datos_liquidar = [Fecha_Ingreso,tipo_contrato, num_vacas_usada, Vac_disponible, salario_base,Promedio_Sueldo_5_Years,Promedio_Sueldo_6_Months,sueldo_30_dias_ultimo_mes, sueldo_30_dias_completo, antiguedad_num, antiguedad]  
            
        return render(request, "motor_planilla_6-l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'pk_acreedor_empresa':pk_acreedor_empresa, 'pk_acreedor_hipotecaria':pk_acreedor_hipotecaria, 'lista_datos_liquidar':lista_datos_liquidar,'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':True, 'colaborador':id_col})
 
def motor_planilla_p7_l(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)

    if request.method=='GET':
        
        return redirect('motor-planilla/') 
    
    elif request.method=='POST':
        #print(request.POST)
        
        
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys()) 
        try:
            if 'Confirmar_liquidacion' in values:
                quater=request.POST["Confirmar_liquidacion"]
                id_col=int(request.POST["id_colaborador"])
                fecha_salida=request.POST["fecha_salida"]
                lista_fecha=fecha_salida.split('-')
                fecha_egreso =  datetime(int(lista_fecha[0]),int(lista_fecha[1]), int(lista_fecha[2]))
                obj_cliente=Colaboradores.objects.get(pk=id_col)
                obj_cliente.Status=request.POST["motivo"]
                obj_cliente.Fecha_Egreso=fecha_egreso
                obj_cliente.save()

                if True: #Actualizar acreedores 
                    lista_acreedores=Acreedores_quincena.objects.filter( Periodo_Cobro = quater , Tipo_Operacion='Liquidacion' , Acreedores__Colaborador__pk =id_col )
                    if len(lista_acreedores)>0:
                        for acreedore_obj in lista_acreedores:
                            if acreedore_obj.Realizo_Cobreo == False:
                                monto_abonado = acreedore_obj.Monto_periodo
                                obj_principal= acreedore_obj.Acreedores
                                #actualizar
                                obj_principal.dinero_pagado=obj_principal.dinero_pagado+monto_abonado
                                obj_principal.cuotas_restante = acreedore_obj.Nro_Cuota
                                obj_principal.save()
                                acreedore_obj.Realizo_Cobreo=True
                                acreedore_obj.save()
                        

                if True: #guardar Novedades
                                                    tipo_seguimiento='Liquidacion '
                                                    sUB_Tipo_seguimiento=' Creacion '
                                                    comment=' Creacion Liquidacion: '+'Motivo:'+request.POST["motivo"]+' Colaborador: '+obj_cliente.Colaborador_nombre+' '+obj_cliente.Colaborador_apellido+' Nro Ident.: '+obj_cliente.Nro_Identificacion
                                                    fecha_novedad_date=datetime.now()
                                                    fecha_novedad=fecha_novedad_date.date()
                                                    hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                    
                                                    if es_admin:

                                                        novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                    SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                    comentario= comment ,
                                                                                                    Fecha_novedad=fecha_novedad ,
                                                                                                    hora_novedad=hora_actual 
                                                                                                                        )
                                                    else:
                                                        novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                    SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                    comentario= comment ,
                                                                                                    Fecha_novedad=fecha_novedad ,
                                                                                                    hora_novedad=hora_actual ,
                                                                                                    Colaborador= user_profile_obj.Colaborador
                                                                                                                        )
                    


                return redirect('liquidaciones-historico/') 
            
            if 'Actualizar' in values:
                lista_xiii=['Q1-12','Q1-04','Q1-08']
                planilla=request.POST["Actualizar"]
                fecha_pagoo=request.POST["fecha_salida"]
                id_col=int(request.POST["id_colaborador"])
                lista_planilla=planilla.split('-')
                Quater=lista_planilla[0]
                QQ=Quater+'-'+lista_planilla[1]
                Quater=Quater.replace('Q','')
            
                Quater=int(Quater)
                mes=int(lista_planilla[1])
                year=int(lista_planilla[2])

                bool_acredores=False
                id_acrre_empresa=0
                acredores_empresa=0
                pk_acreedor_empresa=0
            

                if True: #Actualizar acreedores 
                    lista_acreedores=Acreedores_quincena.objects.filter( Periodo_Cobro = planilla , Tipo_Operacion='Planilla' , Acreedores__Colaborador__pk =id_col )
                    if len(lista_acreedores)>0:
                        for acreedore_obj in lista_acreedores:
                            if acreedore_obj.Realizo_Cobreo == False:
                                monto_abonado = acreedore_obj.Monto_periodo
                                obj_principal= acreedore_obj.Acreedores
                                #actualizar
                                obj_principal.dinero_pagado=obj_principal.dinero_pagado+monto_abonado
                                obj_principal.cuotas_restante = acreedore_obj.Nro_Cuota
                                if obj_principal.Monto_total > obj_principal.dinero_pagado  + monto_abonado :
                                    bool_acredores=True
                                    acredores_empresa += obj_principal.Monto_total - obj_principal.dinero_pagado  + monto_abonado

                                obj_principal.save()
                                acreedore_obj.Realizo_Cobreo=True
                                acreedore_obj.save()
                        

                lista_xiii=['Q1-12','Q1-04','Q1-08']
                if Quater==1:
                    inicio_corte=26
                    final_corte=10
                    fecha_pago=15
                    if mes==1:
                        mes_inicial=12
                        year_inicial=year-1
                    else:
                        mes_inicial=mes-1
                        year_inicial=year
                    
                else:
                    inicio_corte=11
                    final_corte=25
                    mes_inicial=mes
                    year_inicial=year
                    

                fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
                fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
                

                fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
                fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
                if Quater==2:
                    fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
                    
                else:
                    fecha_pago=15
                
                fecha_pago_date=datetime(year, mes, fecha_pago)
                
                fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
                    
                lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pagoo] 

                        
                #### Aqui en empieza calculo
                
                siguiente_bool=False
                
                # obtener decimo acumulado
                colaborador_obj=Colaboradores.objects.get(pk=id_col)
                Fecha_Ingreso=colaborador_obj.Fecha_Ingreso
            
                #decidir el mejor sueldo para eso la fecha
                lista_fecha_pagoo=fecha_pagoo.split('-')
                fecha_corte_liquidacion =  datetime(int(lista_fecha_pagoo[0]), int(lista_fecha_pagoo[1]), int(lista_fecha_pagoo[2]))
                ultimo_dia = calendar.monthrange(fecha_corte_liquidacion.year, fecha_corte_liquidacion.month)[1]
                fecha_ultimo_dias_mes =  datetime(fecha_corte_liquidacion.year, fecha_corte_liquidacion.month, ultimo_dia)
                if fecha_corte_liquidacion.date() == fecha_ultimo_dias_mes.date():
                    mes_30_dias=float(request.POST["mes_actual"])
                else:
                    mes_30_dias=float(request.POST["mes_anterior"])

                promedio_5_anios=float(request.POST["5_anos"])
                promedio_6_meses=float(request.POST["6_meses"])
                mayor_salario = max(mes_30_dias, promedio_5_anios, promedio_6_meses,colaborador_obj.Sueldo )


                tipo_liquidacion=request.POST["tipo_liquidacion"]
                preaviso_str=request.POST["preaviso"]
                
                permiso_objj=Permisos.objects.filter(Colaborador__pk=id_col, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
                num_vacas_usada=0
                for y in permiso_objj:
                    num_vacas_usada+=y.Dias_permiso

                Vacaciones_totales=calcular_dias_vacaciones_2(Fecha_Ingreso,num_vacas_usada,fecha_corte_liquidacion.date())
                
                    
                vacaciones = Vacaciones_totales - num_vacas_usada
                

                tipo_contrato=colaborador_obj.Tipo_contrato

                vacaciones_sueldo=vacaciones*(mayor_salario/30)
                #decimo se necesita sacar en formato de la panama
                #se necesita sacar los meses que corresponde al decimo
                #fecha del ultimo corte de decimo con la fecha actual
                mes = fecha_corte_liquidacion.month
                fecha = fecha_corte_liquidacion.day
                year = fecha_corte_liquidacion.year

                if fecha <= 10:
                    QQQ='Q1-'+str(mes)+'-'+str(year)
                    

                elif fecha >= 26:
                    if mes==12:
                        mes_inicial=1
                        year_inicial, year_final =year, year+1
                    else:
                
                        year_inicial, year_final =year, year

                    QQQ='Q1-'+str(mes_inicial)+'-'+str(year_final)
                
                else:
                    QQQ='Q2-'+str(mes)+'-'+str(year)
                
                lista_QQQ=QQQ.split('-')
                dia_U_XIII, Mes_U_XIII, YEAR_U_XIII =fun_lista_buscar_decimo_1(lista_QQQ[0]+'-'+lista_QQQ[1],int(lista_QQQ[2]))
                Ultimo_XIII=datetime(YEAR_U_XIII, Mes_U_XIII, dia_U_XIII)
                if Ultimo_XIII.date() <= Fecha_Ingreso:
                    anios, mesess, diass = diferencia_fechas(Fecha_Ingreso, fecha_corte_liquidacion.date())
                else:
                    anios, mesess, diass = diferencia_fechas(Ultimo_XIII.date(), fecha_corte_liquidacion.date())

                anios_dif , meses_dif , dias_dif = diferencia_fechas(Fecha_Ingreso, fecha_corte_liquidacion.date())
                meses_decimo_completo=(mesess*mayor_salario)/12
                dias_decimo_completo= ((mayor_salario/30)*diass)/12
                vacas_decimo_completo=vacaciones_sueldo/12

                antiguedad= anios_dif+(meses_dif+dias_dif/30)/12


                decimo_provisional_completo=meses_decimo_completo+dias_decimo_completo+vacas_decimo_completo
                
                preaviso=0
                prima_antiguedad=0
                Indemnización=0
                Cesantía=0
                Saldo_Bruto=0
                #ISLR si existe en su quincena de pago en ambos periodos se tiene que regresar en la liquidacion
                if planilla.find('Q1')!=-1:
                    planilla_Q1=planilla
                    planilla_Q2=planilla.replace('Q1','Q2')
                else:
                    planilla_Q2=planilla
                    planilla_Q1=planilla.replace('Q2','Q1')
                
                Lista_Q_ISLR=[planilla_Q1,planilla_Q2]

                lista_ISLR= Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col , Periodo__in=Lista_Q_ISLR)

                ISLR_A_regresar=0
                for datos_col in lista_ISLR:
                    if datos_col.Deduccion_ISLR>0:
                        ISLR_A_regresar+=datos_col.Deduccion_ISLR
                        datos_col.Deduccion_ISLR=0
                    if datos_col.Vacaciones_ISLR>0:
                        ISLR_A_regresar+=datos_col.Vacaciones_ISLR
                        datos_col.Vacaciones_ISLR=0
                    
                    datos_col.save() 
                
                if ISLR_A_regresar>0:
                    lista_ISLR_clientes= Panilla_por_periodo_quincenal_clientes.objects.filter(Colaborador__pk=id_col , Periodo__in=Lista_Q_ISLR)
                    for datos_col in lista_ISLR_clientes:
                        
                        datos_col.Deduccion_ISLR=0
                
                        datos_col.Vacaciones_ISLR=0
                    
                        datos_col.save() 


                #SACAR PA, INDM, CESA
                if tipo_liquidacion == 'Renuncia Voluntaria' and preaviso_str =='Si' and colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
                    #toca PA sin indenminazion
                    #saber sueldo desde que entro hasta el fecha corte
                    suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col).aggregate(total_salario_bruto=Sum('Pago_quincena_despues_descuento'))
                    suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=id_col).aggregate( total_salario_colaboradores=Sum('Pago_Vacaciones'))
                    suma_total_salario_bruto_2 = SIPE_Mensual.objects.filter(nro_identificacion=colaborador_obj.Nro_Identificacion).aggregate( total_salario_colaboradores_2=Sum('total_sueldo'))
                    suma_total_salario_bruto_3 = SIPE_Mensual.objects.filter(nro_identificacion=colaborador_obj.Nro_Identificacion).aggregate( total_salario_colaboradores_3=Sum('total_vacaciones'))
                    # Acceder al valor de la suma total
                    total = suma_total_salario_bruto['total_salario_bruto']
                    total_vacas = suma_total_salario_bruto_1['total_salario_colaboradores']
                    total_sueldo_impo=suma_total_salario_bruto_2['total_salario_colaboradores_2']
                    total_vacas_impo=suma_total_salario_bruto_3['total_salario_colaboradores_3']
                    if type(total_sueldo_impo) != float:
                        total_sueldo_impo=0
                    if type(total_vacas_impo) != float:
                        total_vacas_impo=0
                         
                    Total_neto=total+total_vacas+total_sueldo_impo+total_vacas_impo


                    prima_antiguedad=Total_neto/52

                elif tipo_liquidacion == 'Renuncia Voluntaria'  and colaborador_obj.Tipo_contrato=='Contrato_Indefinido' and preaviso_str =='No':
                    #toca PA sin indenminazion
                
                    Total_neto= fun_sueldo_de_por_vida(id_col, fecha_corte_liquidacion.date())


                    prima_antiguedad=Total_neto/52

                    
                    preaviso=mayor_salario*12/52
                    if preaviso>=prima_antiguedad:
                        preaviso=prima_antiguedad
                elif tipo_liquidacion == 'Mutuo Consentimiento'  and colaborador_obj.Tipo_contrato=='Contrato_Indefinido' :

                
                    Total_neto= fun_sueldo_de_por_vida(id_col, fecha_corte_liquidacion.date())


                    prima_antiguedad=Total_neto/52
                    Indemnización=3.4*prima_antiguedad
            
                        
                    



                #deduciones 
                seguro_social=vacaciones_sueldo*0.0975
                seguro_educativo=vacaciones_sueldo*0.0125
                seg_social_decimo=decimo_provisional_completo*0.0725

                total_a_pagar_bruto = decimo_provisional_completo+vacaciones_sueldo +  prima_antiguedad + Indemnización +  Cesantía

                

                if bool_acredores: #si hay acreditores pendientes
                    
                    
                    if colaborador_obj.Tipo_contrato=='Contrato_Indefinido':
                        
                            if prima_antiguedad >= acredores_empresa:
                                acredores_empresa=acredores_empresa
                                fun_guardar_datos_en_acreedores_cuotas_liquidacion_empresa(colaborador_obj.pk , planilla, fecha_pago_date.date() , acredores_empresa , 'Liquidacion')
                            else:
                                acredores_empresa=prima_antiguedad
                                fun_guardar_datos_en_acreedores_cuotas_liquidacion_empresa(colaborador_obj.pk , planilla, fecha_pago_date.date() , acredores_empresa , 'Liquidacion')
                        
                        
                            total_deducciones_colab=seguro_social + seg_social_decimo +  seguro_educativo + preaviso - ISLR_A_regresar+ acredores_empresa

                    else:
                        total_deducciones_colab = seguro_social + seg_social_decimo +  seguro_educativo + preaviso - ISLR_A_regresar   

                    
                    
                else:
                    total_deducciones_colab = seguro_social + seg_social_decimo +  seguro_educativo + preaviso - ISLR_A_regresar
                    
                total_a_pagar_neto = total_a_pagar_bruto - total_deducciones_colab

                #deduciones patronales
                seguro_social_patronal=vacaciones_sueldo*0.1225
                seguro_educativo_patronal=vacaciones_sueldo*0.015
                seg_social_decimo_patronal=decimo_provisional_completo*0.1075

                total_Deduciones_Patronales=seguro_social_patronal+seguro_educativo_patronal+seg_social_decimo_patronal

                Total_Pagar_por_empresa   = total_a_pagar_bruto +   total_Deduciones_Patronales - preaviso

                

                #definido no requieren preaviso
                try:
                        created=Liquidaciones.objects.get(Colaborador__pk=colaborador_obj.pk)
                        #save
                        if True:

                            created.Periodo = planilla
                            created.Fecha_pago_liquidacion = fecha_corte_liquidacion.date()
                            created.Anos_Laborado = anios_dif
                            created.Meses_Laborados  =meses_dif
                            created.Dias_Laborados = dias_dif

                            created.Mes_Diferencia_XIII=mesess
                            created.Dias_Diferencia_XIII=diass

                            created.Colaborador= colaborador_obj
                            created.Tipo_de_Liquidacion=tipo_liquidacion

                            created.Salario_Mayor=mayor_salario
                            created.Salario_Ultimos_30_Dias=mes_30_dias
                            created.Salario_Ultimos_6_meses=promedio_6_meses
                            created.Salario_Ultimos_5_anios=promedio_5_anios

                            created.Dias_Vacaciones_Acumuladas=vacaciones
                            created.Antiguedad_En_Anios=antiguedad
                            created.Vacaciones_Provisionales_Brutas=vacaciones_sueldo
                            #Deducciones
                            created.Descuento_Acreedores_Empresa=acredores_empresa
                            created.Seguro_Social_Provisiones_Vacas=seguro_social
                            created.Seguro_Educativo_Proviciones_Vacas=seguro_educativo

                            created.Decimo_Provisional_Bruto=decimo_provisional_completo
                            created.Seguro_Social_Decimo_Provisiones = seg_social_decimo
                            #
                        
                            created.Preaviso=preaviso
                            created.Prima_Antiguedad=prima_antiguedad
                            created.Indemnizacion=Indemnización
                            created.Cesantía=Cesantía
                            # Totales Colaborador
                            created.Total_Liquidacion_Bruta=total_a_pagar_bruto
                            created.Total_deduciones_Colaborador= total_deducciones_colab
                            created.Total_Liquidacion_Neta= total_a_pagar_bruto - total_deducciones_colab

                            #Patronales
                            created.Seguro_Social_Provisiones_Vacas_Patron=seguro_social_patronal
                            created.Seguro_Educativo_Proviciones_Vacas_Patron=seguro_educativo_patronal
                            created.Seguro_Social_Decimo_Provisiones_Patron=seg_social_decimo_patronal
                            created.Total_Deduciones_Patronales=seguro_social_patronal+seguro_educativo_patronal+seg_social_decimo_patronal
                            #total gasto liquidacion empresa
                            created.Total_Gastos_Patron = Total_Pagar_por_empresa
                            created.Devolucion_ISLR= ISLR_A_regresar

                            created.save()
                    
                except:
                    created=Liquidaciones.objects.create(Periodo = planilla
                            , Fecha_pago_liquidacion = fecha_corte_liquidacion.date()
                            , Anos_Laborado = anios_dif
                            , Meses_Laborados  =meses_dif
                            , Dias_Laborados = dias_dif

                            , Mes_Diferencia_XIII=mesess
                            , Dias_Diferencia_XIII=diass

                            , Colaborador= colaborador_obj
                            , Tipo_de_Liquidacion=tipo_liquidacion

                            , Salario_Mayor=mayor_salario
                            , Salario_Ultimos_30_Dias=mes_30_dias
                            , Salario_Ultimos_6_meses=promedio_6_meses
                            , Salario_Ultimos_5_anios=promedio_5_anios

                            , Dias_Vacaciones_Acumuladas=vacaciones
                            , Antiguedad_En_Anios=antiguedad
                            , Vacaciones_Provisionales_Brutas=vacaciones_sueldo
                            #Deducciones
                            , Descuento_Acreedores_Empresa=acredores_empresa
                            , Seguro_Social_Provisiones_Vacas=seguro_social
                            , Seguro_Educativo_Proviciones_Vacas=seguro_educativo

                            , Decimo_Provisional_Bruto=decimo_provisional_completo
                            , Seguro_Social_Decimo_Provisiones = seg_social_decimo
                            #
                            , Preaviso=preaviso
                            , Prima_Antiguedad=prima_antiguedad
                            , Indemnizacion=Indemnización
                            , Cesantía=Cesantía
                            # Totales Colaborador
                            , Total_Liquidacion_Bruta=total_a_pagar_bruto
                            , Total_deduciones_Colaborador= total_deducciones_colab
                            , Total_Liquidacion_Neta= total_a_pagar_bruto - total_deducciones_colab

                            #Patronales
                            , Seguro_Social_Provisiones_Vacas_Patron=seguro_social_patronal
                            , Seguro_Educativo_Proviciones_Vacas_Patron=seguro_educativo_patronal
                            , Seguro_Social_Decimo_Provisiones_Patron=seg_social_decimo_patronal
                            , Total_Deduciones_Patronales=seguro_social_patronal+seguro_educativo_patronal+seg_social_decimo_patronal
                            #total gasto liquidacion empresa
                            , Total_Gastos_Patron = Total_Pagar_por_empresa
                            , Devolucion_ISLR= ISLR_A_regresar
                            )


            
                

            # hacer parte liquidacion de empresa
                if True:
                    lista_obj_clientes=Panilla_por_periodo_quincenal_clientes.objects.filter(Periodo = planilla, Colaborador__pk=colaborador_obj.pk)
                    lista_para_crear_liquidacion_cliente=[]
                    for obj_cliente in lista_obj_clientes:
                        lista_para_crear_liquidacion_cliente.append([obj_cliente.Cliente.pk,obj_cliente.Porcentaje])
                    
                    for guardar_cliente in lista_para_crear_liquidacion_cliente :
                        pk_cliente=guardar_cliente[0]
                        porc= guardar_cliente[1]
                        try:
                        
                            created=Liquidaciones_Clientes.objects.get(Colaborador__pk=colaborador_obj.pk,Periodo=planilla, Cliente__pk=pk_cliente)
                            #save
                            if True:

                                created.Periodo = planilla
                                created.Fecha_pago_liquidacion = fecha_corte_liquidacion.date()
                                created.Anos_Laborado = anios_dif
                                created.Meses_Laborados  =meses_dif
                                created.Dias_Laborados = dias_dif
                                created.Porcentaje = porc

                                created.Mes_Diferencia_XIII=mesess
                                created.Dias_Diferencia_XIII=diass

                                created.Colaborador= colaborador_obj
                            
                                created.Tipo_de_Liquidacion=tipo_liquidacion

                                created.Salario_Mayor=mayor_salario
                                created.Salario_Ultimos_30_Dias=mes_30_dias
                                created.Salario_Ultimos_6_meses=promedio_6_meses
                                created.Salario_Ultimos_5_anios=promedio_5_anios

                                created.Dias_Vacaciones_Acumuladas=vacaciones
                                created.Antiguedad_En_Anios=antiguedad
                                created.Vacaciones_Provisionales_Brutas=vacaciones_sueldo *porc
                            #Deducciones
                                created.Descuento_Acreedores_Empresa=acredores_empresa *porc
                                created.Seguro_Social_Provisiones_Vacas=seguro_social *porc
                                created.Seguro_Educativo_Proviciones_Vacas=seguro_educativo *porc

                                created.Decimo_Provisional_Bruto=decimo_provisional_completo *porc
                                created.Seguro_Social_Decimo_Provisiones = seg_social_decimo *porc
                            #
                        
                                created.Preaviso=preaviso *porc
                                created.Prima_Antiguedad=prima_antiguedad *porc
                                created.Indemnizacion=Indemnización *porc
                                created.Cesantía=Cesantía *porc
                            # Totales Colaborador
                                created.Total_Liquidacion_Bruta=total_a_pagar_bruto *porc
                                created.Total_deduciones_Colaborador= total_deducciones_colab *porc
                                created.Total_Liquidacion_Neta= total_a_pagar_bruto - total_deducciones_colab *porc

                            #Patronales
                                created.Seguro_Social_Provisiones_Vacas_Patron=seguro_social_patronal *porc
                                created.Seguro_Educativo_Proviciones_Vacas_Patron=seguro_educativo_patronal *porc
                                created.Seguro_Social_Decimo_Provisiones_Patron=seg_social_decimo_patronal *porc
                                created.Total_Deduciones_Patronales=seguro_social_patronal+seguro_educativo_patronal+seg_social_decimo_patronal *porc
                            #total gasto liquidacion empresa 
                                created.Total_Gastos_Patron = Total_Pagar_por_empresa *porc
                                created.Devolucion_ISLR= ISLR_A_regresar *porc

                                created.save()
                    
                        except:
                            obj_clientess=Info_Clientes.objects.get(pk=pk_cliente)
                            created=Liquidaciones_Clientes.objects.create(Periodo = planilla
                            , Fecha_pago_liquidacion = fecha_corte_liquidacion.date()
                            , Anos_Laborado = anios_dif
                            , Meses_Laborados  =meses_dif
                            , Dias_Laborados = dias_dif
                            , Cliente = obj_clientess
                            , Porcentaje=porc

                            , Mes_Diferencia_XIII=mesess
                            , Dias_Diferencia_XIII=diass

                            , Colaborador= colaborador_obj
                            , Tipo_de_Liquidacion=tipo_liquidacion

                            , Salario_Mayor=mayor_salario
                            , Salario_Ultimos_30_Dias=mes_30_dias
                            , Salario_Ultimos_6_meses=promedio_6_meses
                            , Salario_Ultimos_5_anios=promedio_5_anios

                            , Dias_Vacaciones_Acumuladas=vacaciones
                            , Antiguedad_En_Anios=antiguedad
                            , Vacaciones_Provisionales_Brutas=vacaciones_sueldo * porc
                            #Deducciones
                            , Descuento_Acreedores_Empresa=acredores_empresa *porc
                            , Seguro_Social_Provisiones_Vacas=seguro_social * porc
                            , Seguro_Educativo_Proviciones_Vacas=seguro_educativo * porc

                            , Decimo_Provisional_Bruto=decimo_provisional_completo * porc
                            , Seguro_Social_Decimo_Provisiones = seg_social_decimo * porc
                            #
                            , Preaviso=preaviso  * porc
                            , Prima_Antiguedad=prima_antiguedad  * porc
                            , Indemnizacion=Indemnización  * porc
                            , Cesantía=Cesantía  * porc
                            # Totales Colaborador 
                            , Total_Liquidacion_Bruta=total_a_pagar_bruto  * porc
                            , Total_deduciones_Colaborador= total_deducciones_colab  * porc
                            , Total_Liquidacion_Neta= total_a_pagar_bruto - total_deducciones_colab  * porc

                            #Patronales
                            , Seguro_Social_Provisiones_Vacas_Patron=seguro_social_patronal  * porc
                            , Seguro_Educativo_Proviciones_Vacas_Patron=seguro_educativo_patronal  * porc
                            , Seguro_Social_Decimo_Provisiones_Patron=seg_social_decimo_patronal  * porc
                            , Total_Deduciones_Patronales=seguro_social_patronal+seguro_educativo_patronal+seg_social_decimo_patronal  * porc
                            #total gasto liquidacion empresa
                            , Total_Gastos_Patron = Total_Pagar_por_empresa  * porc
                            , Devolucion_ISLR= ISLR_A_regresar  * porc
                            )
                    
            

                    



                lista_planilla1=Liquidaciones.objects.get( Colaborador__pk=id_col)

                nombre=lista_planilla1.Colaborador.Colaborador_nombre+' '+lista_planilla1.Colaborador.Colaborador_apellido
                    
                sueldo_nominal=lista_planilla1.Colaborador.Sueldo

                Tiempo_laborado=str(lista_planilla1.Anos_Laborado)+' Años '+str(lista_planilla1.Meses_Laborados)+" Meses "+ str(lista_planilla1.Dias_Laborados)+" Dias."

                vacaciones=lista_planilla1.Vacaciones_Provisionales_Brutas
                    
                Xiii_bruto=lista_planilla1.Decimo_Provisional_Bruto

                PA=lista_planilla1.Prima_Antiguedad
                INDE= lista_planilla1.Indemnizacion
                CESANTIA =  lista_planilla1.Cesantía

                deduciones_ley=lista_planilla1.Total_deduciones_Colaborador

                neto_a_pagar= lista_planilla1.Total_Liquidacion_Neta

                Gastos_Patronales= lista_planilla1.Total_Deduciones_Patronales

                Total_gasto_Patron=lista_planilla1.Total_Gastos_Patron
                lista_ausencia_final=[]   
                lista=[lista_planilla1.pk,
                    nombre,
                        round(sueldo_nominal,2),
                        Tiempo_laborado,
                        round(vacaciones,2),
                        round(Xiii_bruto,2),
                        
                        round(PA,2),
                            round(INDE,2),
                            round(CESANTIA,2),
                            round(deduciones_ley,2),
                            round(neto_a_pagar,2),
                            round(Gastos_Patronales,2),
                            round(Total_gasto_Patron,2),
                            
                            lista_planilla1.Colaborador.imagen ,
                            lista_planilla1.Fecha_pago_liquidacion
                            #<td class="small"><img src="{{ MEDIA_URL }}{{  clientes.12 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.0 }}</td>
                                                        
                            ]

                lista_ausencia_final.append(lista)
                    
                colaborador_objj=Colaboradores.objects.get(pk=id_col)
                Fecha_Ingreso=colaborador_objj.Fecha_Ingreso
                tipo_contrato=colaborador_objj.Tipo_contrato
                salario_base=colaborador_objj.Sueldo
                permiso_objj=Permisos.objects.filter(Colaborador__pk=id_col, Tipo_permiso='Vacaciones', Estado_Permiso='Aprobado')
                num_vacas_usada=0
                for y in permiso_objj:
                    num_vacas_usada+=y.Dias_permiso
    
                

                anios, mesess, diass = diferencia_fechas(Fecha_Ingreso, fecha_corte_liquidacion.date())
                antiguedad=str(anios)+' Años '+str(mesess)+" Meses "+ str(diass)+" Dias."
                

                lista_datos_liquidar = [Fecha_Ingreso,tipo_contrato, num_vacas_usada, lista_planilla1.Dias_Vacaciones_Acumuladas, sueldo_nominal,
                                        lista_planilla1.Salario_Ultimos_5_anios ,lista_planilla1.Salario_Ultimos_6_meses ,lista_planilla1.Salario_Ultimos_30_Dias, lista_planilla1.Salario_Mayor, lista_planilla1.Antiguedad_En_Anios, antiguedad]  
            
            return render(request, "motor_planilla_7-l.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,'pk_acreedor_empresa':pk_acreedor_empresa, 'lista_datos_liquidar':lista_datos_liquidar,'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'siguiente_bool':True, 'colaborador':id_col, 'tipo_liquidacion':tipo_liquidacion,  'fecha_salida':str(fecha_corte_liquidacion.date() ) })

        except Exception as e:
            print("Se produjo una excepción:", type(e).__name__, "-", e)
            # Imprimir la información de la traza de la excepción
            traceback.print_exc()
            print(traceback.print_exc(), 'print')
            print("Archivo:", e.__traceback__.tb_frame.f_code.co_filename)
            print("Línea:", e.__traceback__.tb_lineno) 

def ver_liquidacion_detalles(request, searched):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=4:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    dia_str = "2024-01-09"  # Formato: Año-Mes-Día

    # Convertir la cadena a un objeto datetime
    


    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
    if request.method=='GET':
        
        
       
        
        planilla_det=Liquidaciones.objects.get(pk=int(searched))
        Colaborador_obj=Colaboradores.objects.get(pk=planilla_det.Colaborador.pk)
        planilla=planilla_det.Periodo
        tiempo_laborado=str(planilla_det.Anos_Laborado)+' Años '+ str(planilla_det.Meses_Laborados)+' Meses '+str(planilla_det.Dias_Laborados)+' Dias.'
        
        sueldo_diario=round(planilla_det.Salario_Mayor/30,2)
        
        lista_todo_sueldo=fun_promedio_todo_su_pago(planilla_det.Colaborador.pk, planilla_det.Fecha_pago_liquidacion.month , planilla_det.Fecha_pago_liquidacion.year, Colaborador_obj.Fecha_Ingreso)
        
        total_sueldo=lista_todo_sueldo[0]
        total_xiii=lista_todo_sueldo[1]
        promedio_sueldo_historico=lista_todo_sueldo[2]
        lista_sueldo=lista_todo_sueldo[3]
        lista_sipe_import=lista_todo_sueldo[4]
        lista_planilla=[planilla,Colaborador_obj.Fecha_Ingreso,planilla_det.Fecha_pago_liquidacion,tiempo_laborado, sueldo_diario, total_sueldo, total_xiii, promedio_sueldo_historico] 

        #lista_return=[sueldo_5_years,total_decimo,promedio_sueldo_5_years, lista_de_sueldo]
    return render(request, "ver_liquidacion_detalle.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'detalle':planilla_det,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'lista_planilla':lista_planilla, 'lista_sueldo':lista_sueldo , 'lista_sipe_import':lista_sipe_import})

def ver_liquidaciones_historico(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=4:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    

    if request.method=='GET':
        
        lista_final=[]
        
        lista_liquidacion=Liquidaciones.objects.all()


        # Calcular la suma total del salario bruto
        suma_total_salario_bruto = Liquidaciones.objects.all().aggregate(total_salario_bruto=Sum('Total_Gastos_Patron'))
        suma_total_salario_bruto_1 = Liquidaciones.objects.all().aggregate( total_salario_colaboradores=Sum('Total_Liquidacion_Neta'))
        # Acceder al valor de la suma total
        total = suma_total_salario_bruto['total_salario_bruto']
        total_COL = suma_total_salario_bruto_1['total_salario_colaboradores']
        

        # Imprimir el resultado

        
        return render(request, "ver_liquidaciones_historico.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_liquidacion,'cantidad':len(lista_liquidacion),'total':total,'total_COL':total_COL})

def comprobante_prestaciones(request , searched='1'):  

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=4:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    
    if request.method=='GET':
            planilla_det=Liquidaciones.objects.get(pk=int(searched))
            fecha_pago=planilla_det.Fecha_pago_liquidacion
            Fecha_Inicio=str(planilla_det.Colaborador.Fecha_Ingreso)
            Motivo=planilla_det.Tipo_de_Liquidacion
            Cedula=planilla_det.Colaborador.Nro_Identificacion
            Nombre= planilla_det.Colaborador.Colaborador_nombre.upper()+' '+planilla_det.Colaborador.Colaborador_apellido.upper()
            Nombre1= planilla_det.Colaborador.Colaborador_nombre.upper()+'_'+planilla_det.Colaborador.Colaborador_apellido.upper()+'_'+planilla_det.Colaborador.Nro_Identificacion
        
            Dias_vacas=round(planilla_det.Dias_Vacaciones_Acumuladas,2)

            suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=planilla_det.Colaborador.pk).aggregate(total_salario_bruto=Sum('Pago_quincena_despues_descuento'))
            suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=planilla_det.Colaborador.pk).aggregate( total_salario_colaboradores=Sum('Pago_Vacaciones'))
            suma_total_salario_bruto_2 = Panilla_por_periodo_quincenal.objects.filter(Colaborador__pk=planilla_det.Colaborador.pk).aggregate( total_salario_xiii=Sum('Pago_XIII_periodo_Bruto'))
            # Acceder al valor de la suma total
            total = suma_total_salario_bruto['total_salario_bruto']
            total_vacas = suma_total_salario_bruto_1['total_salario_colaboradores']
            Total_neto=round(total+total_vacas,2)
            Total_xiii=round(suma_total_salario_bruto_2['total_salario_xiii'],2)

            #datos
            Vacaciones_brutas=round(planilla_det.Vacaciones_Provisionales_Brutas,2)
            XIII_brutas=round(planilla_det.Decimo_Provisional_Bruto,2)
            Preaviso=round(planilla_det.Preaviso,2)
            prima_antiguedad=round(planilla_det.Prima_Antiguedad,2)
            Indeminizacion = round(planilla_det.Indemnizacion,2)
            #deducion
            SS_Vacas=round(planilla_det.Seguro_Social_Provisiones_Vacas,2)
            SE_Vacas=round(planilla_det.Seguro_Educativo_Proviciones_Vacas,2)
            SS_XIII=round(planilla_det.Seguro_Social_Decimo_Provisiones,2)
            #Totales
            Total_Liquidacion_Bruta=round(planilla_det.Total_Liquidacion_Bruta,2)
            Total_deduciones_Colaborador=round(planilla_det.Total_deduciones_Colaborador,2)
            Total_Liquidacion_Neta=round(planilla_det.Total_Liquidacion_Neta,2)
            #numero salario
            Salario_nominal=round(planilla_det.Colaborador.Sueldo,2)
            Salario_Mayor=round(planilla_det.Salario_Mayor,2)
            Salario_Ultimos_30_Dias=round(planilla_det.Salario_Ultimos_30_Dias,2)
            Salario_Ultimos_6_meses=round(planilla_det.Salario_Ultimos_6_meses,2)
            Salario_Ultimos_5_anios=round(planilla_det.Salario_Ultimos_5_anios,2)
            acreedores=round(planilla_det.Descuento_Acreedores_Empresa,2)
            Antiguedad_En_Anios=round(planilla_det.Antiguedad_En_Anios,3)
            tiempo_laborado=str(planilla_det.Anos_Laborado)+' Años '+ str(planilla_det.Meses_Laborados)+' Meses '+str(planilla_det.Dias_Laborados)+' Dias.'

            Today=datetime.now()
            Today=str (Today)
            lista_Today=Today.split()
            Today=lista_Today[0]
            Today=Today.replace('-','/')
            Today+=' (año/mes/dia) .'
            Empresa= "Go Services S.A"
            lista_excel=[]
            if True: #lista excel
                lista_excel.append(['','','','','','',''])
                lista_excel.append(['',Empresa,'','','','',''])
                lista_excel.append(['','COMPROBANTE DE PAGO DE LIQUIDACION','','','','',''])#ABCDEF
                lista_excel.append(['','FECHA EMISION:','',Today,'','',''])#ABCDEF
                lista_excel.append(['','NOMBRE:','',Nombre,'','CIP',Cedula])#ABCDEF
                lista_excel.append(['','FECHA INICIO:','',Fecha_Inicio,'','FECHA SALIDA:',fecha_pago])#ABCDEF
                lista_excel.append(['','OBSERVACIONES:','',Motivo.upper(),'','ULTIMO DIA TRAB:',fecha_pago])#ABCDEF
                lista_excel.append(['','TIEMPO LABORADO:','',tiempo_laborado,'','ANTIGUEDAD(AÑOS):',Antiguedad_En_Anios])#ABCDEF
                lista_excel.append(['','VACACIONES PENDIENTES:','',str(Dias_vacas)+' DIAS','','SALARIO NOMINAL:',Salario_nominal])#ABCDEF
                lista_excel.append(['','MEJOR SALARIO:','',Salario_Mayor,'','SAL. U. 30 DIAS:',Salario_Ultimos_30_Dias])#ABCDEF
                lista_excel.append(['','PROMEDIO SAL.U. 6 MESES:','',Salario_Ultimos_6_meses,'','SAL. U. 5 AÑOS:',Salario_Ultimos_5_anios])#ABCDEF
                lista_excel.append(['','TOTALES INGRESOS:','',Total_neto,'',Total_xiii,Total_xiii+Total_neto])#ABCDEF
                lista_excel.append(['','DESCRIPCION','','SALARIOS','','XIII','TOTALES'])#ABCDEF
                lista_excel.append(['','VACACIONES PROPORCIONALES','',Vacaciones_brutas,'','',Vacaciones_brutas])#ABCDEF
                lista_excel.append(['','XIII MES PROPORCIONALES','','','',XIII_brutas,XIII_brutas])#ABCDEF
                lista_excel.append(['','PRIMA ANTIGUEDAD','',prima_antiguedad,'','',prima_antiguedad])#ABCDEF Indemnización
                lista_excel.append(['','Indemnización'.upper(),'',Indeminizacion,'','',Indeminizacion])#ABCDEF 
                lista_excel.append(['','total Bruto'.upper(),'','','','',Total_Liquidacion_Bruta])#ABCDEF
                lista_excel.append(['','preaviso'.upper(),'',Preaviso,'','',-1*Preaviso])#ABCDEF 
                lista_excel.append(['','SEGURO SOCIAL'.upper(),'',SS_Vacas,'',SS_XIII,-1*(SS_Vacas+SS_XIII)])#ABCDEF
                lista_excel.append(['','SEGURO EDUCATIVO'.upper(),'',SE_Vacas,'','',-1*(SE_Vacas)])#ABCDEF  
                lista_excel.append(['','PAGO EXCESO ART. 161'.upper(),'','','','',''])
                lista_excel.append(['','DEVOLUCION IMPUESTO SOBRE LA RENTA','','','','','0'])
                lista_excel.append(['','DEDUCCIONES ACREEDORES'.upper(),'','','','',-1*(acreedores)])#ABCDEF
                lista_excel.append(['','TOTAL DEDUCCIONES'.upper(),'','','','',-1*(Total_deduciones_Colaborador)])#ABCDEF 
                lista_excel.append(['','TOTAL A PAGAR'.upper(),'','','','',(Total_Liquidacion_Neta)])#ABCDEF  
                lista_excel.append(['','OBSERVACIONES:','','','','',''])
                lista_excel.append(['','','','','','',''])
                lista_excel.append(['','','','','','',''])
                lista_excel.append(['','','','','','',''])
                lista_excel.append(['','','','','','',''])
                lista_excel.append(['','Recibi conforme:','','','','Cédula:',''])
                lista_excel.append(['','','','(firmar como en la cédula)','','',''])
                lista_excel.append(['','','','','','',''])



                        
            #HACER EXCEL
           
            wb= Workbook()
            ws=wb.active
            ws.title='Comprobante Liquidacion'
            for i in range(len(lista_excel)):
            
                ROW=i+1
                for y in range(len(lista_excel[i])):
                    COLUMN=y+1
                    valor=lista_excel[i][y]
                    ws.cell(row=ROW, column=COLUMN,value=valor) 
            
            wb=estetica_comprobantes_liquidacion(wb,'Comprobante Liquidacion')

   
            empresa='GoCleaning/' 
            path=empresa+'archivos/'        
            Nombre1=Nombre1.replace(' ','_')
            nombre_archivo=path+'Comprobante_de_Liquidacion_de_'+Nombre1+'_.xlsx'
            excel_buffer = BytesIO()
            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo Comprobante de Pago COMPLETO' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo Comprobante de Pago COMPLETO',file=archivo_temporal)
            
            excel_buffer.close()

            

            lista_liquidacion=Liquidaciones.objects.all()
                   
        
            return render(request, "comprobantes_pagos_liquidacion.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_liquidacion,'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method ,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

    
def Viaticos(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        
            
        lista_clientes=Colaboradores.objects.filter(Status='Activo')
       
        return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        
        lista_clientes=Colaboradores.objects.filter(Status='Activo')
            
        values= list(request.POST.keys())
        
        #print(request.POST)
         
        if 'colaborador' not in values:
           
            Mensaje='Error.! No Agregaste un Colaborador, Por favor asigna un Colaborador o mas en la Asignacion de Viaticos.'
            return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


        
        Q1=request.POST["quincena1"]
        if Q1 =='Q1':
            dia_Q1=1
        else:
            dia_Q1=20

        M1=request.POST["mes1"] 
        Y1=request.POST["year1"]

        Q2=request.POST["quincena2"]
        if Q2 =='Q1':
            dia_Q2=1
        else:
            dia_Q2=20
        M2=request.POST["mes2"] 
        Y2=request.POST["year2"]

        date_dia_inicio= datetime(int(Y1), int(M1), dia_Q1)
        date_dia_final=datetime(int(Y2), int(M2), dia_Q2)
        #crear lista de Quater de Inicio a Fin
       
        

        if date_dia_inicio > date_dia_final:
            
            Mensaje='Error.! Agregaste una Fecha donde El Fin de Viaticos es menor, respecto la Fecha de Inicio de Viaticos, Por favor asigna una Fecha correctas.'
            return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        lista_Quaters=fun_lista_quaters(Q1,M1,Y1,Q2,M2,Y2)
        lista_colaborador=request.POST.getlist("colaborador")
        tipo_Ajuste=request.POST["tipo_Ajuste"]
        concepto_Ajuste=request.POST["concepto_Ajuste"]
        monto=float(request.POST["monto"])
        descripcion=request.POST["descripcion"]
        Retener=request.POST["Retener"]
        if es_admin:
            quien_agrego_Jornada='Administrador'
        else:
            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

        if Retener=='No':
            Retener_bool=False
        else:
            Retener_bool=True
        
        for colab in lista_colaborador:
            id_cola=int(colab)
            obj_col=Colaboradores.objects.get(pk=id_cola)
            
            for Quatersss in lista_Quaters:
                try:
                    created= Ajuste_Planilla.objects.get( Colaborador=obj_col,Etapa=Quatersss,Tipo_Ajuste=tipo_Ajuste, Concepto_Ajuste=concepto_Ajuste)
                    created.Monto=monto
                    created.Comentario=descripcion
                    created.Retencion_Iva=Retener_bool
                    created.Quien_agrego_Jornada=quien_agrego_Jornada
                    created.Aprobado_bool=True
                    created.Estado_Permiso='Aprobado'
                    created.Aprobado_por=quien_agrego_Jornada

                    created.save()

                    

                
                except:
                    created= Ajuste_Planilla.objects.create(Monto=monto,
                                                             Colaborador=obj_col,
                                                             Etapa=Quatersss,
                                                             Tipo_Ajuste=tipo_Ajuste,
                                                               Concepto_Ajuste=concepto_Ajuste,
                                                               Comentario=descripcion,
                                                               Retencion_Iva=Retener_bool,
                                                               Quien_agrego_Jornada=quien_agrego_Jornada,
                                                               Aprobado_bool=True,
                                                               Estado_Permiso='Aprobado',
                                                               Aprobado_por=quien_agrego_Jornada)
                
        if True: #guardar Novedades
                                                tipo_seguimiento='Ajuste_Planilla'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Viaticos aprobadas por Administrador'
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
                       
        
        
        Mensaje='Creado con Exito Sastifactoriamente.!'
        return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def ver_viaticos(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
            lista_AJUSTE=Ajuste_Planilla.objects.filter(Colaborador__Status='Activo')

            if nivel<4:
                lista_AJUSTE=Ajuste_Planilla.objects.filter(Colaborador__Status='Activo')
            else:
                  
                empleados_reportados = Ajuste_Planilla.objects.filter(Colaborador__Supervisor__pk=user_profile_obj.Colaborador.pk, Colaborador__Status='Activo')
                lista_AJUSTE = Ajuste_Planilla.objects.filter(Colaborador__pk=user_profile_obj.Colaborador.pk) | empleados_reportados
           
            lista_ausencia_final=[]

            for i in lista_AJUSTE:
              
                     
                lista=[i.pk,
                        i.Estado_Permiso,
                        i.Colaborador.Colaborador_nombre+' '+i.Colaborador.Colaborador_apellido,
                        i.Colaborador.Cargo,
                        i.Colaborador.Departamento,
                        i.Monto,
                        i.Tipo_Ajuste,
                        i.Concepto_Ajuste,
                        i.Comentario,
                        i.Retencion_Iva,
                        i.Quien_agrego_Jornada,
                        i.Aprobado_por,
                        i.Aprobado_bool,
                        i.Colaborador.imagen,
                        i.Etapa

                        #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.13 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.2 }}</td>
                           ]

                lista_ausencia_final.append(lista)

        
        
            return render(request, "ver_viaticos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        #print(request.POST)
        existo='no existo'
        Mensaje='Mensaje'
        # #print(request.FILES['archivo'])
        
        values= list(request.POST.keys())
        archivos=list(request.FILES.keys())
        try:
            if es_admin:
                Aprobado_por='Administrador'
            else:
                Aprobado_por=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
            if 'Actualizar' in values:
                    if 'switch_aprobar' in values:
                        lista_ausencia_aprobar=request.POST.getlist("switch_aprobar")
                        for id in  lista_ausencia_aprobar:
                            jornada= Ajuste_Planilla.objects.get(pk=int(id))
                            jornada.Aprobado_bool=True
                            jornada.Aprobado_por= Aprobado_por
                            jornada.save()
                            if True: #guardar Novedades
                            

                                                    tipo_seguimiento='Viaticos / Ajuste '
                                                    sUB_Tipo_seguimiento=' Aprobado '
                                                    comment=' Apobado Viaticos / Ajuste: '+jornada.Tipo_Ajuste+' , Periodo: '+str(jornada.Etapa)+' Monto: '+str(jornada.Monto)+' Colaborador: '+jornada.Colaborador.Colaborador_nombre+' '+jornada.Colaborador.Colaborador_apellido+' Nro Ident.: '+jornada.Colaborador.Nro_Identificacion
                                                    fecha_novedad_date=datetime.now()
                                                    fecha_novedad=fecha_novedad_date.date()
                                                    hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                    
                                                    if es_admin:

                                                        novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                    SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                    comentario= comment ,
                                                                                                    Fecha_novedad=fecha_novedad ,
                                                                                                    hora_novedad=hora_actual 
                                                                                                                        )
                                                    else:
                                                        novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                    SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                    comentario= comment ,
                                                                                                    Fecha_novedad=fecha_novedad ,
                                                                                                    hora_novedad=hora_actual ,
                                                                                                    Colaborador= user_profile_obj.Colaborador
                                                                                                                        )
                

                        Mensaje='Aprobado Viaticos para: '+str(lista_ausencia_aprobar)+' Viaticos por: '+Aprobado_por
                        existo='existo'

                            
                #### fecha de comparacion terminadas
            
            elif 'Rechazar' in values:
                    rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Rechazar"]))
                    permiso_aprobado_Q=rechazar_permiso.Estado_Permiso
                    rechazar_permiso.Estado_Permiso='Rechazar'
                    rechazar_permiso.Aprobado_por= Aprobado_por
                    
                    rechazar_permiso.save()
                    Mensaje='Rechazado Viaticos para: '+rechazar_permiso.Colaborador.Colaborador_nombre+' '+rechazar_permiso.Colaborador.Colaborador_apellido+' Monto por '+rechazar_permiso.Monto+' Periodo: '+rechazar_permiso.Etapa
                    existo='existo'

            elif 'Aprobar' in values:
                    rechazar_permiso=Ajuste_Planilla.objects.get(pk=int(request.POST["Aprobar"]))
                    rechazar_permiso.Estado_Permiso='Aprobado'
                    rechazar_permiso.Aprobado_por= Aprobado_por
                    rechazar_permiso.save()
                    Mensaje='Validado Viaticos para: '+rechazar_permiso.Colaborador.Colaborador_nombre+' '+rechazar_permiso.Colaborador.Colaborador_apellido+' Monto por '+str(rechazar_permiso.Monto)+' Periodo: '+rechazar_permiso.Etapa
                    existo='existo'

            elif 'Borrar' in values:
                    a_borrar=Ajuste_Planilla.objects.get(pk=int(request.POST["Borrar"]))
                    
                    if True: #guardar Novedades
                            

                                                    tipo_seguimiento='Viaticos / Ajuste '
                                                    sUB_Tipo_seguimiento=' Eliminar '
                                                    comment=' Eliminar Viaticos / Ajuste: '+a_borrar.Tipo_Ajuste+' , Periodo: '+str(a_borrar.Etapa)+' Monto: '+str(a_borrar.Monto)+' Colaborador: '+a_borrar.Colaborador.Colaborador_nombre+' '+a_borrar.Colaborador.Colaborador_apellido+' Nro Ident.: '+a_borrar.Colaborador.Nro_Identificacion
                                                    fecha_novedad_date=datetime.now()
                                                    fecha_novedad=fecha_novedad_date.date()
                                                    hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                    
                                                    if es_admin:

                                                        novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                    SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                    comentario= comment ,
                                                                                                    Fecha_novedad=fecha_novedad ,
                                                                                                    hora_novedad=hora_actual 
                                                                                                                        )
                                                    else:
                                                        novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                    SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                    comentario= comment ,
                                                                                                    Fecha_novedad=fecha_novedad ,
                                                                                                    hora_novedad=hora_actual ,
                                                                                                    Colaborador= user_profile_obj.Colaborador
                                                                                                                        )
                
                    a_borrar.delete()
                    Mensaje=comment.replace('Eliminar','Eliminado')
                    existo='existo'
                    

            if True:
                lista_AJUSTE=Ajuste_Planilla.objects.filter(Colaborador__Status='Activo')
            
                lista_ausencia_final=[]

                for i in lista_AJUSTE:
                
                        
                    lista=[i.pk,
                            i.Estado_Permiso,
                            i.Colaborador.Colaborador_nombre+' '+i.Colaborador.Colaborador_apellido,
                            i.Colaborador.Cargo,
                            i.Colaborador.Departamento,
                            i.Monto,
                            i.Tipo_Ajuste,
                            i.Concepto_Ajuste,
                            i.Comentario,
                            i.Retencion_Iva,
                            i.Quien_agrego_Jornada,
                            i.Aprobado_por,
                            i.Aprobado_bool,
                            i.Colaborador.imagen

                            #<td class="col-2"><img src="{{ MEDIA_URL }}{{  clientes.13 }}" alt="mdo" width="32" height="32" class="rounded-circle mb-2">  {{ clientes.2 }}</td>
                            ]

                    lista_ausencia_final.append(lista)   
                
            return render(request, "ver_viaticos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'agregado':existo, 'Mensaje': Mensaje, 'lista_cliente':lista_ausencia_final,'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        except Exception as e:
            print("Se produjo una excepción:", type(e).__name__, "-", e)
            # Imprimir la información de la traza de la excepción
            traceback.print_exc()
            print(traceback.print_exc(), 'print')
            print("Archivo:", e.__traceback__.tb_frame.f_code.co_filename)
            print("Línea:", e.__traceback__.tb_lineno)   


def Viaticos_supervisor(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        
        if nivel<4:
            lista_clientes=Colaboradores.objects.filter(Status='Activo')
        else:
                  
            empleados_reportados = Colaboradores.objects.filter(Supervisor__pk=user_profile_obj.Colaborador.pk, Status='Activo')
            lista_clientes = Colaboradores.objects.filter(pk=user_profile_obj.Colaborador.pk) | empleados_reportados

        
        
       
        return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        
        lista_clientes=Colaboradores.objects.filter(Status='Activo')
            
        values= list(request.POST.keys())
        
        #print(request.POST)
         
        if 'colaborador' not in values:
           
            Mensaje='Error.! No Agregaste un Colaborador, Por favor asigna un Colaborador o mas en la Asignacion de Viaticos.'
            return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


        
        Q1=request.POST["quincena1"]
        if Q1 =='Q1':
            dia_Q1=1
        else:
            dia_Q1=20

        M1=request.POST["mes1"] 
        Y1=request.POST["year1"]

        Q2=request.POST["quincena2"]
        if Q2 =='Q1':
            dia_Q2=1
        else:
            dia_Q2=20
        M2=request.POST["mes2"] 
        Y2=request.POST["year2"]

        date_dia_inicio= datetime(int(Y1), int(M1), dia_Q1)
        date_dia_final=datetime(int(Y2), int(M2), dia_Q2)
        #crear lista de Quater de Inicio a Fin
       
        

        if date_dia_inicio > date_dia_final:
            
            Mensaje='Error.! Agregaste una Fecha donde El Fin de Viaticos es menor, respecto la Fecha de Inicio de Viaticos, Por favor asigna una Fecha correctas.'
            return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

        lista_Quaters=fun_lista_quaters(Q1,M1,Y1,Q2,M2,Y2)
        lista_colaborador=request.POST.getlist("colaborador")
        tipo_Ajuste=request.POST["tipo_Ajuste"]
        concepto_Ajuste=request.POST["concepto_Ajuste"]
        monto=float(request.POST["monto"])
        descripcion=request.POST["descripcion"]
        Retener=request.POST["Retener"]
        

        if es_admin:
            quien_agrego_Jornada='Administrador'
        else:
            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido

        if Retener=='No':
            Retener_bool=False
        else:
            Retener_bool=True
        
        for colab in lista_colaborador:
            id_cola=int(colab)
            obj_col=Colaboradores.objects.get(pk=id_cola)
            
            for Quatersss in lista_Quaters:
                try:
                    created= Ajuste_Planilla.objects.get( Colaborador=obj_col,Etapa=Quatersss,Tipo_Ajuste=tipo_Ajuste, Concepto_Ajuste=concepto_Ajuste)
                    created.Monto=monto
                    created.Comentario=descripcion
                    created.Retencion_Iva=Retener_bool
                    created.Quien_agrego_Jornada=quien_agrego_Jornada
                   
                    
                    

                    created.save()

                
                except:
                    created= Ajuste_Planilla.objects.create(Monto=monto,
                                                             Colaborador=obj_col,
                                                             Etapa=Quatersss,
                                                             Tipo_Ajuste=tipo_Ajuste,
                                                               Concepto_Ajuste=concepto_Ajuste,
                                                               Comentario=descripcion,
                                                               Retencion_Iva=Retener_bool,
                                                               Quien_agrego_Jornada=quien_agrego_Jornada,
                                                             
                                                               
                                                              )
                
                
        if True: #guardar Novedades
                                                tipo_seguimiento='Ajuste_Planilla'
                                                sUB_Tipo_seguimiento=' Creacion '
                                                comment=' Creacion Viaticos por Supervisor'
                                                fecha_novedad_date=datetime.now()
                                                fecha_novedad=fecha_novedad_date.date()
                                                hora_actual = fecha_novedad_date.strftime('%H:%M')
                                                
                                                if es_admin:

                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual 
                                                                                                                    )
                                                else:
                                                    novedades= Seguimiento_Actividad.objects.create(Tipo_seguimiento= tipo_seguimiento,
                                                                                                SUB_Tipo_seguimiento= sUB_Tipo_seguimiento,
                                                                                                comentario= comment ,
                                                                                                Fecha_novedad=fecha_novedad ,
                                                                                                hora_novedad=hora_actual ,
                                                                                                Colaborador= user_profile_obj.Colaborador
                                                                                                                    )
         
        
        Mensaje='Creado con Exito Sastifactoriamente.!'
        return render(request, "agregar_viaticos_masivos.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_clientes, 'agregado1':'existo','agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def analisis_quincena(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0

    lista_final=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_final.append(lista)

    if request.method=='GET':
        
        return render(request, "analisis_quincena.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion), 'request':request.method})
    elif request.method=='POST':
        #print(request.POST)
        values= list(request.POST.keys())

        if 'mes' in values: #planilla sacar periodo 
            Quater=request.POST["quincena"]
            month=request.POST["mes"]
            year=request.POST["year"]
            planilla=Quater+'-'+month+'-'+year
            lista_planilla=planilla.split('-')
            Quater=lista_planilla[0]
            Quater=Quater.replace('Q','')
            Quater=int(Quater)
            mes=int(lista_planilla[1])
            year=int(lista_planilla[2])
            if Quater==1:
                inicio_corte=26
                final_corte=10
                fecha_pago=15
                if mes==1:
                    mes_inicial=12
                    year_inicial=year-1
                else:
                    mes_inicial=mes-1
                    year_inicial=year
                
            else:
                inicio_corte=11
                final_corte=25
                mes_inicial=mes
                year_inicial=year
                
                

            fecha_inicial_corte_str=str(inicio_corte)+'-'+str(mes_inicial)+'-'+str(year_inicial)
            fecha_final_corte_str=str(final_corte)+'-'+str(mes)+'-'+str(year)
            

            fecha_inicial_corte = datetime(year_inicial, mes_inicial, inicio_corte)      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(year, mes, final_corte)        # Ejemplo: 20 de julio de 2024
            fecha_pago = calendar.monthrange(fecha_final_corte.year, fecha_final_corte.month)[1]
            
            fecha_pago_str=str(fecha_pago)+'-'+str(mes)+'-'+str(year)
            lista_planilla=[planilla,fecha_inicial_corte_str,fecha_final_corte_str,fecha_pago_str] 

            lista_planilla_global=Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla)
            
           
            suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_quincena_despues_descuento'))
            suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Pago_Vacaciones'))
            suma_total_salario_bruto_2 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_xiii=Sum('Pago_XIII_periodo_Bruto'))
            suma_total_Patronales = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_patronal=Sum('Totales_patronales'))
            suma_total_de_Totales = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_de_totales=Sum('Total_general_sueldo'))
            suma_total_de_bonos = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_de_bonos=Sum('Pago_total_bonos_sin_impuesto'))
            # Acceder al valor de la suma total
            lista_Quincena_General=[]
            total_salario = suma_total_salario_bruto['total_salario_bruto']
            total_vacas = suma_total_salario_bruto_1['total_salario_colaboradores']
            #Total_neto=round(total+total_vacas,2)
            Total_xiii=round(suma_total_salario_bruto_2['total_salario_xiii'],2)
            total_bonos=round(suma_total_de_bonos['total_de_bonos'],2)
            total_patronal=round(suma_total_Patronales['total_patronal'],2)
            total_totales=round(suma_total_de_Totales['total_de_totales'],2)
            lista_Quincena_General.append(['Total Patronal',100,total_totales])
            #sueldo bruto
            porc_sueldo=round(total_salario*100/total_totales,2)
            lista_Quincena_General.append(['Salario Bruto',porc_sueldo,total_salario])
            #vacaciones
            porc_sueldo=round(total_vacas*100/total_totales,2)
            lista_Quincena_General.append(['Vacaciones Bruto',porc_sueldo,total_vacas])
            #XIII
            porc_sueldo=round(Total_xiii*100/total_totales,2)
            lista_Quincena_General.append(['XIII Bruto',porc_sueldo,Total_xiii])
            #bonos
            porc_sueldo=round(total_bonos*100/total_totales,2)
            lista_Quincena_General.append(['Bonos y Viaticos Sin Impuesto',porc_sueldo,total_bonos])
            #total patronales
            porc_sueldo=round(total_patronal*100/total_totales,2)
            lista_Quincena_General.append(['Provisiones y Aportes Patronales de Ley',porc_sueldo,total_patronal])

            # desglose de Salario Sueldo

            if True:
                lista_desglose_sueldo=[]
               
                #inicio desglose de campos
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Sueldo_Bruto'))
                total_sueldo_bruto = round(suma_total_salario_bruto['total_salario_bruto'],2)
                lista_desglose_sueldo.append(['Salario Bruto',100,total_sueldo_bruto])

                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Sueldo_base_quincenal'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Trabajado'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Salario Jornada Ordinaria',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                ##############Pago_Dias_Trabajo_Feriado_descanso
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Dias_Trabajo_Feriado_descanso'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Trabajo_Feriado_descanso'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Salario Feriado con Dias Descanso Trabajados',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                
                ##############Dias_Trabajo_Feriado
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Dias_Trabajo_Feriado'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Trabajo_Feriado'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Salario Feriados Trabajados',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                ##############Dias_Trabajo_Descanso
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Dias_Trabajo_Descanso'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Trabajo_Descanso'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Salario Dias de Descanso Trabajados',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                ##############Pago_Dias_Trabajo_HR_Regulares_Adicionales
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Dias_Trabajo_HR_Regulares_Adicionales'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Trabajo_HR_Regulares_Adicionales'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Salario HR Regulares Extras',porc_sueldo,str(round(total_2/60,2))+' Hrs. por: $ '+str(total_1)])

                ##############incapacidad
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Incapacidad'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Incapacidad'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Incapacidad',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                 ##############Dias_Licencia_Paga
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Licencia_paga'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Licencia_Paga'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Licencias Pagas',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                 ##############sobretiempo
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Total_Sobretiempo_quincenal'))
                #suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Licencia_Paga'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                #total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Sobretiempo ',porc_sueldo,'por: $ '+str(total_1)])

                ##############bonificaciones
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Bono_con_Impuesto'))
                #suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Licencia_Paga'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                #total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Bonificacion con Impuestos ',porc_sueldo,'por: $ '+str(total_1)])

                ##############Dia_ausencia
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_Dia_ausencia'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dia_ausencia'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Dias Ausencia ',porc_sueldo,str(total_2)+' Dias por: $ '+str(total_1)])

                ##############MIN_Ausencia
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Pago_MIN_Ausencia'))
                suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('MIN_Ausencia'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Descuento Minutos Ausencia Dentro Jornada ',porc_sueldo,str(round(total_2/60,2))+' Hrs. por: $ '+str(total_1)])

                
                ##############Deducciones
                suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Deduccion_con_Impuesto'))
                #suma_total_salario_bruto_1 = Panilla_por_periodo_quincenal.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Dias_Licencia_Paga'))
                total_1 = round(suma_total_salario_bruto['total_salario_bruto'],2)
                #total_2 = round(suma_total_salario_bruto_1['total_salario_colaboradores'],2)

                porc_sueldo=round(total_1*100/total_sueldo_bruto,2)
                lista_desglose_sueldo.append(['Deduccion con Impuestos ',porc_sueldo,'por: $ '+str(total_1)])

            if True: #ultimos 6 quincenas
                lista_ultimos_6=lista_ultimos_Q(planilla,6)
                lista_datos=[]
                for periodo in lista_ultimos_6:
                    suma_total_salario_bruto = Panilla_por_periodo_quincenal.objects.filter(Periodo=periodo).aggregate(total_salario_bruto=Sum('Total_general_sueldo'))
                    total_salario = suma_total_salario_bruto['total_salario_bruto']
                    try:
                        lista_datos.append(round(total_salario,2))
                    except:
                        lista_datos.append(round(0,2))

                
                datos_grafica = {
                    'labels': lista_ultimos_6,
                    'datos': lista_datos
                         }

            if True:# Departamento Activo 
                Lista_dpto=[]
                lista_dato_dept=[]
                lista_sueldo_dept=[]
                
                for planilla_indiv in lista_planilla_global:
                    dpto=planilla_indiv.Colaborador.Departamento
                    if dpto not in Lista_dpto:
                        Lista_dpto.append(dpto)
                
                for dpto in Lista_dpto:
                    lista_planilla_global1=lista_planilla_global
                    suma_total_salario_bruto = lista_planilla_global1.filter(Colaborador__Departamento=dpto).aggregate(total_salario_bruto=Sum('Total_general_sueldo'))
                    total_salario = suma_total_salario_bruto['total_salario_bruto']
                    cantidad=lista_planilla_global1.filter(Colaborador__Departamento=dpto)
                    lista_dato_dept.append(dpto+' '+str(len(cantidad))+' Col.')
                    lista_sueldo_dept.append(round(total_salario,2))
                
                doughnut_datasets = {
                    'label': 'Relacion Departamento /  Saldos Generales  en Quincena',
                    'labels': lista_dato_dept,
                    'datos': lista_sueldo_dept
                         }
               

            if True:# CLIENTES Activo 
                Lista_cliente=[]
                lista_dato_cliente=[]
                lista_sueldo_cliente=[]
                lista_planilla_clientes=Panilla_por_periodo_quincenal_clientes.objects.filter(Periodo=planilla)
                for planilla_indiv in lista_planilla_clientes:
                    dpto=planilla_indiv.Cliente.nombre_empresa
                    if dpto not in Lista_cliente:
                        Lista_cliente.append(dpto)

                
                for cliente in Lista_cliente:
                    lista_planilla_global1=lista_planilla_clientes
                    suma_total_salario_bruto = lista_planilla_global1.filter(Cliente__nombre_empresa=cliente).aggregate(total_salario_bruto=Sum('Total_general_sueldo'))
                    total_salario = suma_total_salario_bruto['total_salario_bruto']
                    cantidad=lista_planilla_global1.filter(Cliente__nombre_empresa=cliente)
                    lista_dato_cliente.append(cliente+' '+str(len(cantidad))+' Col.')
                    lista_sueldo_cliente.append(round(total_salario,2))
                
                doughnut_datasets_1 = {
                    'label': 'Relacion Clientes /  Saldos Generales  en Quincena',
                    'labels': lista_dato_cliente,
                    'datos': lista_sueldo_cliente
                         }

            if True: #Liquidaciones
                Lista_cliente=[]
                lista_label_liq=['Total Gastos Patronales','Vacaciones Bruto','XIII Bruto','Prima Antiguedad','Indemnizacion','Total Aportes Patronales Ley']
                lista_datos_liq=[]
                lista_planilla_liq=Liquidaciones.objects.filter(Periodo=planilla)
                if len(lista_planilla_liq)==0:
                    lista_datos_liq=[0,0,0,0,0,0]
                else:
                    suma_total_salario_bruto = Liquidaciones.objects.filter(Periodo=planilla).aggregate(total_salario_bruto=Sum('Total_Gastos_Patron'))
                    suma_total_salario_bruto_1 = Liquidaciones.objects.filter(Periodo=planilla).aggregate( total_salario_colaboradores=Sum('Vacaciones_Provisionales_Brutas'))
                    suma_total_salario_bruto_2 = Liquidaciones.objects.filter(Periodo=planilla).aggregate( total_salario_xiii=Sum('Decimo_Provisional_Bruto'))
                    suma_total_Patronales = Liquidaciones.objects.filter(Periodo=planilla).aggregate( total_patronal=Sum('Prima_Antiguedad'))
                    suma_total_de_Totales = Liquidaciones.objects.filter(Periodo=planilla).aggregate( total_de_totales=Sum('Indemnizacion'))
                    suma_total_de_bonos = Liquidaciones.objects.filter(Periodo=planilla).aggregate( total_de_bonos=Sum('Total_Deduciones_Patronales'))

                    total_totales = suma_total_salario_bruto['total_salario_bruto']
                    total_vacas = suma_total_salario_bruto_1['total_salario_colaboradores']
            #Total_neto=round(total+total_vacas,2)
                    Total_xiii=round(suma_total_salario_bruto_2['total_salario_xiii'],2)
                    
                    total_antiguedad=round(suma_total_Patronales['total_patronal'],2)
                    total_indem=round(suma_total_de_Totales['total_de_totales'],2)
                    total_deducciones_patronales=round(suma_total_de_bonos['total_de_bonos'],2)

                    lista_datos_liq=[total_totales,total_vacas,Total_xiii,total_antiguedad,total_indem,total_deducciones_patronales]
                #print(lista_label_liq)
                #print(lista_datos_liq)
                datos_bar = {
                    'label': 'Desglose de Liquidacion en Quincena',
                    'labels': lista_label_liq,
                    'datos': lista_datos_liq
                         }








        return render(request, "analisis_quincena.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion),'lista_planilla':lista_planilla,'request':request.method, 'total_bruto':total_salario, 'lista_Quincena_General':lista_Quincena_General , 'lista_desglose_sueldo':lista_desglose_sueldo , 'datos_grafica': json.dumps(datos_grafica),'doughnut_datasets': json.dumps(doughnut_datasets), 'doughnut_datasets_1': json.dumps(doughnut_datasets_1), 'datos_bar': json.dumps(datos_bar) })
        
        # #print(request.FILES['archivo'])
        
def analisis_fecha_colaborador(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_finalL=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_finalL.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "analisis_colaborador_fechas.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'request':request.method , 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        

        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            analisis=request.POST["analisis"]

            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
            lista_final=[]
            lista_graficas=[]

            if analisis=='Tardanzas':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Minutos_Tardia__gt=0)
                campo='Tardanzas (min.)'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion

                    campo_importante=obj_hoja.Minutos_Tardia

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    lista_final.append(lista)
                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,campo_importante])

            elif analisis=='Ausencia':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Minutos_Faltantes_turno__gt=0)
                campo='Ausencia (min.)'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion

                    campo_importante=obj_hoja.Minutos_Faltantes_turno

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,campo_importante])

            elif  analisis=='Temprano':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Minutos_llego_temprano__gt=0)
                campo='LLegadas Tempranas (min.)'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion

                    campo_importante=obj_hoja.Minutos_llego_temprano

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,campo_importante])

            elif  analisis=='Sobretiempo':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Minutos_Trabajads__gt=F('Minutos_Trabajads_Jornada_Laboral'))
                
                campo='Sobretiempo (hrs.)'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion
                    min_trabaj=obj_hoja.Minutos_Trabajads
                    min_jornada_laboral=obj_hoja.Minutos_Trabajads_Jornada_Laboral

                    campo_importante=min_trabaj-min_jornada_laboral
                    campo_importante=round(campo_importante/60,2)

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,campo_importante])

            elif  analisis=='Sobretiempo_3hr':
                lista_planilla1=Hoja_tiempo.objects.annotate(diferencia=Abs(F('Minutos_Trabajads') - F('Minutos_Trabajads_Jornada_Laboral'), output_field=FloatField())
                                                            ).filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()),Minutos_Trabajads__gt=F('Minutos_Trabajads_Jornada_Laboral'),diferencia__gt=180)
                campo='Sobretiempo Mayores 3HR (hrs.)'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion
                    min_trabaj=obj_hoja.Minutos_Trabajads
                    min_jornada_laboral=obj_hoja.Minutos_Trabajads_Jornada_Laboral

                    campo_importante=min_trabaj-min_jornada_laboral-180
                    campo_importante=round(campo_importante/60,2)

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,campo_importante])

            elif  analisis=='Dia_Descanso':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Laboro_dia_domingo_descanso=True)
                campo='Dia Descanso Laborados'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion

                    campo_importante=obj_hoja.Minutos_Trabajads

                    campo_importante='Si -'+str(round(campo_importante/60,2))+' hrs.'

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,obj_hoja.Minutos_Trabajads])

            elif  analisis=='Dia_Feriado':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), laboro_dia_feriado=True)
                campo='Dia Feriados Laborado '
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion

                    campo_importante=obj_hoja.Minutos_Trabajads

                    campo_importante='Si -'+str(round(campo_importante/60,2))+' hrs.'

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,obj_hoja.Minutos_Trabajads])

            elif  analisis=='Hr_Trabajadas':
                lista_planilla1=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Minutos_Trabajads__gt=0)
                
                campo='Horas Trabajadas (hrs.)'
                
                lista_final=[]
                for obj_hoja in lista_planilla1:
                    nombre_apellido=obj_hoja.Colaborador.Colaborador_nombre+' '+obj_hoja.Colaborador.Colaborador_apellido
                    imagen=obj_hoja.Colaborador.imagen
                    cliente=obj_hoja.Empresa.nombre_empresa
                    fecha_ingreso=obj_hoja.Dia_entrada
                    fecha_ingreso = fun_fecha_bonita(fecha_ingreso)
                    fecha_salida  = fun_fecha_bonita(obj_hoja.Dia_salida)

                    hr_entrada=obj_hoja.Entrada
                    hr_salida=obj_hoja.Salida
                    cargo=obj_hoja.Colaborador.Cargo
                    dpto= obj_hoja.Colaborador.Departamento
                    Status=obj_hoja.Colaborador.Status
                    cedula=obj_hoja.Colaborador.Nro_Identificacion
                    campo_importante=obj_hoja.Minutos_Trabajads
                    campo_importante=round(campo_importante/60,2)

                    lista=[Status,
                           cedula,
                           nombre_apellido,
                           imagen,
                           cliente,
                           cargo,
                           dpto,
                           fecha_ingreso,
                           hr_entrada,
                           fecha_salida,
                           hr_salida,
                           campo_importante
                           ]
                    
                    lista_final.append(lista)

                    inicial_apellido=obj_hoja.Colaborador.Colaborador_apellido
                    inicial_apellido=inicial_apellido[0]
                    cod=obj_hoja.Colaborador.Colaborador_nombre+'-'+inicial_apellido+'. '+cedula
                    lista_graficas.append([cod,campo_importante])


            
            lista_colab=[]
            for hoja_tiempo in lista_graficas:
                colab=hoja_tiempo[0]
                if colab not in lista_colab:
                    lista_colab.append(colab)
            
            lista_cabecera=[]
            lista_datos=[]
            for colab in lista_colab:
                nro=0
                monto_total=0
                for datos in lista_graficas:
                    if datos[0]==colab:
                        monto_total += datos[1]
                        nro += 1
                
                colab=colab+' Rep: '+str(nro)
                lista_cabecera.append(colab)
                lista_datos.append(round(monto_total,2))


            datos_bar = {
                    'label': campo,
                    'labels': lista_cabecera,
                    'datos': lista_datos
                         }


            #print(datos_bar)

            #lista_planilla1.filter(Fecha_pago_quincena__lte=fecha_final_corte.date())
            




        
        return render(request, "analisis_colaborador_fechas.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'datos_bar': json.dumps(datos_bar), 'lista_final':lista_final, 'campo':campo, 'request':request.method , 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def reporte_novedades(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_finalL=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_finalL.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_reporte_novedades.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
   
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        

        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
            Nuevo_Ingresos=Colaboradores.objects.filter(Fecha_Ingreso__range=(fecha_inicial_corte.date(), fecha_final_corte.date()))
            Lista_Nuevo_Ingresos=[]
            lista_Egresos=[]
            lista_min_ausencia=[]
            lista_min_Tardia=[]
            lista_min_temprano=[]
            lista_min_sobretiempo=[]
            lista_min_sobretiempo_3hr=[]
            lista_min_dia_descanso=[]
            lista_min_dia_Feriado=[]
            lista_min_dia_permiso=[]

            num=0
            fecha_hoy=datetime.now()
           
            for ingresos_obj in Nuevo_Ingresos:
                num+=1
                nombre=ingresos_obj.Colaborador_nombre
                apellido=ingresos_obj.Colaborador_apellido
                tipo_iden=ingresos_obj.Tipo_documento
                cedula=ingresos_obj.Nro_Identificacion
                Seguro_Social=ingresos_obj.Nro_Seguro_Social
                fecha_nacimiento_date=fun_convertir_string_date_a_fecha(ingresos_obj.Fecha_nacimiento)
                fecha_nacimiento= fun_fecha_bonita(fecha_nacimiento_date)
               
                edad=str_diferencia_fechas( fecha_nacimiento_date  , fecha_hoy)
                Cargo=ingresos_obj.Cargo
                dpto=ingresos_obj.Departamento
                fecha_ingreso=ingresos_obj.Fecha_Ingreso
                status=ingresos_obj.Status
                if status!='Activo':
                    fecha_egreso=ingresos_obj.Fecha_Egreso
                    antiguedad=str_diferencia_fechas( fecha_ingreso  , fecha_egreso)
                else:
                    antiguedad=str_diferencia_fechas( fecha_ingreso  , fecha_hoy)
                fecha_ingreso=fun_fecha_bonita(fecha_ingreso)
                
                

                lista=[num,status,nombre, apellido,  tipo_iden ,  cedula , Seguro_Social, 
                     fecha_ingreso , antiguedad, Cargo , dpto ,fecha_nacimiento, edad 
                    ]

                Lista_Nuevo_Ingresos.append(lista)

            if True: # nuevo egreso
                Nuevo_Egresos=Liquidaciones.objects.filter(Fecha_pago_liquidacion__range=(fecha_inicial_corte.date(), fecha_final_corte.date()))
                num=0

                for ingresos_obj in Nuevo_Egresos:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Fecha_pago_liquidacion=fun_fecha_bonita(ingresos_obj.Fecha_pago_liquidacion)
                    duracion_laborado=str_diferencia_fechas( ingresos_obj.Colaborador.Fecha_Ingreso  , ingresos_obj.Fecha_pago_liquidacion)
                    Tipo_de_Liquidacion=ingresos_obj.Tipo_de_Liquidacion
                    monto_bruta_liquidacion=round(ingresos_obj.Total_Liquidacion_Bruta,2)
                    Total_deduciones_Colaborador=round(ingresos_obj.Total_deduciones_Colaborador,2)
                    Total_Liquidacion_Neta=round(ingresos_obj.Total_Liquidacion_Neta,2)
                    Total_Deduciones_Patronales=round(ingresos_obj.Total_Deduciones_Patronales,2)
                    Total_Gastos_Patron=round(ingresos_obj.Total_Gastos_Patron,2)
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    fecha_ingreso=ingresos_obj.Colaborador.Fecha_Ingreso
                   

                    lista=[num,Tipo_de_Liquidacion,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , fecha_ingreso ,Fecha_pago_liquidacion , duracion_laborado,
                        monto_bruta_liquidacion , Total_deduciones_Colaborador, Total_Liquidacion_Neta,
                        Total_Deduciones_Patronales , Total_Gastos_Patron
                        
                        ]
                    
                    lista_Egresos.append(lista)

            if True: # min Ausencia
                Min_Aunsencia_list=Hoja_tiempo.objects.filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()), Minutos_Faltantes_turno__gt=0)
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_Faltantes_turno
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_ausencia.append(lista)

            if True: # min Tardia
                Min_Aunsencia_list=Hoja_tiempo.objects.filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()), Minutos_Tardia__gt=0)
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_Tardia
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_Tardia.append(lista)

            if True: # min llegada temprana
                Min_Aunsencia_list=Hoja_tiempo.objects.filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()), Minutos_llego_temprano__gt=0)
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_llego_temprano
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_temprano.append(lista)

            if True: # Sobretiempo
                Min_Aunsencia_list=Hoja_tiempo.objects.filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()), Minutos_Trabajads__gt=F('Minutos_Trabajads_Jornada_Laboral'))
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_Trabajads-ingresos_obj.Minutos_Trabajads_Jornada_Laboral
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_sobretiempo.append(lista)

            if True: # Sobretiempo 3hr
                Min_Aunsencia_list=Hoja_tiempo.objects.annotate(diferencia=Abs(F('Minutos_Trabajads') - F('Minutos_Trabajads_Jornada_Laboral'), output_field=FloatField())
                                                            ).filter(Dia_entrada__range=(fecha_inicial_corte.date(), fecha_final_corte.date()),Minutos_Trabajads__gt=F('Minutos_Trabajads_Jornada_Laboral'),diferencia__gt=180)
                
                
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_Trabajads-ingresos_obj.Minutos_Trabajads_Jornada_Laboral-180
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_sobretiempo_3hr.append(lista)

            if True: # Dia descanso
                Min_Aunsencia_list=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), Laboro_dia_domingo_descanso=True)
                
                
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_Trabajads
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_dia_descanso.append(lista)

            if True: # Dia feriado
                Min_Aunsencia_list=Hoja_tiempo.objects.filter(Dia_entrada__gte=fecha_inicial_corte.date(), Dia_entrada__lte=fecha_final_corte.date(), laboro_dia_feriado=True)
                
                
                num=0

                for ingresos_obj in Min_Aunsencia_list:
                    num+=1
                    nombre=ingresos_obj.Colaborador.Colaborador_nombre
                    apellido=ingresos_obj.Colaborador.Colaborador_apellido
                    tipo_iden=ingresos_obj.Colaborador.Tipo_documento
                    cedula=ingresos_obj.Colaborador.Nro_Identificacion
                    Cargo=ingresos_obj.Colaborador.Cargo
                    dpto=ingresos_obj.Colaborador.Departamento
                    Fecha_Entrada=fun_fecha_bonita(ingresos_obj.Dia_entrada)+' '+ingresos_obj.Entrada
                    Fecha_salida=fun_fecha_bonita(ingresos_obj.Dia_salida)+' '+ingresos_obj.Salida
                    Jornada_diaria=ingresos_obj.Colaborador.Hora_entrada+'-'+ingresos_obj.Colaborador.Hora_salida+' '+str(ingresos_obj.Colaborador.Jornada_diaria)+' Hrs'
                    Min_ausencia=ingresos_obj.Minutos_Trabajads
                    Min_ausencia_hr=round(Min_ausencia/60,2)
                    #rata hr
                    rata_por_hr=round((ingresos_obj.Colaborador.Sueldo*12/52)/ingresos_obj.Colaborador.Jornada_semanal,2)
                   

                    lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto , Jornada_diaria, rata_por_hr, Fecha_Entrada ,Fecha_salida ,
                        Min_ausencia , Min_ausencia_hr
                        
                        ]
                    
                    lista_min_dia_Feriado.append(lista)

            if True: #Permisos
                obj_si_hay_permiso_fecha_generar=Permisos.objects.filter( Estado_Permiso='Aprobado')
                num+=1
                lista_persimo_trabj=[]
                if len(obj_si_hay_permiso_fecha_generar)>0:
                     
                     for permisos in obj_si_hay_permiso_fecha_generar:
                        
                        dia_inicio_permiso=permisos.Dia_inicio_permiso
                        dia_fin_permiso=permisos.Dia_fin_permiso
                        
                        diass = dias_de_vacaciones(dia_inicio_permiso, dia_fin_permiso, fecha_inicial_corte.date(), fecha_final_corte.date())
                        
                        
                        if diass>0 and permisos.Estado_Permiso=='Aprobado':
                            num+=1
                            nombre=permisos.Colaborador.Colaborador_nombre
                            apellido=permisos.Colaborador.Colaborador_apellido
                            tipo_iden=permisos.Colaborador.Tipo_documento
                            cedula=permisos.Colaborador.Nro_Identificacion
                            Cargo=permisos.Colaborador.Cargo
                            dpto=permisos.Colaborador.Departamento
                            Fecha_Entrada=fun_fecha_bonita(permisos.Dia_inicio_permiso)
                            Fecha_salida=fun_fecha_bonita(permisos.Dia_fin_permiso)
                            Dias=permisos.Dias_permiso
                            Tipo_permiso=permisos.Tipo_permiso
                            Comentario_Permiso = permisos.Comentario_Permiso

                            lista=[num,nombre, apellido,  tipo_iden ,  cedula , 
                        Cargo , dpto ,Tipo_permiso, Dias, Fecha_Entrada, Fecha_salida ,  
                        Comentario_Permiso
                        ]
                            
                        lista_min_dia_permiso.append(lista)


                            
            lista_cabecera_permiso=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Tipo Permiso',
                'Dias de Permiso',
                'Fecha Inicio',
                'Fecha Final',
                
                'Motivo Permiso'
             ]                

            
            lista_cabecera=['#','Status',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Nro Seguro Social',
                'Fecha Ingreso',
                'Antiguedad',
                'Cargo',
                'Departamento',
                'Fecha Nacimiento',
                'Edad'
                
                
               
                               ]
            
            lista_cabecera_egresos=['#','Tipo Liquidacion',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Fecha Ingreso',
                'Fecha Egreso',
                'Tiempo Laborando',
                'Monto Bruto',
                'Deduccion Ley',
                'Monto Neto',
                'Deducciones Patronales',
                'Total Patronal Liquidacion'
                               ]
            
            lista_cabecera_min_ausencia=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'Ausencia ( min. )',
                'Ausencia ( hr. )',
            
                               ]
            
            lista_cabecera_min_temprano=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'LLegadas Tempranas ( min. )',
                'LLegadas Tempranas ( hr. )'
            
                               ]
            
            lista_cabecera_min_tardanza=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'Tardanzas ( min. )',
                'Tardanzas ( hr. )'
            
                               ]
            
            lista_cabecera_min_sobretiempo=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'SobreTiempo ( min. )',
                'SobreTiempo ( hr. )'
            
                               ]
            
            lista_cabecera_min_sobretiempo_3h=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'SobreTiempo +3hr ( min. )',
                'SobreTiempo +3hr ( hr. )'
            
                               ]
            
            lista_cabecera_min_dia_descanso=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'Dia Descanso ( min. )',
                'Dia Descanso  ( hr. )'
            
                               ]
            
            lista_cabecera_min_feriado=['#',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Cargo',
                'Departamento',
                'Horario Contrato',
                'HR x $',
                'Entrada',
                'Salida',
                'Feriado ( min. )',
                'Feriado  ( hr. )'
            
                               ]
            
            


            if True: #nuevo ingreso
                string_tittle=str(len(Lista_Nuevo_Ingresos))+ ' Nuevos Ingresos'
                Lista_Nuevo_Ingresos.insert(0,lista_cabecera)
                
                wb= Workbook()
                ws=wb.active
               
                ws.title=string_tittle
                for i in range(len(Lista_Nuevo_Ingresos)):
                
                    ROW=i+1
                    for y in range(len(Lista_Nuevo_Ingresos[i])):
                        COLUMN=y+1
                        valor=Lista_Nuevo_Ingresos[i][y]
                        ws.cell(row=ROW, column=COLUMN,value=valor) 
                
                
                wb=fun_novedades_ingresos_cosmetic(wb,string_tittle)

            if True: #nuevo egreso
                string_tittle=str(len(lista_Egresos))+ ' Egresos'
                lista_Egresos.insert(0,lista_cabecera_egresos)
               
                hoja_1 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_Egresos)):
            
                    ROW=i+1
                    for y in range(len(lista_Egresos[i])):
                        COLUMN=y+1
                        valor=lista_Egresos[i][y]
                        hoja_1.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_egreso_cosmetic(wb,string_tittle)
            
            if True: #Permisos
                string_tittle=str(len(lista_min_dia_permiso))+ ' Permisos-Vacaciones'
                lista_min_dia_permiso.insert(0,lista_cabecera_permiso)
               
                hoja_5 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_dia_permiso)):
            
                    ROW=i+1
                    for y in range(len(lista_min_dia_permiso[i])):
                        COLUMN=y+1
                        valor=lista_min_dia_permiso[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_permiso_cosmetic(wb,string_tittle)


            if True: #nuevo min Ausecia
                string_tittle=str(len(lista_min_ausencia))+ ' Aunsencia'
                lista_min_ausencia.insert(0,lista_cabecera_min_ausencia)
               
                hoja_2 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_ausencia)):
            
                    ROW=i+1
                    for y in range(len(lista_min_ausencia[i])):
                        COLUMN=y+1
                        valor=lista_min_ausencia[i][y]
                        hoja_2.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)

            if True: #nuevo min tardanza
                string_tittle=str(len(lista_min_Tardia))+ ' Tardanza'
                lista_min_Tardia.insert(0,lista_cabecera_min_tardanza)
               
                hoja_3 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_Tardia)):
            
                    ROW=i+1
                    for y in range(len(lista_min_Tardia[i])):
                        COLUMN=y+1
                        valor=lista_min_Tardia[i][y]
                        hoja_3.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)

            if True: #nuevo min temprano
                string_tittle=str(len(lista_min_temprano))+ ' Llegada Temprana'
                lista_min_temprano.insert(0,lista_cabecera_min_temprano)
               
                hoja_4 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_temprano)):
            
                    ROW=i+1
                    for y in range(len(lista_min_temprano[i])):
                        COLUMN=y+1
                        valor=lista_min_temprano[i][y]
                        hoja_4.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)

            if True: #sOBREtIEMPO
                string_tittle=str(len(lista_min_sobretiempo))+ ' SobreTiempo'
                lista_min_sobretiempo.insert(0,lista_cabecera_min_sobretiempo)
               
                hoja_5 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_sobretiempo)):
            
                    ROW=i+1
                    for y in range(len(lista_min_sobretiempo[i])):
                        COLUMN=y+1
                        valor=lista_min_sobretiempo[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)

            if True: #sOBREtIEMPO 3HR
                string_tittle=str(len(lista_min_sobretiempo_3hr))+ ' SobreTiempo +3HR'
                lista_min_sobretiempo_3hr.insert(0,lista_cabecera_min_sobretiempo_3h)
               
                hoja_5 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_sobretiempo_3hr)):
            
                    ROW=i+1
                    for y in range(len(lista_min_sobretiempo_3hr[i])):
                        COLUMN=y+1
                        valor=lista_min_sobretiempo_3hr[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)

            if True: #Dia descanso
                string_tittle=str(len(lista_min_dia_descanso))+ ' Dia Descanso'
                lista_min_dia_descanso.insert(0,lista_cabecera_min_dia_descanso)
               
                hoja_5 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_dia_descanso)):
            
                    ROW=i+1
                    for y in range(len(lista_min_dia_descanso[i])):
                        COLUMN=y+1
                        valor=lista_min_dia_descanso[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)

            if True: #Dia feriado
                string_tittle=str(len(lista_min_dia_Feriado))+ ' Dia Feriados'
                lista_min_dia_Feriado.insert(0,lista_cabecera_min_feriado)
               
                hoja_5 = wb.create_sheet(title=string_tittle)
                for i in range(len(lista_min_dia_Feriado)):
            
                    ROW=i+1
                    for y in range(len(lista_min_dia_Feriado[i])):
                        COLUMN=y+1
                        valor=lista_min_dia_Feriado[i][y]
                        hoja_5.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_novedades_ausencia_cosmetic(wb,string_tittle)


            empresa='GoCleaning/' 
            
            path=empresa+'archivos/'        
            
            nombre_archivo=path+'Novedades_Colaborador_del'+str(inicio)+'_al_'+final+'.xlsx'
            excel_buffer = BytesIO()

            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo Novedades Colaborador' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo Novedades Colaborador',file=archivo_temporal)
            
            excel_buffer.close()
             
         
        return render(request, "ver_reporte_novedades.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": 'Descargue Excel Del SIPE para pago de nomina quincela', 'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method , 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def reporte_acreedores(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

   

 
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
     
    lista_finalL=[]
    palabra_a_excluir = "Administrativo"
    lista_colaboradores=Colaboradores.objects.filter(Status__icontains='Activo')
    lista_administrativo=lista_colaboradores.filter(Departamento__icontains='Administrativo')
    lista_produccion=lista_colaboradores.exclude(Departamento__icontains=palabra_a_excluir)
        
    lista_clientes=Acreedores.objects.all()

        #palabra_a_excluir = "excluir_palabra"

    # Filtrar los objetos excluyendo aquellos que contienen la palabra a excluir
        #resultados_filtrados = TuModelo.objects.exclude(nombre__icontains=palabra_a_excluir)
    for i in range(len(lista_colaboradores)):
            
            lista=[lista_colaboradores[i].pk,
                   lista_colaboradores[i].Nro_Identificacion,
                   lista_colaboradores[i].Colaborador_nombre,
                   lista_colaboradores[i].Colaborador_apellido,
                   lista_colaboradores[i].Cargo,
                   lista_colaboradores[i].Departamento,
                   lista_colaboradores[i].Supervisor
                   ]
              
                        
            lista_finalL.append(lista)

    if request.method=='GET':
       
        
        
        return render(request, "ver_reporte_acreedores.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})
   
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        

        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
            Lista_Acreedores=Acreedores_quincena.objects.filter(Dia_Inicio_cobro__range=(fecha_inicial_corte.date(), fecha_final_corte.date()))
            lista_acreedores_cobro=[]
            for acree_obj in Lista_Acreedores:
                if acree_obj.Acreedores.Nombre_acreeditor not  in lista_acreedores_cobro:
                    lista_acreedores_cobro.append(acree_obj.Acreedores.Nombre_acreeditor)
            
            lista_principal =[]
            total=0
            num_pago_total=0
            for acreedor in lista_acreedores_cobro:
                lista_acredor_especifico=Lista_Acreedores.filter(Acreedores__Nombre_acreeditor=acreedor)
                monto_acreedor=0
                num_pago=0
                for obj_acree in lista_acredor_especifico:
                    monto_acreedor+=obj_acree.Monto_periodo
                    num_pago+=1
                    num_pago_total+=1
                
                lista_principal.append([acreedor,num_pago , round(monto_acreedor,2), str(fecha_inicial_corte.date()),str(fecha_final_corte.date()) ])
                total+=monto_acreedor
            
            lista_principal.append(['Total',num_pago_total,round(total,2),  str(fecha_inicial_corte.date()),str(fecha_final_corte.date())])

            lista_cabecera_principal=['Acreedor',
                'Total Pagos',
                'Monto a Pagar',
                'Inicio','Final'
             ]  

            if True: #primera hoja total acreedores

                string_tittle=str(num_pago_total)+ ' Totales Acreedores'
                lista_principal.insert(0,lista_cabecera_principal)
                
                wb= Workbook()
                ws=wb.active
               
                ws.title=string_tittle
                for i in range(len(lista_principal)):
                
                    ROW=i+1
                    for y in range(len(lista_principal[i])):
                        COLUMN=y+1
                        valor=lista_principal[i][y]
                        ws.cell(row=ROW, column=COLUMN,value=valor) 
                
                
                wb=fun_reporte_acreedor_cosmetic(wb,string_tittle)              

            #hacer pagina por clientes
            for acreedor in lista_acreedores_cobro:
                lista_acredor_especifico=Lista_Acreedores.filter(Acreedores__Nombre_acreeditor=acreedor)
                lista_indivual_detalles=[]
                for obj_acree in lista_acredor_especifico: 
                    inicio_cobro=obj_acree.Dia_Inicio_cobro
                    periodo=obj_acree.Periodo_Cobro
                    nombre=obj_acree.Acreedores.Colaborador.Colaborador_nombre
                    apellido=obj_acree.Acreedores.Colaborador.Colaborador_apellido
                    tipo_identif= obj_acree.Acreedores.Colaborador.Tipo_documento
                    identif= obj_acree.Acreedores.Colaborador.Nro_Identificacion
                    cuota=obj_acree.Nro_Cuota
                    cuota_totales=obj_acree.Acreedores.Meses_de_cobro
                    str_cuotas=str(cuota)+' de '+str(cuota_totales)+' cuotas'
                    abonado=round(obj_acree.Monto_periodo,2)
                    total_deuda=round(obj_acree.Acreedores.Monto_total,2)
                    total_abonado=round(obj_acree.Total_monto_abonado,2)
                    tipo_descuento=obj_acree.Tipo_Operacion

                    lista_indivual_detalles.append([inicio_cobro,periodo,nombre, apellido,tipo_identif, identif,acreedor,str_cuotas,abonado,total_abonado,total_deuda,total_deuda-total_abonado,tipo_descuento])
                lista_individual_cab=['Fecha Cobro','Periodo',
                'Nombres',
                'Apellidos',
                'Tipo de Documento',
                'Nro. identificacion',
                'Nombre Acreedor',
                'Nro. Cuota',
                '$ Cuota',
                'Total Pagado',
                'Total Deuda',
                'Restante Deuda',
                'Modo de Descuento'
                               ]
                
                if True: #nuevo hoja acreedores
                    string_tittle=str(len(lista_indivual_detalles))+' '+ acreedor
                    if len(string_tittle)>29:
                        string_tittle=string_tittle[:29]

                    lista_indivual_detalles.insert(0,lista_individual_cab)
                
                    hoja_1 = wb.create_sheet(title=string_tittle)
                    for i in range(len(lista_indivual_detalles)):
                
                        ROW=i+1
                        for y in range(len(lista_indivual_detalles[i])):
                            COLUMN=y+1
                            valor=lista_indivual_detalles[i][y]
                            hoja_1.cell(row=ROW, column=COLUMN,value=valor) 
                
                wb=fun_reporte_por_acreedores_individuales(wb,string_tittle)
            
            empresa='GoCleaning/' 
            
            path=empresa+'archivos/'        
            
            nombre_archivo=path+'Reporte_Acreedores_del'+str(inicio)+'_al_'+final+'.xlsx'
            excel_buffer = BytesIO()

            wb.save(excel_buffer)
            nombre_archivo_excel=nombre_archivo
            archivo_temporal = File(excel_buffer, name=nombre_archivo_excel)

                  
            try:
                        objetc_archivo = Archivos.objects.get(nombre='Archivo Novedades Colaborador' )
                        objetc_archivo.file=archivo_temporal
                        objetc_archivo.save()
            except: 
                        objetc_archivo = Archivos.objects.create(nombre='Archivo Novedades Colaborador',file=archivo_temporal)
            
            excel_buffer.close()
             
         
        return render(request, "ver_reporte_acreedores.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": 'Descargue Excel Del SIPE para pago de nomina quincela', 'MEDIA_URL':settings.MEDIA_URL, 'name_1':nombre_archivo , 'request':request.method , 'lista_cliente':lista_finalL,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'TOTAL_C':len(lista_administrativo)+len(lista_produccion),'admin':len(lista_administrativo), 'produccion':len(lista_produccion)})

def Importar_SIPE_csv(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1

    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    if request.method=='GET':
        lista_supervisores=[]
        lista_clientes=Colaboradores.objects.all()
        for lista in lista_clientes:
             value=lista.pk
             nombre=lista.Colaborador_nombre+' '+lista.Colaborador_apellido
             lista_supervisores.append([value,nombre])

        
        return render(request, "Importar_Sipe.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_supervisores':lista_supervisores, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    elif request.method=='POST':
        
        
        archivos = list(request.FILES.keys())
        
        if 'archivo' in archivos :
            
            
          
            archivo_subido = request.FILES['archivo']
            lineas = archivo_subido.readlines()
            lista_final=[]
            # Iterar sobre cada línea del archivo
            for linea in lineas:
                # Hacer algo con cada línea, por ejemplo, imprimirlo
                lista=linea.decode('iso-8859-1').split(';')
                lista_final.append(lista)
        
            # Leer el archivo CSV utilizando Pandas
           
            lista_result=fun_guardar_datos_en_SIPE_Mensuales(lista_final)
            try:
            #[total_sueldo_general, total_xiii_general,total_col , mes, year]
                total_sueldo=lista_result[0]
                total_xiii_general=lista_result[1]
                total_colab=lista_result[2]
                mes=lista_result[3]
                year=lista_result[4]
                
                Mensaje='SIPE Cargado con Exito en el Mes de : '+mes+'-'+str(year)+' Cantidad de Colaboradores: '+str(total_colab)+' un Total en Salario Ajustado: '+str(total_sueldo)+' un Monto de XIII es: '+str(total_xiii_general)
            except:
                Mensaje='Error en el archivo por favor revisar de nuevo.'

            #archivo_url = default_storage.url(archivo_guardado)
        
           

        
        else:
            file='no_hay_archivo.jpg'
            

        return render(request, "Importar_Sipe.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'agregado':'existo','colaborador':Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


def ver_Importar_SIPE(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    lista_final=[]
        
    
        
    if request.method=='GET':

        return render(request, "ver_importaciones_SIPE.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')
            lista_info_cliente=[]
            
                     
            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
           
            lista_planilla1=SIPE_Mensual.objects.filter(fecha_sipe__gte=fecha_inicial_corte.date(), fecha_sipe__lte=fecha_final_corte.date())
            total_colab=len(lista_planilla1)
            totales_salario=0
            total_vacaciones=0
            total_salario_ajustado=0
            total_xiii=0
            total_ss=0 
            total_se=0
            total_ss_dtm=0
            islr=0
            rp=0

            total_pago_sipe=0
            total_patron=0
            if total_colab > 0:
                totales_salario=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_sueldo')
                total_vacaciones=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_vacaciones') 
                total_salario_ajustado=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_sueldo_ajustado') 
                total_xiii=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_xxi') 
                total_ss=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_ss') 
                total_se=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_se') 
                total_ss_dtm=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_dtm') 
                islr=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_islr') 
                rp=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_rp') 

                total_pago_sipe=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'total_pago_Sipe') 
                total_patron=fun_sumatorio_en_modelo_IMPORTACION_SIPE( fecha_inicial_corte.date(),fecha_final_corte.date(),'Total_Gasto_Patron')

            lista_info_cliente=[ total_colab , total_patron ,  totales_salario , total_vacaciones , total_salario_ajustado,                 
            total_xiii, total_ss , total_se , total_ss_dtm , islr , rp , total_pago_sipe 
                                 ] 

            
            lista_final=[]

            for numero in lista_info_cliente:
                lista_final.append(formatear_numero(numero))

        
            
            #crear lista clientes especificos
        return render(request, "ver_importaciones_SIPE.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'request':request.method, 'lista_clientes':lista_planilla1 ,'lista_totales':lista_final,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def sign_up_page(request):
    if request.method=='POST':
        name = "POST"
        error=''
        error_pass=''
        error_email=''
        main_error=''
        
        usuario_name=request.POST["username"]
        usuario_lastname=request.POST["Lastname"]
        usuario_email=request.POST["email_address"]
        usuario_pass1=request.POST["password_1"]
        usuario_pass2=request.POST["password_2"]
        
        s = usuario_pass1
        if (len(s) >= 8):
            
            #print("Valid Password Format")
            error='Valid Password Format'
        else:
            #print("Invalid Password Format")
            error='Formato invalido de contraseña'
            
        if error=='Valid Password Format':
            if usuario_pass1==usuario_pass2:
                error_pass='passwords equal'
            else:
                error_pass='passwords not equal'
        if error_pass=='passwords equal':
            #print('saving user')
            saved='yes'
            try:
                user= User.objects.create(username=usuario_email, password=usuario_pass1,email=usuario_email,first_name=usuario_name, last_name=usuario_lastname)
                user.save()
                login(request, user)
                return redirect('home-page')
            except IntegrityError:
                main_error='Usuario ya creado, Por Favor Intente de nuevo en pagina de inicio sesion.'
                return render(request, "sign_up_page.html", {"name": name ,'error':main_error})
            except :
                main_error='Un Error ha Ocurrido, Intente mas Tarde o intente Log in.'
                return render(request, "sign_up_page.html", {"name": name ,'error':main_error})
        else:
            
            saved='no'
            if error=='Invalid Password Format':
                main_error+='Contraseña tiene 7 o menos caracteres, Por Favor intente de nuevo. '
            if error_pass=='passwords not equal':
                main_error+='Contraseñas no son iguales, Por Favor Intente nuevamente. '
            
        #print(usuario_name,usuario_lastname)
        #print(usuario_email)
        #print(usuario_pass1, usuario_pass2)

        return render(request, "sign_up_page.html", {"name": name ,'error':main_error})
    elif request.method=='GET':
        name='GET'
        return render(request, "sign_up_page.html", {"name": name, 'form':UserCreationForm })

def log_in(request):
    if request.method=='POST':
        
        usuario_email=request.POST["email_address"]
        usuario_pass1=request.POST["password_1"]
        try:
           
            user = User.objects.get(Q(username=usuario_email) | Q(email=usuario_email))
            
            if user.password==usuario_pass1:
            
                # A backend authenticated the credentials
                
                #verificar si el colabodor esta activo
                user_profile_obj= UserProfile.objects.get(user=user)
                if user_profile_obj.Status=='Activo' :
                    if  user_profile_obj.contrasena_default:
                        login(request, user)
                        
                        return redirect('change-password')

                    else:   
                        login(request, user)
                        return redirect('home-page')
                else:
                    error="Usuario Desactivado! , Por favor solicitar a Administrador a Activar su cuenta."
                    return render(request, "login_page.html", {"error": error})

            else:
                
                # No backend authenticated the credentials
                error="Correo o Contraseña incorrecta, Por Favor intente de nuevo!"
                return render(request, "login_page.html", {"error": error})
            
        except  User.DoesNotExist:
            error="Correo o Username incorrecta, Por Favor intente de nuevo!"
            return render(request, "login_page.html", {"error": error})

    else:
        return render(request, "login_page.html")

def log_out(request):
    logout(request)
    return redirect('home-page')

def change_password(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
           
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                   
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    if request.method=='POST':
        usuario = request.user
        
        # Obtener el correo electrónico del usuario
        correo = usuario.email
        
        # Obtener la contraseña del usuario (NO se recomienda obtener la contraseña así por motivos de seguridad)
        contrasena = usuario.password

        name = "POST"
        error=''
        error_pass=''
        error_email=''
        main_error=''
        usuario_pass1=request.POST["password_1"]
        usuario_pass2=request.POST["password_2"]

        if contrasena!=usuario_pass1:
                main_error='Contraseña Actual, Incorrecta, Por Favor intente de nuevo.'
                return render(request, "change_password.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": name ,'error':main_error})

        if usuario_pass1 == usuario_pass2:
                main_error='Contraseña Actual y nueva iguales, Por Favor intente de nuevo.'
                return render(request, "change_password.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": name ,'error':main_error})

   
        s = usuario_pass2
        if (len(s) >= 8):
            
            #print("Valid Password Format")
            error='Valid Password Format'
        else:
            #print("Invalid Password Format")
            error='Formato invalido de contraseña'
            
       
        if error=='Valid Password Format':
            
            saved='yes'
            try:
                user= User.objects.get(username=usuario,email=correo)
                user.password=usuario_pass2
                user.save()
                user_profile_obj= UserProfile.objects.get(user=user)
                user_profile_obj.contrasena_default=False
                user_profile_obj.save()
                login(request, user)
                return redirect('log-out')
            except IntegrityError:
                main_error='Usuario ya creado, Por Favor Intente de nuevo en pagina de inicio sesion.'
                return render(request, "change_password.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj,"name": name ,'error':main_error})
            except :
                main_error='Un Error ha Ocurrido, Intente mas Tarde o intente Log in.'
                return render(request, "change_password.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": name ,'error':main_error})
        else:
            
            saved='no'
            if error=='Invalid Password Format':
                main_error+='Contraseña tiene 7 o menos caracteres, Por Favor intente de nuevo. '
            if error_pass=='passwords not equal':
                main_error+='Contraseñas  son iguales, Por Favor Intente nuevamente. '
       
        #print(usuario_pass1, usuario_pass2)

        return render(request, "change_password.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": name ,'error':main_error})


    elif request.method=='GET':
        if not request.user.is_authenticated:
            return redirect('sign-in')
        name='GET'
        return render(request, "change_password.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, "name": name, 'form':UserCreationForm })

    
def activar_usuarios(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')



    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        
        try:
            
            lista_clientes=Colaboradores.objects.filter(Status='Activo', Usuario_permiso=False)
            
            for i in range(len(lista_clientes)):
                
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Departamento ,
                        lista_clientes[i].Nro_Identificacion ,
                        lista_clientes[i].Correo,
                        lista_clientes[i].imagen ,
                       


                        ##<td><img src="{{ MEDIA_URL }}{{  clientes.6 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        
                        ]
                lista_final.append(lista)
           
            
        except Exception as e:
            #print(e)
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            

        
        return render(request, "agregar_usuarios.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        
        try:
            
            lista_clientes=Colaboradores.objects.filter(Status='Activo', Usuario_permiso=False)
            
            for i in range(len(lista_clientes)):
                
                lista=[lista_clientes[i].pk,
                       lista_clientes[i].Colaborador_nombre,
                        lista_clientes[i].Colaborador_apellido ,
                        lista_clientes[i].Cargo ,
                        lista_clientes[i].Departamento ,
                        lista_clientes[i].Nro_Identificacion ,
                        lista_clientes[i].Correo,
                        lista_clientes[i].imagen ,
                       


                        ##<td><img src="{{ MEDIA_URL }}{{  clientes.6 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        
                        ]
                lista_final.append(lista)
           
            
        except Exception as e:
            #print(e)
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            

        
        values= list(request.POST.keys())
       
        #print(request.POST)
      
        
        colaborador=int(request.POST["colaborador"])
        Tipo_privilegio=int(request.POST["Tipo_privilegio"])
        HOY=datetime.now()
        HOY=HOY.date()

        colaborador_obj=Colaboradores.objects.get(pk=colaborador)
       
        if es_admin:
                            quien_agrego_Jornada='Administrador'
        else:
                            quien_agrego_Jornada=user_profile_obj.Colaborador.Colaborador_nombre+' '+user_profile_obj.Colaborador.Colaborador_apellido
        bool_archivo=False
        
        #con datos Colaborador sacar username, email, nombre y apellido   
        user_name=colaborador_obj.Nro_Identificacion
        email=colaborador_obj.Correo
        nombre=colaborador_obj.Colaborador_nombre
        usuario_lastname=colaborador_obj.Colaborador_apellido

        #crear un contrasena temporal por 8 character
        clave_generada = generar_clave()


        #crear usuario    
        try:
                user_obj= User.objects.create(username=user_name , password=clave_generada , email=email , first_name=nombre , last_name=usuario_lastname)
                
        except IntegrityError:
                Mensaje='Usuario ya creado, Por Favor Modifique Usuario.'
                return render(request, "agregar_usuarios.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 
        except :
                main_error='Un Error ha Ocurrido, Intente mas Tarde o contacte Soporte Tecnico.'
                return render(request, "sign_up_page.html", {'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 

        #crear modelo de profile con toda la info
        try:
            user_modelo=UserProfile.objects.get(user=user_obj.pk,Colaborador = colaborador_obj.pk)
            user_modelo.Status = 'Activo',
            user_modelo.nivel_seguridad = Tipo_privilegio,
            user_modelo.contrasena_default=True,
            user_modelo.Administrador='No Administrador',
            user_modelo.creado_por=quien_agrego_Jornada,
            user_modelo.fecha_creacion=HOY
            user_modelo.save()
        except:


            user_modelo=UserProfile.objects.create(user=user_obj, 
                                               Status = 'Activo',
                                                nivel_seguridad = Tipo_privilegio,
                                                Colaborador = colaborador_obj,
                                                contrasena_default=True,
                                                Administrador='No Administrador',
                                                creado_por=quien_agrego_Jornada,
                                                fecha_creacion=HOY)

        #actualizar colab obj con usuario permitido
        colaborador_obj.Usuario_permiso=True
        colaborador_obj.save()
        #mandar mensaje con username or correo  
        Mensaje='Usuario Creado!, Por Favor No cierre la Ventana hasta copiar la clave y usuario Temporal\n'
        Mensaje+='Usuario: '+user_name+'\n'
        Mensaje+='Clave Temporal: '+clave_generada+'\n'

        return render(request, "agregar_usuarios.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 

def modificar_usuarios(request):
    

# Filtra el queryset para obtener el usuario que deseas eliminar
    

    if not request.user.is_authenticated:
        return redirect('sign-in')

    if request.user.is_authenticated:
        # Obtener el usuario autenticado
        usuario = request.user
        #print(usuario.pk, 'usuario.pk')
        
        #que exista en este app
        try:
            user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

            if user_profile_obj.Administrador=='Administrador':
                if user_profile_obj.contrasena_default:
                    return redirect('change-password')
                es_admin=True
                Pic='no_hay_archivo.jpg'
                
            else:
                es_admin=False
                Pic='no_hay_archivo.jpg'
                if user_profile_obj.Status!='Activo':
                    return redirect('sign-in')
                elif user_profile_obj.contrasena_default:
                    return redirect('change-password')
            
            nivel=user_profile_obj.nivel_seguridad

            if nivel>=3:
                return redirect('pagina_no_permitida')


        except Exception as e:
            #print('no se que paso   ')
            #print(e)
            return redirect('sign-in')


        
    
    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':
        lista_final=[]
        lista_empresas=[]
        try:
            
            lista_clientes= UserProfile.objects.exclude(Administrador='Administrador')
            
            for i in range(len(lista_clientes)):
                
                lista=[lista_clientes[i].pk,
                      
                       lista_clientes[i].Colaborador.Colaborador_nombre,
                        lista_clientes[i].Colaborador.Colaborador_apellido ,
                        lista_clientes[i].Colaborador.Cargo ,
                        lista_clientes[i].Colaborador.Departamento ,
                        lista_clientes[i].Colaborador.Nro_Identificacion ,
                        lista_clientes[i].Colaborador.Correo,
                        lista_clientes[i].Colaborador.imagen ,
                        lista_clientes[i].nivel_seguridad ,
                        str(lista_clientes[i].fecha_creacion) ,
                        lista_clientes[i].creado_por ,
                        lista_clientes[i].contrasena_default,
                        lista_clientes[i].Status ,
                        lista_clientes[i].user.last_login
                        ##<td><img src="{{ MEDIA_URL }}{{  clientes.6 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        
                        ]
                lista_final.append(lista)
           
            
        except Exception as e:
            #print(e)
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            

        
       
        
        return render(request, "modificar_usuarios.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
    
    elif request.method=='POST':
        lista_final=[]
        
        
        
        values= list(request.POST.keys())
       
        #print(request.POST)
      
        
        colaborador=int(request.POST["colaborador"])
        user_modelo=UserProfile.objects.get(pk = colaborador)
        Mensaje=''
        if 'Tipo_privilegio' in values:
            Tipo_privilegio=int(request.POST["Tipo_privilegio"])
            user_modelo.nivel_seguridad=Tipo_privilegio
            user_modelo.save()
            Mensaje+='Se ha modificado Nivel Privilegio : '+str(Tipo_privilegio)+'\n'
            
        if 'recuperar' in values:
            clave_generada = generar_clave()
            user_obj=user_modelo.user
            user_obj.password=clave_generada
            user_obj.save()
            user_modelo.contrasena_default=True
            user_modelo.save()
            Mensaje+='Se ha Generado una clave temporal, Username : '+user_obj.username+' , Clave Temporal:  '+clave_generada+'  \n'
        
        if 'Status' in values:
            Status=request.POST["Status"]
            user_modelo.Status=Status
            user_modelo.save()
            Mensaje+='Se ha Modificado Status a : '+Status+' \n'
       

        try:
            
            lista_clientes= UserProfile.objects.exclude(Administrador='Administrador')
            
            for i in range(len(lista_clientes)):
                
                lista=[lista_clientes[i].pk,
                      
                       lista_clientes[i].Colaborador.Colaborador_nombre,
                        lista_clientes[i].Colaborador.Colaborador_apellido ,
                        lista_clientes[i].Colaborador.Cargo ,
                        lista_clientes[i].Colaborador.Departamento ,
                        lista_clientes[i].Colaborador.Nro_Identificacion ,
                        lista_clientes[i].Colaborador.Correo,
                        lista_clientes[i].Colaborador.imagen ,
                        lista_clientes[i].nivel_seguridad ,
                        str(lista_clientes[i].fecha_creacion) ,
                        lista_clientes[i].creado_por ,
                        lista_clientes[i].contrasena_default,
                        lista_clientes[i].Status 
                       


                        ##<td><img src="{{ MEDIA_URL }}{{  clientes.6 }}" alt="mdo" width="40" height="40" class="rounded-circle mb-2">  {{ clientes.1 }}</td>
                        
                        ]
                lista_final.append(lista)
           
            
        except Exception as e:
            #print(e)
           

            lista=['Cliente No Registrado',
                        'Sin Registrar',
                        'Agrege colaboradores o cliente'
                        ]
            lista_final.append(lista)
            


        return render(request, "modificar_usuarios.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'nivel':nivel,'es_admin':es_admin, 'Pic':Pic,'user_profile_obj':user_profile_obj,'lista_cliente':lista_final, 'agregado':'existo', 'Mensaje': Mensaje, 'qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores}) 

def crear_admin(request):
    clave_generada = generar_clave()
    email='main@email.com'
    username='ADMIN.'
    name='Admin'
    apellido='Jimenez'
    
    admin_user=User.objects.create(username=username, email=email, password=clave_generada, first_name=name, last_name=apellido)
    print( 'Creado Username:',username , 'Password:')
    print(clave_generada)
    fecha_hoy=datetime.now()
    fecha_hoy=fecha_hoy.date()
    user_profile=UserProfile.objects.create(user=admin_user, nivel_seguridad=1, Administrador='Administrador', creado_por='Main_Admin',fecha_creacion=fecha_hoy)
    print('Usuario_cread')

def pagina_no_permitida(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':

        return render(request, "pagina_no_permitida.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})
        
def actividad_usuario(request):
    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                if nivel>=3:
                    return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')

    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
    
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1

    

    if request.method=='GET':
        
        lista_colaboradores=UserProfile.objects.filter(Status__icontains='Activo')
        lista_colaboradores = lista_colaboradores.exclude(Colaborador__isnull=True)

        return render(request, "ver_actividad_usuario.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_colaboradores,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'request':request.method })
    elif request.method=='POST':
        #print(request.POST)
        # #print(request.FILES['archivo'])
        values= list(request.POST.keys()) 
        if 'inicial' in values: #planilla sacar periodo 
            inicio=request.POST["inicial"]
            final=request.POST["final"]
            
            lista_inicio=inicio.split('-')
            lista_final=final.split('-')


            fecha_inicial_corte = datetime(int(lista_inicio[0]),int(lista_inicio[1]), int(lista_inicio[2]))      # Ejemplo: 10 de julio de 2024
            fecha_final_corte = datetime(int(lista_final[0]), int(lista_final[1]), int(lista_final[2]))        # Ejemplo: 20 de julio de 2024
            
           
            
            lista_planilla1=Seguimiento_Actividad.objects.filter(Fecha_novedad__gte=fecha_inicial_corte.date(), Fecha_novedad__lte=fecha_final_corte.date())

            
        return render(request, "ver_actividad_usuario.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_planilla1,'qty_notificaciones_permisos':qty_notificaciones_permisos,'qty_notificaciones_acreedores':qty_notificaciones_acreedores, 'request':request.method})

def pagina_planilla_cerrada(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':

        return render(request, "pagina_planilla_cerrada.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})

def pagina_planilla_creada(request):

    if True: #Autenticacion
        if not request.user.is_authenticated:
            return redirect('sign-in')

        if request.user.is_authenticated:
            # Obtener el usuario autenticado
            usuario = request.user
            #print(usuario.pk, 'usuario.pk')
            
            #que exista en este app
            try:
                user_profile_obj=UserProfile.objects.get(user_id=usuario.pk)

                if user_profile_obj.Administrador=='Administrador':
                    if user_profile_obj.contrasena_default:
                        return redirect('change-password')
                    es_admin=True
                    Pic='no_hay_archivo.jpg'
                    
                else:
                    es_admin=False
                    Pic='no_hay_archivo.jpg'
                    if user_profile_obj.Status!='Activo':
                        return redirect('sign-in')
                    elif user_profile_obj.contrasena_default:
                        return redirect('change-password')
                
                nivel=user_profile_obj.nivel_seguridad
                #if nivel>=3:
                    #return redirect('pagina_no_permitida')


            except Exception as e:
                #print('no se que paso   ')
                #print(e)
                return redirect('sign-in')


    lista_notificaciones=Permisos.objects.all()
    qty_notificaciones_permisos=0
    
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_permisos+=1
                   
    lista_notificaciones=Acreedores.objects.all()
    qty_notificaciones_acreedores=0
    lista_final=[]
    if len(lista_notificaciones)> 0:
         for i in lista_notificaciones:
              if i.Estado_Permiso=='Pendiente':
                   qty_notificaciones_acreedores+=1
    
    if request.method=='GET':

        return render(request, "pagina_planilla_creada.html",{'nivel':nivel,'es_admin':es_admin, 'Pic':Pic, 'user_profile_obj':user_profile_obj, 'lista_cliente':lista_final,'agregado1':'no_existo','qty_notificaciones_permisos':qty_notificaciones_permisos, 'qty_notificaciones_acreedores':qty_notificaciones_acreedores})


